<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>闲耘™.博客</title>
 <link href="http://blog.hotoo.me/atom.xml" rel="self"/>
 <link href="http://blog.hotoo.me/"/>
 <updated>2013-04-25T13:45:18+08:00</updated>
 <id>http://blog.hotoo.me/</id>
 <author>
   <name>闲耘</name>
   <email>hotoo.cn@gmail.com</email>
 </author>

 
 <entry>
   <title>JavaScript for 循环的变量定义</title>
   <link href="http://blog.hotoo.me/post/for-variable-defined.html"/>
   <updated>2013-04-25T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/for-variable-defined</id>
   <content type="html">&lt;p&gt;上周有位前端同学周报里分享了段 for 循环的『好代码』：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
for (var i = 0, item; item = list[i]; i++) {
  // 将 ltem = list[i]当做条件判断语句，当i下标溢出时，返回undefined，循环结束
  // 居然省了一个变量呢～
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这位同学是看了 jQuery 的里的这个用法之后做的这个分享：&lt;/p&gt;

&lt;p&gt;```javascript
// If no nodeType, this is expected to be an array
for ( ; (node = elem[i]); i++ ) {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Do not traverse comment nodes
ret += getText( node );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;jQuery 还有不少地方使用这种用法，也有不少地方是传统的使用 length 方法。
但是 jQuery 这样用有其特定场景，需要正视。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果数组项中有 0, false, null, undefined, &quot;&quot;，代码就出 bug 了。&lt;/li&gt;
&lt;li&gt;好像没看到少了变量，一定要少的话，典型的 for 写法也可以少（但是不推荐）。&lt;/li&gt;
&lt;li&gt;代码是给人读的，偶尔给及其执行下。&lt;/li&gt;
&lt;li&gt;另外，对 list 本身有操作，尤其是长度有影响的操作要特别注意。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;我个人推荐下面这种写法：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
for(var i=0,l=list.length; i&amp;lt;l; i++){
  list[i]
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Vim snipMate 代码片段模板里这样写：&lt;/p&gt;

&lt;p&gt;```
snippet for&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(var ${1:i}=0,${2:l}=${3:list}.length; $1&amp;lt;$2; $1${4:++}){
    ${5:$3[$1]}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;snippet forr&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(var ${1:i}=${2:list}.length-1; $1&amp;gt;=0; $1--){
    ${3:$2[$1]}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;snippet forin&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(var ${1:k} in ${2:obj}){
    ${3:$2[$1]}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;由于 JavaScript 作用域的问题，有同学建议说将 &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; 变量定义在 &lt;code&gt;for&lt;/code&gt; 循环之外。&lt;/p&gt;

&lt;p&gt;这个我稍微持不同的观点 ：）&lt;/p&gt;

&lt;p&gt;&lt;code&gt;i&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; 是定义给 for 用的，机器执行的时候可以给外面用，不代表就应该定义在外面。&lt;/p&gt;

&lt;p&gt;定义在外面给人的暗示是给整个 function 用的，而不只是 for 循环，就会给人
『在外面用也没关系』的感觉，但这不是我们定义 i, l 的本意。&lt;/p&gt;

&lt;p&gt;代码是给人读的，偶尔给机器执行下。&lt;/p&gt;

&lt;p&gt;所以我比较喜欢就近定义的风格。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;请问你持什么观点呢？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>关于 JavaScript 拼音的分享</title>
   <link href="http://blog.hotoo.me/post/javascript-pinyin-share.html"/>
   <updated>2013-04-08T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/javascript-pinyin-share</id>
   <content type="html">&lt;p&gt;3年前(2010年7月)写了 &lt;a href=&quot;https://github.com/hotoo/pinyin.js&quot;&gt;pinyin.js&lt;/a&gt; 项目，
当时特别重视性能，项目描述还特别强调了『极速』，&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Github 的 404 页面是个好路由</title>
   <link href="http://blog.hotoo.me/post/github-404-is-a-good-route.html"/>
   <updated>2013-03-24T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/github-404-is-a-good-route</id>
   <content type="html">&lt;p&gt;上周五周会上 @玉伯 做了个微分享：由于新浪微博的 BUG，不会将 https 的 URL 自动
转成可点击的链接，于是玉伯给 lifesinger.github.com Project 做了个 index.html
页面：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  var id = parseInt(location.search.substring(1))
  location.replace(
      'https://github.com/lifesinger/lifesinger.github.com/issues' +
          (id ? '/' + id : '?labels=blog'))
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以通过 &lt;a href=&quot;http://lifesinger.github.com/?126&quot;&gt;http://lifesinger.github.com/?126&lt;/a&gt;
这个链接来访问对应的 issues (玉伯的博客使用 Github 的 issues 管理发布)&lt;/p&gt;

&lt;p&gt;我看到这个 URL 第一感觉是不爽，立即想到可以用 404 页面来做路由跳转页，然后访问
地址可以改成 &lt;code&gt;http://lifesinger.github.com/126&lt;/code&gt; 这样。&lt;/p&gt;

&lt;p&gt;于是玉伯的分享完败，也为下一个我要做的分享加了分 XD&lt;/p&gt;

&lt;p&gt;今天仔细想了想，使用 404 页面做路由跳转的思路本身很不错，
但是 &lt;code&gt;http://lifesinger.github.com/126&lt;/code&gt; 这样的 URL 其实是不具有可扩展性的，
也没有良好的语义性，而且也不是很好验证 URL 的业务合法性。于是可以改成如下：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://lifesinger.github.com/blog/126&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;好了，根据 URL 前缀信息，404 页面可以扩展成你需要的任意路由跳转页，
或者非路由的 404 原始页了。&lt;/p&gt;

&lt;p&gt;散花~&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>个人资金管理软件</title>
   <link href="http://blog.hotoo.me/post/personal-financial-manage-soft.html"/>
   <updated>2013-02-17T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/personal-financial-manage-soft</id>
   <content type="html">&lt;p&gt;过年花掉不少钱，而其中有一部分是喜酒之类的礼金，按照礼尚往来的习俗，这些礼金
早晚都是要被送回来的，而被送回来的途径，则是喜酒回请。&lt;/p&gt;

&lt;p&gt;这些俗礼，即使不是为了收回礼金，回请对方也是必须的。&lt;/p&gt;

&lt;p&gt;为了避免忘记吃过的酒席（前几年的都忘记差不多了），也为了对自己的资金有更清晰
的掌握，于是开始记账。&lt;/p&gt;

&lt;p&gt;我现在用上了 Macbook Pro 和 iPhone，于是想找一个可以运行于 Mac OSX 和 iOS 平台
的软件，两者同步数据是必须的要求。毕竟移动设备记账有很多的便利优势，而 PC 做
更细致的管理与分析则更为方便和强大。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;GNUCash&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.gnucash.org/&quot;&gt;GNUCash&lt;/a&gt; 非常有名，也是我最早知道的开源金融管理软件
之一，复式记账一直是我觉得很厉害但是又不明白的概念。后来看了一些金融相关不入门
的信息，才有所了解。&lt;/p&gt;

&lt;p&gt;以前也在 Windows 下使用过 GNUCash，本身还是很不错的，但是当时我没有坚持下来。&lt;/p&gt;

&lt;p&gt;这次下载最新版回来在 Mac 上安装好之后发现，除了菜单之外，界面上中文全部是乱码，
一行中文被缩挤到第一列。新建账户或者其他任何操作都是不知所以，完全没法用。
最奇怪的是，网络上各个搜索引擎居然都搜索不到 GNUCash 乱码的内容，偶尔有一篇，
还是将数据库的。原来 GNUCash 使用的是 MySQL 存储数据？&lt;/p&gt;

&lt;p&gt;GNUCash 目前支持 Windows, Mac, Linux, 和 Android 平台。&lt;/p&gt;

&lt;h2&gt;iCash&lt;/h2&gt;

&lt;p&gt;后来看到有人推荐使用 &lt;a href=&quot;http://www.maxprog.com/site/software/personal-finance/icash_sheet_us.php&quot;&gt;iCash&lt;/a&gt;，
Mac 下 &lt;code&gt;i&lt;/code&gt; 系列的好像都不错，于是尝试了下。&lt;/p&gt;

&lt;p&gt;iCash 支持 Windows, Mac 平台，也有中文支持。&lt;/p&gt;

&lt;p&gt;但就是觉得操作不算便利，一大堆莫名其妙的表单，有些会自动根据后面的表单自动适配，
不需要显示但居然安排在最前面，后来我才知道可以不填。&lt;/p&gt;

&lt;p&gt;界面有点点土，用户体验也不好。概览里管理资金账户，如果需要更新交易，则需要
切换到『交易』页签，然后选择是哪个账户的交易。表单恐惧症~&lt;/p&gt;

&lt;p&gt;填了不到 50条左右（存储的 .icash 文件有 23.8M 这么大）就烦了，
于是继续寻找其他软件。&lt;/p&gt;

&lt;h2&gt;Money&lt;/h2&gt;

&lt;p&gt;最后才找到 &lt;a href=&quot;http://www.jumsoft.com/money/&quot;&gt;Money by jumsoft&lt;/a&gt; 界面设计非常赞，
大部分使用体验也很棒，有部分瑕疵，而最要命的启动速度非常慢，导入从 iCash
导出的 QIF 格式数据(.money 文件 500+KB) 启动时间大概需要 10秒。&lt;/p&gt;

&lt;p&gt;另外如果上次退出 Money 的时候没有打开的文档（每个 .money 文件是一个文档）的话，
下次启动会要求创建新文档，只好打开最近的文档，再等 10秒钟。所以建议直接
&lt;code&gt;&amp;lt;Command-q&amp;gt;&lt;/code&gt; 退出文档 &amp;amp; 程序，不要使用 &lt;code&gt;&amp;lt;Command-w&lt;/code&gt; 之类的关闭文档。&lt;/p&gt;

&lt;p&gt;另外还有 iOS(iPhone, iPad)版本，收费也不贵。可以通过 Wi-Fi 或 iCloud 同步数据。
虽然呼声很高，目前还不支持 Dropbox 同步。不过像其他重要资料一样，我的 .money
文件存储在 Dropbox 中。&lt;/p&gt;

&lt;p&gt;总之是很赞啦，如果解决了性能问题就更好了，还有就是缺少中文本地化，另外 Mac 版
显示全部交易也不好，还有那啥~&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>迁移博客到 Jekyll</title>
   <link href="http://blog.hotoo.me/post/start-jekyll-for-blog.html"/>
   <updated>2013-02-13T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/start-jekyll-for-blog</id>
   <content type="html">&lt;h2&gt;_posts 文件结构&lt;/h2&gt;

&lt;p&gt;Jekyll 支持两种结构：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;平铺所有文件，每个文件使用日期前缀。&lt;/li&gt;
&lt;li&gt;按照完整的日期目录结构。&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;静态链接(Permalink)&lt;/h2&gt;

&lt;p&gt;我的个人博客并非用于发布新闻，即使非常旧的博客，也会不断更新维护，
所以无需添加时间标识，直接使用 title 即可。&lt;/p&gt;

&lt;p&gt;如果需要多个版本，为避免出现冲突，可以在 title 中添加序号。如 &lt;code&gt;II&lt;/code&gt; 或 &lt;code&gt;2&lt;/code&gt;。&lt;/p&gt;

&lt;h2&gt;草稿(Draft)&lt;/h2&gt;

&lt;p&gt;Jekyll 支持 &lt;code&gt;published&lt;/code&gt; 标记，设置为 &lt;code&gt;false&lt;/code&gt; 就可以避免被转换发布。
这本身很不错，但是这些草稿和正常发布的文件混淆在一起，无法清晰区分。&lt;/p&gt;

&lt;p&gt;所以我创建了 &lt;code&gt;_draft&lt;/code&gt; 目录，用于存放草稿。在文章准备好之后拷贝到 &lt;code&gt;_posts&lt;/code&gt;
目录即可。&lt;/p&gt;

&lt;p&gt;p.s. 话说相比 &lt;code&gt;published&lt;/code&gt; 标记，我更喜欢 &lt;code&gt;draft&lt;/code&gt;，如果支持的话。&lt;/p&gt;

&lt;h2&gt;more&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jacquesf.com/2011/03/creating-excerpts-in-jekyll-with-wordpress-style-more-html-comments/&quot;&gt;Creating Excerpts in Jekyll with Wordpress-style &amp;lt;!--more--&amp;gt; HTML Comments&lt;/a&gt;&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;存档(Archive)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/enaeher/88cda643aa7e3b0ca1e5&quot;&gt;enaeher / tiered_archives.rb&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;目录(TOC)&lt;/h2&gt;

&lt;p&gt;http://stackoverflow.com/questions/9602936/how-to-add-a-table-of-contents-to-jekyll-blog-post
http://stackoverflow.com/questions/13481572/jekyll-automatic-table-of-contents
http://du1abadd.org/2010/usr/make_toc_support_for_jekyll_with_rdiscount.html&lt;/p&gt;

&lt;h2&gt;标签(Tags)&lt;/h2&gt;

&lt;h2&gt;代码高亮&lt;/h2&gt;

&lt;h2&gt;分页&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;pagination&quot;&amp;gt;
  {.% if paginator.previous_page == 1 %}
    &amp;lt;a href=&quot;/&quot; class=&quot;previous&quot;&amp;gt;上一页&amp;lt;/a&amp;gt;
  {.% else if paginator.previous_page %}
    &amp;lt;a href=&quot;/page{.{paginator.previous_page}}&quot; class=&quot;previous&quot;&amp;gt;上一页&amp;lt;/a&amp;gt;
  {.% else %}
    &amp;lt;span class=&quot;previous&quot;&amp;gt;上一页&amp;lt;/span&amp;gt;
  {.% endif %}
  &amp;lt;span class=&quot;page_number&quot;&amp;gt;页码：{.{paginator.page}} / {.{paginator.total_pages}}&amp;lt;/span&amp;gt;
  {.% if paginator.next_page %}
    &amp;lt;a href=&quot;/page{.{paginator.next_page}}&quot; class=&quot;next&quot;&amp;gt;下一页&amp;lt;/a&amp;gt;
  {.% else %}
    &amp;lt;span class=&quot;next&quot;&amp;gt;下一页&amp;lt;/span&amp;gt;
  {.% endif %}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;参考：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jeffreysambells.com/2013/02/01/jekyll-draft-publishing-plugin&quot;&gt;Jekyll Draft Publishing Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tqcblog.com/2012/08/22/jekyll-drafts/&quot;&gt;Jekyll Draft Posts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;与 Vimwiki 结合&lt;/h2&gt;

&lt;p&gt;之前的博客使用 Vimwiki 管理，可以无需转换或发布，直接使用 Vim 即可简单浏览。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:vimwiki_list = [
  \ {
    \ 'path'        : '~/Dropbox/blog.hotoo.me/_posts',
    \ 'index'       : '_index',
    \ 'ext'         : '.md',
    \ 'nested_syntaxes' : {'javascript': 'javascript', 'python': 'python', 'c++': 'cpp'}
  \ }
\]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;不足&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;_posts/*.md&lt;/code&gt; 文档理论上只会作为内容输出，其中的代码（尤其是 Jekyll 使用的模板
代码，及其 &lt;code&gt;pre &amp;gt; code&lt;/code&gt; 中的代码，应该合理转义处理。但是实际上 Jekyll 没有这样
做，导致一些代码没有符合期望。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用空格还是 Tab 缩进代码？</title>
   <link href="http://blog.hotoo.me/post/format-by-spaces-or-tabs.html"/>
   <updated>2013-01-06T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/format-by-spaces-or-tabs</id>
   <content type="html">&lt;p&gt;这也是一个经典的问题吧。很长一段时间以来我都是被影响为使用空格，而且似乎大多数
人都使用 4 个空格吧。。&lt;/p&gt;

&lt;h2&gt;可视空间&lt;/h2&gt;

&lt;p&gt;空格：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;几乎所有编辑器或代码查看器中的占位一致，缩进风格统一。&lt;/li&gt;
&lt;/ul&gt;


&lt;!--more--&gt;


&lt;p&gt;Tab:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每个编辑器可视占位空间可能不一致，但大多数编辑器可以设置，所以每个用户可以
使用自己的视觉习惯。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;展开阅读&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.derkarl.org/why_to_tabs.html&quot;&gt;Why I love having tabs in source code.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jwz.org/doc/tabs-vs-spaces.html&quot;&gt;Tabs versus Spaces: An Eternal Holy War.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>使用 MacVim 做 svn diff</title>
   <link href="http://blog.hotoo.me/post/macvim-svndiff.html"/>
   <updated>2012-10-31T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/macvim-svndiff</id>
   <content type="html">&lt;h2&gt;对于终端的 vim&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;~/.subversion/config&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [helpers]
 diff-cmd = /usr/local/bin/svndiff
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将下面的代码保存为 svndiff：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; #!/bin/sh

 DIFF=&quot;/usr/bin/vimdiff&quot;
 LEFT=${6}
 RIGHT=${7}
 $DIFF $LEFT $RIGHT
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;拷贝到 &lt;code&gt;/usr/local/bin/svndiff&lt;/code&gt; 并设置权限：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod +a /usr/local/bin/svndiff
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;对于 MacVim&lt;/h2&gt;

&lt;p&gt;修改 &lt;code&gt;/usr/local/bin/svndiff&lt;/code&gt; 内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

LEFT=${6}
RIGHT=${7}
TMPLEFT=&quot;/tmp/${LEFT##*/}.$$&quot;
TMPRIGHT=&quot;/tmp/${RIGHT##*/}.$$&quot;

cp &quot;$LEFT&quot; &quot;$TMPLEFT&quot;
cp &quot;$RIGHT&quot; &quot;$TMPRIGHT&quot;

mvim --servername SVNDIFF --remote-tab-silent +&quot;vertical diffsplit $TMPLEFT|wincmd w&quot; &quot;$TMPRIGHT&quot;
sleep 0.1

SN=`mvim --serverlist | grep &quot;SVNDIFF&quot;`
until [ &quot;$SN&quot; == &quot;SVNDIFF&quot; ]; do
  sleep 0.1
  SN=`mvim --serverlist | grep &quot;SVNDIFF&quot;`
done

rm -f &quot;$TMPLEFT&quot; &quot;$TMPRIGHT&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之前尝试过修改终端方案中的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DIFF=&quot;/usr/bin/vimdiff&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DIFF=&quot;gvim -d&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;未遂，右侧的代码会为空。&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.com/ntakushima/statuses/27518378028&quot;&gt;svn diffの結果をMacVimで。&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/629457&quot;&gt;diffwrap.sh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>在 Vim 上安装使用 Tagbar</title>
   <link href="http://blog.hotoo.me/post/vim-install-tagbar.html"/>
   <updated>2012-10-28T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim-install-tagbar</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;git clone https://github.com/mozilla/doctorjs.git –recursive
cd doctorjs
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会提示将 NODE_PATH 加入到环境变量 ~/.bash_profile ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export NODE_PATH=/usr/local/lib/jsctags/:$NODE_PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://majutsushi.github.com/tagbar/&quot;&gt;Tagbar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/majutsushi/tagbar/wiki&quot;&gt;Support for additional filetypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ahchoo.me/blog/2012/03/08/learn-vim-3-post/&quot;&gt;Vim学习 Jsctags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/doctorjs&quot;&gt;Doctor.js&lt;/a&gt; - jsctags.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hotoo/dotfiles/blob/master/.ctags&quot;&gt;.ctags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jezng.com/2011/03/vim-support-javascript-taglist-plus/&quot;&gt;Awesome vim support for javascript with jsctags and taglist-plus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hikejun.com/blog/2011/05/07/%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%94%A8vim%E6%B5%8F%E8%A7%88javascript%E4%BB%A3%E7%A0%81/&quot;&gt;更好的用vim浏览Javascript代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>杭州萧山无人村骑行</title>
   <link href="http://blog.hotoo.me/post/WuRenCun.html"/>
   <updated>2012-10-27T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/WuRenCun</id>
   <content type="html">&lt;p&gt;从驴友哪里知道杭州附近有个无人村，网上看了帖子盘山公路很风景都很吸引人，
但是地图山就是搜索不到在哪里，后来才知道地图上是狮山村，大概是后来没有人住了
才被大家称为无人村的。&lt;/p&gt;

&lt;p&gt;骑行路线：&lt;/p&gt;

&lt;iframe width=&quot;425&quot; height=&quot;350&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; src=&quot;https://ditu.google.com/maps/ms?msa=0&amp;amp;msid=201867621321994349317.0004ccf3731b6db4167b5&amp;amp;brcurrent=3,0x344bb629439aaa99:0xa7bfd183824de83a,0%3B5,0,0&amp;amp;ie=UTF8&amp;amp;t=h&amp;amp;ll=30.123883,120.152439&amp;amp;spn=0.296055,0.075098&amp;amp;output=embed&quot;&gt;&lt;/iframe&gt;


&lt;br /&gt;&lt;small&gt;View &lt;a href=&quot;https://ditu.google.com/maps/ms?msa=0&amp;amp;msid=201867621321994349317.0004ccf3731b6db4167b5&amp;amp;brcurrent=3,0x344bb629439aaa99:0xa7bfd183824de83a,0%3B5,0,0&amp;amp;ie=UTF8&amp;amp;t=h&amp;amp;ll=30.123883,120.152439&amp;amp;spn=0.296055,0.075098&amp;amp;source=embed&quot; style=&quot;color:#0000FF;text-align:left&quot;&gt;狮山村（无人村）&lt;/a&gt; in a larger map&lt;/small&gt;


&lt;p&gt;其他同学都有事没能一起，只有一个测试好基友 &lt;a href=&quot;http://weibo.com/n/peacefulgoose&quot;&gt;@peacefulgoose&lt;/a&gt; 一起。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>『逻辑与』是个好东西</title>
   <link href="http://blog.hotoo.me/post/logical-conjunction.html"/>
   <updated>2012-05-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/logical-conjunction</id>
   <content type="html">&lt;p&gt;一直很想实现 WebForms2 的语义化表单验证，最近才开始动手，执行力真差啊。&lt;/p&gt;

&lt;p&gt;一个表单元素可以同时存在多种校验方案，比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;required.&lt;/li&gt;
&lt;li&gt;data type: number, date, url, email...&lt;/li&gt;
&lt;li&gt;minlength, maxlength, min, max.&lt;/li&gt;
&lt;li&gt;pattern&lt;/li&gt;
&lt;li&gt;用户自定义验证函数。&lt;/li&gt;
&lt;li&gt;异步访问服务器进行业务校验。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;通常可以通过逻辑判断进行处理：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function verifyFormInput(input){
  if(!verifyRequired()){return false;}
  if(!verifyMinLength()){return false;}
  if(!verifyMaxLength()){return false;}
  if(!verifyInputType()){return false;}
  if(!verifyMin()){return false;}
  if(!verifyMax()){return false;}
  if(!verifyPattern()){return false;}
  if(!verifyUserRules()){return false;}
  if(!verifySync()){return false;}
  return true;
}
function verifyForm(form){
    var flags = [];
    for(var i=0,l=form.elements.length; i&amp;lt;l; i++){
        // 一次只能校验一个表单元素异常。
        //if(!verifyFormInput(form.elements[i])){return false;}

        // 可以同时校验所有元素异常。但是需要辅助循环进行检查。
        flags[i] = verifyFormInput(form.elements[i]);
    }
    // 辅助循环检查。
    for(var i=0,l=flags.length; i&amp;lt;l; i++){
        if(!flags[i]){return false;}
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际代码中，各个 &lt;code&gt;verifyXXX&lt;/code&gt; 函数可能内联在 &lt;code&gt;verifyFormInput&lt;/code&gt; 函数中，
代码显得多而有点乱，甚至有点冗余。&lt;/p&gt;

&lt;p&gt;想起模拟电路课程上学到的『与门』，只有所有电路都是通路时，整个电路才是通路。&lt;/p&gt;

&lt;p&gt;而表单验证也是这样：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;某个表单元素的所有验证逻辑都通过验证时，这个表单元素才算通过验证。&lt;/li&gt;
&lt;li&gt;整个表单的所有表单元素都通过验证时，才算这个表单通过验证。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;同时基于『逻辑与』表达式的语言特性，一旦前面的条件可以判断逻辑失败，立即返回
失败，不再进行后面的条件判断。&lt;/p&gt;

&lt;p&gt;LogicalANDExpression:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Semantics&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The production LogicalANDExpression : LogicalANDExpression &amp;amp;&amp;amp;
BitwiseORExpression is evaluated as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Evaluate LogicalANDExpression.&lt;/li&gt;
&lt;li&gt; Call GetValue(Result(1)).&lt;/li&gt;
&lt;li&gt; Call ToBoolean(Result(2)).&lt;/li&gt;
&lt;li&gt; If Result(3) is &lt;em&gt;false&lt;/em&gt;, return Result(2).&lt;/li&gt;
&lt;li&gt; Evaluate BitwiseORExpression.&lt;/li&gt;
&lt;li&gt; Call GetValue(Result(5)).&lt;/li&gt;
&lt;li&gt; Return Result(6).&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;BitwiseORExpression:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;  &lt;em&gt;Semantics&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;  The production A : A@B, where @ is one of the bitwise operators in the
  productions above, is evaluated as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Evaluate A.&lt;/li&gt;
&lt;li&gt; Call GetValue(Result(1)).&lt;/li&gt;
&lt;li&gt; Evaluate B.&lt;/li&gt;
&lt;li&gt; Call GetValue(Result(3)).&lt;/li&gt;
&lt;li&gt; Call ToInt32(Result(2)).&lt;/li&gt;
&lt;li&gt; Call ToInt32(Result(4)).&lt;/li&gt;
&lt;li&gt; Apply the bitwise operator @ to Result(5) and Result(6). The result is
a signed 32 bit integer.&lt;/li&gt;
&lt;li&gt; Return Result(7).&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是验证算法改良如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function verifyFormInput(input){
    var certified = true;
    certified = certified &amp;amp;&amp;amp; verifyRequired();
    certified = certified &amp;amp;&amp;amp; verifyMinLength();
    certified = certified &amp;amp;&amp;amp; verifyMaxLength();
    certified = certified &amp;amp;&amp;amp; verifyInputType();
    certified = certified &amp;amp;&amp;amp; verifyMin();
    certified = certified &amp;amp;&amp;amp; verifyMax();
    certified = certified &amp;amp;&amp;amp; verifyPattern();
    certified = certified &amp;amp;&amp;amp; verifyUserRules();
    certified = certified &amp;amp;&amp;amp; verifySync();
    return certified;
}
function verifyForm(form){
    var certified = true;
    for(var i=0,flag,l=form.elements.length; i&amp;lt;l; i++){
        // 一次只能校验一个表单元素异常。
        //certified = certified &amp;amp;&amp;amp; verifyFormInput(form.elements[i]);

        // 可以同时校验所有元素异常。无需辅助循环进行检查。
        flag = verifyFormInput(form.elements[i]);
        certified = certified &amp;amp;&amp;amp; flag;
    }
    return certified;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;延伸&lt;/h2&gt;

&lt;p&gt;以前也 Hack 的用过逻辑与表达式，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flag &amp;amp;&amp;amp; action();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但这个用法只是用到了条件判断的作用，类似于：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(flag){action();}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecmascript.org/&quot;&gt;ECMAScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E4%B8%8E&quot;&gt;逻辑与&lt;/a&gt;
  &lt;a href=&quot;http://en.wikipedia.org/wiki/Logical_conjunction&quot;&gt;Logical_conjunction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E4%B8%8E%E9%97%A8&quot;&gt;与门&lt;/a&gt;
  &lt;a href=&quot;http://en.wikipedia.org/wiki/AND_gate&quot;&gt;AND_gate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>千里走单骑</title>
   <link href="http://blog.hotoo.me/post/bicycle-travel.html"/>
   <updated>2012-04-02T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/bicycle-travel</id>
   <content type="html">&lt;p&gt;今天和 5 个同事一起从公司出发，骑车去径山寺。&lt;/p&gt;

&lt;h2&gt;路线&amp;amp;定位&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Google Maps for iPhone.
  可以自动搜索匹配路线，参考价值还是很高的。&lt;/li&gt;
&lt;li&gt;Google Maps 手机 Web 版(iPhone)
  这个不错，支持 My Places。就是每次动作都可能下载数据会比较费流量，体验也相对下降。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://itunes.apple.com/us/app/my-maps-editor/id389114621?mt=8&quot;&gt;My Maps Editor&lt;/a&gt;
  支持 Google Maps My Places，但是对于用 Google Maps 自动搜索到的路线，保存到
  My Places 的数据，这个支持还不行，会被拉成直线。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://itunes.apple.com/us/app/my-place-for-google-maps/id492861440?mt=8&quot;&gt;My Place for Google Maps&lt;/a&gt;
  这个就垃圾了，纯粹骗钱偷窃的货，又不要脸又没种。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E4%B8%AD%E5%9B%BD%E9%99%86%E8%B7%AF%E8%BE%B9%E5%A2%83%E5%8F%A3%E5%B2%B8%E5%88%97%E8%A1%A8&quot;&gt;中国陆路边境口岸列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.withbike.com/article/51-475.html&quot;&gt;杭州及周边骑行路线集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.51766.com/img/jingshansi/&quot;&gt;余杭径山寺&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>计算主域名</title>
   <link href="http://blog.hotoo.me/post/primary-domain.html"/>
   <updated>2011-12-13T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/primary-domain</id>
   <content type="html">&lt;pre&gt;&lt;code&gt;document.domain = document.domain.split(&quot;.&quot;).slice(-2).join(&quot;.&quot;);
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Confluence Wiki for Vi</title>
   <link href="http://blog.hotoo.me/post/confluencewiki.vim.html"/>
   <updated>2011-12-04T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/confluencewiki.vim</id>
   <content type="html">&lt;h1&gt;Confluence Wiki for Vim&lt;/h1&gt;

&lt;p&gt;.ctags / ctags.cnf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--langdef=confluencewiki
--langmap=confluencewiki:.wiki
--regex-confluencewiki=/^h1.[ \t]+(.+)$/\1/h,header/
--regex-confluencewiki=/^h2.[ \t]+(.+)$/. \1/h,header/
--regex-confluencewiki=/^h3.[ \t]+(.+)$/.   \1/h,header/
--regex-confluencewiki=/^h4.[ \t]+(.+)$/.     \1/h,header/
--regex-confluencewiki=/^h5.[ \t]+(.+)$/.       \1/h,header/
--regex-confluencewiki=/^h6.[ \t]+(.+)$/.         \1/h,header/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;.vimrc / _vimrc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let tlist_confluencewiki_settings = 'confluencewiki;h:Headers'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这玩意很好使，同样是 .wiki 后缀，可以同时支持 Vimwiki 和 Confluence Wiki。&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://www.vim.org/scripts/script.php?script_id=1994&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Text Width And Input Scrollleft</title>
   <link href="http://blog.hotoo.me/post/text-width-and-input-scrollLeft.html"/>
   <updated>2011-11-07T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/text-width-and-input-scrollLeft</id>
   <content type="html">&lt;p&gt;%title 文本宽度 及 文本框滚动偏移量(scrollLeft)&lt;/p&gt;

&lt;p&gt;= 文本宽度 及 文本框滚动偏移量(scrollLeft) =
== 背景： ==
最近将多标签输入框进行修改，把原来随光标(caret)移动的自动建议浮动条改为根据当前标签相对左对齐。&lt;/p&gt;

&lt;p&gt;http://1.bp.blogspot.com/_POl6bUDELqY/SRQ_xx7LXCI/AAAAAAAAFSw/syXjnAQ-RLI/s320/tags.jpg&lt;/p&gt;

&lt;p&gt;解决方法很简单，计算当前标签前的文本宽度(将需要计算的文本转义后放入一个各字体样式与目标输入框相同的容器，
如span中，span.offsetWidth即是文本的宽度。注意：文本框中，中文半角空格的宽度和英文半角空格的宽度显示为不同，
虽然这两个空格本质上相同)，浮动条根据该值定位即可。&lt;/p&gt;

&lt;p&gt;== 问题： ==
当标签文本过长，超出文本框宽度时，标签文本会向左滚动，但是此时当前标签前面的文本宽度不变，
定位浮动条时需要减去文本向左滚动的尺寸。&lt;/p&gt;

&lt;p&gt;网页文档对象中，元素都有一个可读写的scrollLeft属性，表示元素内容相当元素容器向左移动的偏移量。&lt;/p&gt;

&lt;p&gt;但是 Firefox 和 Opera 有一些例外，如文本框的 scrollLeft 始终为 0，
[https://developer.mozilla.org/En/DOM/Element.scrollLeft Mozilla] 的描述是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;If the element can't be scrolled (e.g. it has no overflow), scrollLeft is set to 0.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于一些不可滚动(scroll，即没有溢出)的元素，scrollLeft始终为0。而单行文本框
（在Gecko引擎看来）是不可滚动的，即使将样式指定为 &lt;code&gt;overflow:scroll&lt;/code&gt;
（IE会出现水平和垂直滚动条这样的怪胎）。&lt;/p&gt;

&lt;p&gt;虽说单行文本框是不应该出现滚动条这样怪异的形态，但是这不表示它是不可滚动的，
当文本宽度大于文本框宽度时，（为了将光标caret显示在文本框可见区域）文本势必向左滚动，如图：&lt;/p&gt;

&lt;p&gt;http://3.bp.blogspot.com/_POl6bUDELqY/SRQ2rw-JdEI/AAAAAAAAFSo/hY8HxHGQk0Q/s320/scrollLeft.jpg&lt;/p&gt;

&lt;p&gt;== 解决办法： ==
对于文本框不支持scrollLeft的浏览器，一个临时的解决办法是，在文本宽度大于文本框宽度时，浮动条定位在相对文本框后端若干像素（便于输入）的位置，在增量输入时，体验不是太差，但是在光标向前移动使文本向右滚动时，就会出现偏差。&lt;/p&gt;

&lt;p&gt;最终解决办法是期待浏览器能够得到正确的scrollLeft值，或者其他巧妙的计算方法。&lt;/p&gt;

&lt;p&gt; blog:datetime=2010/11/21 13:15:11:tags=Web,Design&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>保持 Chrome 插件的 popup.html 页面的状态</title>
   <link href="http://blog.hotoo.me/post/chrome-extension-keep-popup.html"/>
   <updated>2011-11-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/chrome-extension-keep-popup</id>
   <content type="html">&lt;h1&gt;保持 Chrome 插件的 popup.html 页面的状态&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://groups.google.com/a/chromium.org/group/chromium-extensions/browse_thread/thread/bacd9c513665e70b/581e063180db026c?lnk=gst&amp;amp;q=magic+iframe#581e063180db026c&quot;&gt;Persistent iframe in background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://groups.google.com/a/chromium.org/group/chromium-extensions/browse_thread/thread/0e7fd7fc2bcc7f6d?pli=1&quot;&gt;Keep state of browser action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4847144/how-to-localstorage-properly-with-one-name&quot;&gt;How to localStorage properly with one name?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5988612/do-popup-html-and-background-html-share-the-same-local-storage&quot;&gt;Do popup.html and background.html share the same local storage?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Date.now()</title>
   <link href="http://blog.hotoo.me/post/Date.now.html"/>
   <updated>2011-09-18T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/Date.now</id>
   <content type="html">&lt;h1&gt;Date.now()&lt;/h1&gt;

&lt;p&gt;以前做过一个 JavaScript 性能测试“框架”，也看过其他人做性能比较的时候，基本上
也都是使用 &lt;code&gt;new Date()&lt;/code&gt; 来记时，会“耍点小花样”的同学会使用 &lt;code&gt;+new Date()&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;现在又想做另一种性能监控的方法，便着重考量了下各种记时方案，尽量减少因为
性能监控代码对业务代码的影响。&lt;/p&gt;

&lt;p&gt;下面是循环 100000 次，过程中只有计数器操作，得到的时间(ms)对照表
(&lt;a href=&quot;http://hotoo.me/labs/Date.now.html&quot;&gt;Demo&lt;/a&gt;)。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt; Browser  &lt;/th&gt;
&lt;th&gt; new Date() &lt;/th&gt;
&lt;th&gt; new Date().getTime() &lt;/th&gt;
&lt;th&gt; new Date().valueOf() &lt;/th&gt;
&lt;th&gt; +new Date() &lt;/th&gt;
&lt;th&gt; Date.now() &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; IE8      &lt;/td&gt;
&lt;td&gt; 469        &lt;/td&gt;
&lt;td&gt; 391                  &lt;/td&gt;
&lt;td&gt; 375                  &lt;/td&gt;
&lt;td&gt; 406         &lt;/td&gt;
&lt;td&gt; -          |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Firefox6 &lt;/td&gt;
&lt;td&gt; 266        &lt;/td&gt;
&lt;td&gt; 258                  &lt;/td&gt;
&lt;td&gt; 257                  &lt;/td&gt;
&lt;td&gt; 259         &lt;/td&gt;
&lt;td&gt; 236        |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Chrome13 &lt;/td&gt;
&lt;td&gt; 46         &lt;/td&gt;
&lt;td&gt; 29                   &lt;/td&gt;
&lt;td&gt; 29                   &lt;/td&gt;
&lt;td&gt; 35          &lt;/td&gt;
&lt;td&gt; 20         |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Opera11  &lt;/td&gt;
&lt;td&gt; 246        &lt;/td&gt;
&lt;td&gt; 242                  &lt;/td&gt;
&lt;td&gt; 246                  &lt;/td&gt;
&lt;td&gt; 244         &lt;/td&gt;
&lt;td&gt; 222        |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Safari5  &lt;/td&gt;
&lt;td&gt; 256        &lt;/td&gt;
&lt;td&gt; 232                  &lt;/td&gt;
&lt;td&gt; 239                  &lt;/td&gt;
&lt;td&gt; 255         &lt;/td&gt;
&lt;td&gt; 222        |&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;由此可以对照出，&lt;code&gt;Date.now()&lt;/code&gt; 确实有很明显的性能优势，另外 &lt;code&gt;Date.now()&lt;/code&gt; 返回是
number 类型的数值，并不产生 Date 对象。&lt;/p&gt;

&lt;p&gt;不过目前只有 IE9, Firefox3+, Chrome5+, Opera10.50+, Safari4+ 支持，对于不支持
的浏览器，可以继续使用 &lt;code&gt;new Date().valueOf()&lt;/code&gt; 方法（个人不推荐用 &lt;code&gt;+new Date()&lt;/code&gt;）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// @return {Number}
function now(){
    return (&quot;function&quot;==typeof Date.now) ? Date.now() : new Date().valueOf();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;日期相关&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;new Date()          // now.
new Date(null);     // 1970/01/01 00:00:00(UTC)
new Date(undefined);// IE:NaN; Others:Invalid Date.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;参考阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ff679974(v=vs.94&quot;&gt;Date.now Function (JavaScript) - MSDN&lt;/a&gt;.aspx)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/now&quot;&gt;Data.now() - MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>智能同步滚动条</title>
   <link href="http://blog.hotoo.me/post/smart-sync-scroll.html"/>
   <updated>2011-09-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/smart-sync-scroll</id>
   <content type="html">&lt;h1&gt;智能同步滚动条&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt; Browser &lt;/th&gt;
&lt;th&gt; documentElement.scrollTop &lt;/th&gt;
&lt;th&gt; body.scrollTop &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; IE      &lt;/td&gt;
&lt;td&gt; √                        &lt;/td&gt;
&lt;td&gt; ×             |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Firefox &lt;/td&gt;
&lt;td&gt; √                        &lt;/td&gt;
&lt;td&gt; ×             |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Chrome  &lt;/td&gt;
&lt;td&gt; ×                        &lt;/td&gt;
&lt;td&gt; √             |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Safari  &lt;/td&gt;
&lt;td&gt; ×                        &lt;/td&gt;
&lt;td&gt; √             |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Opera   &lt;/td&gt;
&lt;td&gt; √                        &lt;/td&gt;
&lt;td&gt; ×             |&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;TODO: 其他的 get 方式。尝试智能判断是否设置成功，非通过浏览器性别判断。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>面积分割算法</title>
   <link href="http://blog.hotoo.me/post/area-split.html"/>
   <updated>2011-08-25T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/area-split</id>
   <content type="html">&lt;h1&gt;面积分割算法&lt;/h1&gt;

&lt;p&gt;做用户点击行为分析的展现时，用了一个透明的层覆盖在页面上，然后覆盖一层 canvas
画布，使用稀疏矩阵算法绘制热点分布图。&lt;/p&gt;

&lt;p&gt;预蒙上一层透明蒙版，然后只对需要的区域进行绘制热点图，本是非常不错的方案，我
本机上也一直无问题。但是测试提交了一个 bug，说 IE 下看到点击热点图及轨迹图背后
一片漆黑，我就猜测滤镜问题，最先猜想的是浏览器安全设置导致的滤镜无效，但是又
发现有些类似的图形有没有问题。&lt;/p&gt;

&lt;p&gt;结果发现是某些显卡下，IE 中超大面积的区域滤镜会失效。&lt;/p&gt;

&lt;p&gt;首先想到的解决办法就是针对 IE 进行切割蒙版，由多个蒙版拼接而成，类似于铺地板。&lt;/p&gt;

&lt;p&gt;普通的算法有两种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将整块蒙版区域划分成多个 2000*2000 的蒙版，最后一列和最后一行不足指数，取余
 设置宽高。&lt;/li&gt;
&lt;li&gt;将整块蒙版划分成多个不超过 2000*2000 的等份蒙版。这种算法比较简单，稍微的不足
 之处在于，不能除断的情况，无法等分。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;TODO: 有更灵巧的算法么，当然有了，只是我还不知道而已。&lt;/p&gt;

&lt;h2&gt;后来想到&lt;/h2&gt;

&lt;p&gt;用 canvas 绘制一个透明的区域也未尝不可。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>深入 Iframe 自适应高度</title>
   <link href="http://blog.hotoo.me/post/iframe-highly-adaptive.html"/>
   <updated>2011-08-24T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/iframe-highly-adaptive</id>
   <content type="html">&lt;h1&gt;深入 Iframe 自适应高度&lt;/h1&gt;

&lt;p&gt;DOCTYPE(CSS1Compat): HTML5, HTML4.01 Strict, HTML4.01 Transitional,
XHTML1.0 Frameset, XHTML1.0 Strict, XHTML1.0 Transitional, XHTML1.1.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt; browser &lt;/th&gt;
&lt;th&gt; documentElement &lt;/th&gt;
&lt;th&gt;              &lt;/th&gt;
&lt;th&gt; body         &lt;/th&gt;
&lt;th&gt;              &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;         &lt;/td&gt;
&lt;td&gt; scrollHeight    &lt;/td&gt;
&lt;td&gt; offsetHeight &lt;/td&gt;
&lt;td&gt; scrollHeight &lt;/td&gt;
&lt;td&gt; offsetHeight |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; IE      &lt;/td&gt;
&lt;td&gt; √              &lt;/td&gt;
&lt;td&gt; ×           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; FF      &lt;/td&gt;
&lt;td&gt; √              &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Chrome  &lt;/td&gt;
&lt;td&gt; √              &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Safari  &lt;/td&gt;
&lt;td&gt; √              &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Opera   &lt;/td&gt;
&lt;td&gt; √              &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           |&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;non-doctype(BackCompat): 无 DOCTYPE, IE: DOCTYPE 前有非空白字符（包括注释）。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt; browser    &lt;/th&gt;
&lt;th&gt; documentElement &lt;/th&gt;
&lt;th&gt;              &lt;/th&gt;
&lt;th&gt; body         &lt;/th&gt;
&lt;th&gt;              &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;            &lt;/td&gt;
&lt;td&gt; scrollHeight    &lt;/td&gt;
&lt;td&gt; offsetHeight &lt;/td&gt;
&lt;td&gt; scrollHeight &lt;/td&gt;
&lt;td&gt; offsetHeight |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; IE8        &lt;/td&gt;
&lt;td&gt; ×              &lt;/td&gt;
&lt;td&gt; ×           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; ×           |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; FF5        &lt;/td&gt;
&lt;td&gt; √              &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Chrome13   &lt;/td&gt;
&lt;td&gt; √              &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Safari5    &lt;/td&gt;
&lt;td&gt; √              &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Opera11.50 &lt;/td&gt;
&lt;td&gt; √              &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; √           &lt;/td&gt;
&lt;td&gt; ×           |&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;测试环境：Windows Server 2003.&lt;/p&gt;

&lt;p&gt;综上所述：使用 &lt;code&gt;document.body.scrollHeight&lt;/code&gt; 是最合适的。&lt;/p&gt;

&lt;h1&gt;计算高度的时机&lt;/h1&gt;

&lt;p&gt;父窗口检测子窗口：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iframe[onload=handler]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;本窗口自检测：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dom-ready = handler;
window.onload = handler;
body[onload=handler]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;子窗口获取自身在父窗口的 iframe 元素&lt;/h2&gt;

&lt;p&gt;如果父窗口有名字的话，可以直接通过 frames[name] 直接引用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 求教更恰当的命名。
function getParentFrame(){
  if(parent == window){return null;}
  if(window.name){return parent.frames[window.name];}
  var ifr = parent.document.getElementsByTagName(&quot;iframe&quot;);
  for(var i=0,l=ifr.length; i&amp;lt;l; i++){
    if(window == ifr[i].contentWindow){
      return ifr[i];
    }
  }
  var ifr = parent.document.getElementsByTagName(&quot;frame&quot;);
  for(var i=0,l=ifr.length; i&amp;lt;l; i++){
    if(window == ifr[i].contentWindow){
      return ifr[i];
    }
  }
  return null;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;其他相关&lt;/h2&gt;

&lt;p&gt;上面的 &lt;code&gt;getParentFrame&lt;/code&gt; 通过窗口名字直接取得元素本身，这里要注意的一点，
以前写代码的时候有这样的代码定义：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function(){
  var elem = &quot;elem&quot;,
      name = &quot;name&quot;,
      desc = &quot;desc&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后来要增加一个变量，但是不小心写错标点符号。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  function(){
      var elem = &quot;elem&quot;,
+         id = elem.id;
          name = &quot;name&quot;,
          desc = &quot;desc&quot;;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后 name 就成了全局变量，无意中修改了 &lt;code&gt;window.name&lt;/code&gt; 的值。
所以如果使用 name 作为局部变量的时候，千万要小心，否则执行这段代码之后，
&lt;code&gt;a[target=oldName]&lt;/code&gt; 的链接会因为找不到 &lt;code&gt;frames[oldName]&lt;/code&gt; 而弹出新窗口。&lt;/p&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ued.koubei.com/?p=243&quot;&gt;再谈iframe自适应高度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ued.koubei.com/?p=1217&quot;&gt;三谈Iframe自适应高度&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>获取元素所绑定的事件列表</title>
   <link href="http://blog.hotoo.me/post/eventListenerList.html"/>
   <updated>2011-08-19T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/eventListenerList</id>
   <content type="html">&lt;h1&gt;获取元素所绑定的事件列表&lt;/h1&gt;

&lt;p&gt;技术上有什么办法获得指定 HTMLElement 上有绑定那些 #JavaScript 函数事件，及其处理函数么？&lt;/p&gt;

&lt;p&gt;比如我有一个按钮，想知道他绑定了那些事件？ click 事件的处理函数是什么？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elem.onclick&lt;/code&gt; 这种只能绑定唯一的一个事件处理函数，可以直接取到。&lt;/p&gt;

&lt;p&gt;DOM Level 3 有
[http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010823/events.html#Events-EventListenerList eventListenerList]
接口，但是现在还没有浏览器实现。&lt;/p&gt;

&lt;p&gt;不过可以通过框架包装的方式获取列表。
另外 Google Chrome 浏览器的开发者工具有提供查看元素绑定了哪些事件的特性，
猜测是通过解析页面及其引入的 JavaScript 源码得到的
（据我所知，Firebug 的性能分析就是通过 inject 代码到各个函数中来实现的）。&lt;/p&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://www.w3.org/TR/2001/WD-DOM-Level-3-Events-20010823/events.html#Events-EventListenerList&lt;/li&gt;
&lt;li&gt;http://www.quirksmode.org/js/events_advanced.html&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>宏伟的 Vimlike.js 计划</title>
   <link href="http://blog.hotoo.me/post/vimlike-project.html"/>
   <updated>2011-08-16T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vimlike-project</id>
   <content type="html">&lt;h1&gt;宏伟的 Vimlike.js 计划&lt;/h1&gt;

&lt;p&gt;一直在想：网站本身提供的快捷键支持（如 Gmail, GReader, Gplus, Twitter），
和浏览器插件提供的通用快捷键支持（Vimperator, Vimium, ...），两者如何共存，
相互之间能够相安无事，甚至能够相辅相成？&lt;/p&gt;

&lt;p&gt;目前想到两种方案：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;白名单机制。像 AutoProxy 一样，针对不同的网站/网址，屏蔽某些键映射，
 使用官方自有映射支持。不过这个要维护这份列表也是一件蛋疼的事。&lt;/li&gt;
&lt;li&gt;网站根据统一约定的快捷键定义接口实现特有功能，非特有的则默认使用共有实现。
 另外也提供扩展机制，让第三方插件也可以根据这个接口为特定的网站/页面实现特定功能。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;个人觉得第 2 中方案比较好，但这是一项宏大的项目，要各个网站遵循这个接口标准来实现，
不是一件易事。准备先把这个做到 [https://github.com/hotoo/vimlike.js Vimlike.js] 项目里，
然后请一些 Vim 爱好者的个人博客一起来参与实践。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Abort HTTP 请求</title>
   <link href="http://blog.hotoo.me/post/abort-http-request.html"/>
   <updated>2011-07-22T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/abort-http-request</id>
   <content type="html">&lt;h1&gt;Abort HTTP 请求&lt;/h1&gt;

&lt;p&gt;英文不好，请教个问题：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;abort&lt;/em&gt; 这个单词，好像有丢弃，中断之类的意思。&lt;/p&gt;

&lt;p&gt;AJAX 发一个请求，然后 abort 掉，那么这个请求只是客户端一厢情愿的丢弃，
服务端仍然可以接收到并处理请求呢；还是直接中断这个请求，
导致服务器端也会丢弃/忽略这个请求？&lt;/p&gt;

&lt;p&gt;如果翻译，应该翻成 &lt;em&gt;丢弃 HTTP 请求&lt;/em&gt; 还是 &lt;em&gt;中断 HTTP 请求&lt;/em&gt; ？&lt;/p&gt;

&lt;p&gt;-- Update --&lt;/p&gt;

&lt;p&gt;搜索了一番，跟想象中的一致，只是客户端的一厢情愿，丢弃服务端的返回而已，
并不是服务端丢弃处理请求。&lt;/p&gt;

&lt;p&gt;所以应该翻作： &lt;em&gt;丢弃&lt;/em&gt; 。&lt;/p&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://weblogs.asp.net/dwahlin/archive/2007/07/17/aborting-ajax-requests.aspx&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/446594/kill-ajax-requests-using-javascript-using-jquery&lt;/li&gt;
&lt;li&gt;http://topic.csdn.net/u/20090206/14/c43249df-29a9-4167-9dc3-e3a8f738248d.html&lt;/li&gt;
&lt;li&gt;http://book.51cto.com/art/200810/91493.htm&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/108314985261981078822/posts/6PF4sMpegXP&quot;&gt;@Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>日期时间型控件的体验</title>
   <link href="http://blog.hotoo.me/post/datatime-picker.html"/>
   <updated>2011-07-20T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/datatime-picker</id>
   <content type="html">&lt;h1&gt;日期时间型控件的体验&lt;/h1&gt;

&lt;p&gt;目前支持精确到时分秒输入/选择的日历控件，我总觉得用起来很不爽，
却又想不出更舒适的交互方式。&lt;/p&gt;

&lt;p&gt;大家有觉得哪种选择时间（非日期）的方式比较舒服一点的控件么，
或者描述一下自己期望的交互过程也好。&lt;/p&gt;

&lt;p&gt;----- Update ----&lt;/p&gt;

&lt;p&gt;Note: 我说的是 时间 (时分秒，非 日期 ，年月日 )选择/输入过程，
日期型一般点一下或少量几下就可以完成，基本上是比较自然流畅的一个过程；
但是输入/选择时间的却是非常不流畅的一个过程。&lt;/p&gt;

&lt;p&gt;我只是想体验，或者尝试实现更流畅的时间输入过程，
不是想让推荐某个库的某个控件（这个控件的时间输入过程非常流畅的例外），谢谢。&lt;/p&gt;

&lt;p&gt;---- Comment 1 ----&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hao zi&lt;/em&gt; - 额，我没看错，是时分秒，YUI的链接干扰理解了，
最喜欢的就是能快捷键输入时间了，普通用户应该还是更青睐鼠标。
好多地方用的6:00 am 6:30am……时间下拉单的形式我觉得不好用，
有的甚至还有6:15am……Google calender一方面可以拉动调整时间段，也不需要精确到秒，
所以用着还好。时间不是10进制，实际生活中表盘上也还需要三根针才能显示，
设计特别了用户也不好理解，我的展望如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.min.us/ie1Bum.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;时分使用一个滑动框，秒使用一个滑动框，
时分框移动到PM仍利用AM刻度但背景色改变。
秒框稍有不同，可只显示部分刻录来避免太密集，滑块拉动到左右边缘时刻录跟着移动。&lt;/p&gt;

&lt;p&gt;---- Comment 2 ----&lt;/p&gt;

&lt;p&gt;&lt;em&gt;萧星星&lt;/em&gt; - 年月日和时分秒的处理 ： 支持键盘输入和方向增减，
支持鼠标滚轮和点击的增减 ； 滚轮的会是最流畅的， 不过用户需要一个适应过程～&lt;/p&gt;

&lt;p&gt;---- Comment 3 ----&lt;/p&gt;

&lt;p&gt;&lt;em&gt;黄川&lt;/em&gt; - 用安卓调时间的UI交互，然后鼠标放在上面，用滚轮，我觉得这种方式不错&lt;/p&gt;

&lt;p&gt;---- Comment 4 ----&lt;/p&gt;

&lt;p&gt;&lt;em&gt;闲耘&lt;/em&gt; - 鼠标滚轮，或者键盘方向键本身是不错的，我很认同。
我主要不满意的地方在于：如果 时间 随同日期的弹出层一起，
同时需要选择日期和时间时，基本上只能增加一个确定按钮来辅助实现。
现在想想，年历，月历，日历还是和时间部分独立分开的比较合适。&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/108314985261981078822/posts/WE37n8PSYQD&quot;&gt;@Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>鼠标事件研究</title>
   <link href="http://blog.hotoo.me/post/mouse-event.html"/>
   <updated>2011-07-16T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/mouse-event</id>
   <content type="html">&lt;h1&gt;Mouse Event&lt;/h1&gt;

&lt;p&gt;| Event       | type   | IE       | &gt;         | FF     | &gt;     | Chrome   | &gt;     | Safari   | &gt;     | Opera    | &gt;     |
| \/          | \/     | button   | which     | button | which | button   | which | button   | which | button   | which |
|-------------|--------|----------|-----------|--------|-------|----------|-------|----------|-------|----------|-------|
| onmousedown | left   | 1        | undefined | 0      | 1     | 0        | 1     | 0        | 1     | 0        | 1     |
| \/          | middle | 4        | undefined | 1      | 2     | 1        | 2     | 1        | 2     | 1        | 2     |
| \/          | right  | 2        | undefined | 2      | 3     | 2        | 3     | 2        | 3     | 2        | 3     |
| onmouseup   | left   | 1        | undefined | 0      | 1     | 0        | 1     | 0        | 1     | 0        | 1     |
| \/          | middle | 4        | undefined | 1      | 2     | 1        | 2     | 1        | 2     | no event | &gt;     |
| \/          | right  | 2        | undefined | 2      | 3     | 2        | 3     | 2        | 3     | 2        | 3     |
| onclick     | left   | 0        | undefined | 0      | 1     | 0        | 1     | 0        | 1     | 0        | 1     |
| \/          | middle | 0        | undefined | 1      | 2     | 1        | 2     | 1        | 2     | no event | &gt;     |
| \/          | right  | no event | &gt;         | 2      | 3     | no event | &gt;     | no event | &gt;     | no event | &gt;     |&lt;/p&gt;

&lt;p&gt;Windows 2003 Server.&lt;br /&gt;
IE8, FF5, Chrome12, Safari5, Opera11.&lt;/p&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.onmousedown&lt;/code&gt; === &lt;code&gt;document.addEventListener&lt;/code&gt; === &lt;code&gt;document.attachEvent(&quot;onmousedown&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.onmouseup&lt;/code&gt; === &lt;code&gt;document.addEventListener(&quot;mouseup&quot;)&lt;/code&gt; == &lt;code&gt;document.attachEvent(&quot;onmouseup&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;document.onclick&lt;/code&gt; === &lt;code&gt;document.addEventListener(&quot;click&quot;)&lt;/code&gt; == &lt;code&gt;document.attachEvent(&quot;onclick&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;  document.onmousedown = function(evt){
      evt = window.event || evt;
      var mouse = {
          left:   evt.which ? evt.which==1 : evt.button==1,
          middle: evt.which ? evt.which==2 : evt.button==4,
          right:  evt.which ? evt.which==3 : evt.button==2
      };
  };&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.quirksmode.org/js/events_properties.html&quot;&gt;Event properties - ppk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hotoo.me/labs/mouse-event.html&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>吐槽</title>
   <link href="http://blog.hotoo.me/post/tucao.html"/>
   <updated>2011-07-15T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/tucao</id>
   <content type="html">&lt;h1&gt;吐槽&lt;/h1&gt;

&lt;p&gt;上次监控系统计算得分有些非常离谱的结果，然后我就质疑后端的算法，
结果师傅兼小组长突然莫名其妙的说我“怎么老是怀疑别人，我最看不惯这种人了，
我们是一个开发团队，巴拉巴拉巴拉，，，”。&lt;/p&gt;

&lt;p&gt;当时我特无语~~
只很愤怒的说了一句，“这个明显有问题，为什么还不能质疑！”&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;第一，我只是对事不对人的质疑算法，并没有怀疑某个人。&lt;/li&gt;
&lt;li&gt;第二，其实组长本身貌似对我也很不放心，老怀疑我这个，质疑我那个，
 有一些简洁清晰到不可能有问题的代码，还是要我去做各种检验。
 我一直都没有什么二话去执行的，直到他连续 N 遍说到我烦为止。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;自己老怀疑他人，还说最讨厌其他人的怀疑态度的，其实也没什么了，
都这样，人性的双重性格而已。&lt;/p&gt;

&lt;p&gt;之前有几次组长来质疑我同一个问题，今天又来了，说我检测到的脚本错误，
前端开发很多都不承认，说他们不能重现，认为不准。说我虽然发现了他们的问题，
但是他们不愿意、或者没有办法去改，问我怎么办？！这是什么逻辑。&lt;/p&gt;

&lt;p&gt;有不能解决的问题也不多搜索，也不群里问，说我的不准也没见来找我辩驳，
一口咬定我的不准，不承认我的工作，这算什么。&lt;/p&gt;

&lt;p&gt;然后说让我找一个报的次数最多的错误实例，说让我重现，那个错误是“错误的数量词”，
我去，这个我在常见脚本错误文档里写了那么多都白写的么！&lt;/p&gt;

&lt;p&gt;这是一个表单验证函数中使用 new RegExp(str) 导致的错误，str 是来自用户的输入，
却没有经过转义处理，代码级可以肉眼看出来的错误，说让我那边表单实际试试嘛，
那个表单要邮箱验证，还要好几步才能进去呢。我蛋疼么。&lt;/p&gt;

&lt;p&gt;给了个最简单的 new RegExp(&quot;+&quot;) 还是说让我去表单上试。说“不拿出实际例子出来，
没有资格说别人有问题！”&lt;/p&gt;

&lt;p&gt;究竟要多无语，才能说明我无语啊~~~&lt;/p&gt;

&lt;p&gt;怒道：有些问题看代码就有明显的问题，根本就无需睁着眼睛瞎测试。
昨天看到热点分布那里使用 evt.clientY 这样的代码，还需要去试一下么，
难道还需要我去告诉开发你应该滚动下浏览器的滚动条来重现？&lt;/p&gt;

&lt;p&gt;终于迎来了艰难的沉默。&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/108314985261981078822/posts/QP8j6KY8Ey9&quot;&gt;@Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>豆瓣电台，我忍你很久了！</title>
   <link href="http://blog.hotoo.me/post/douban.fm.html"/>
   <updated>2011-07-13T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/douban.fm</id>
   <content type="html">&lt;h1&gt;豆瓣电台，我忍你很久了！&lt;/h1&gt;

&lt;p&gt;豆瓣电台做的太烂，估计算法是一个有怀旧情节的家伙设计的。&lt;/p&gt;

&lt;p&gt;听的越多， +1 的歌曲越多，重复播放的可能性越高，
同一个音乐人的歌曲被重放的可能性也越高，导致每天都在听一些听过 N 遍的歌曲。&lt;/p&gt;

&lt;p&gt;我 +1 不过是希望算法通过数据能再了解我一点，用来向我推荐其他类似风格的音乐人/乐曲。&lt;/p&gt;

&lt;p&gt;如果只是从我已经 +1 的歌曲中重复播放，我要一个电台干什么？！
我的播放器就已经做的很好啊，稍笨一点，播放器或音乐文件属性中设置标星等级；
再笨一点，做一个播放列表，把喜欢的音乐加进去；更笨一点，单曲循环播放好了。&lt;/p&gt;

&lt;p&gt;登录了在豆瓣电台标星/删除/下一曲，只因为手贱吗？豆瓣，我忍你很久了。&lt;/p&gt;

&lt;p&gt;---- Comment ----&lt;/p&gt;

&lt;p&gt;我情愿去听虽然有主持人在啰嗦或煽情，但重复少得多也不那么乏味的国内无线电台。&lt;/p&gt;

&lt;p&gt;另外推荐一个国外无主持人的网络电台，有很多风格的频道（非豆瓣分类方式），
这个是我最喜欢的 NewAge 风格的，请欣赏 http://www.sky.fm/play/newage&lt;/p&gt;

&lt;p&gt;前段时间有被墙或网络很不好才勉强听的豆瓣，今天发现又回来了，谢谢国家。&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/108314985261981078822/posts/RfNu31TLpmL&quot;&gt;@Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>非递归遍历 DOM 结构</title>
   <link href="http://blog.hotoo.me/post/non-recursion-walk-the-dom.html"/>
   <updated>2011-07-10T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/non-recursion-walk-the-dom</id>
   <content type="html">&lt;h1&gt;非递归遍历 DOM 结构&lt;/h1&gt;

&lt;p&gt;上次在Google+ 上说 &lt;a href=&quot;https://plus.google.com/108314985261981078822/posts/ithY3w7tEWR&quot;&gt;实现了非递归遍历 DOM 结构&lt;/a&gt;，
有朋友想让分享，我当然很高兴，但是很遗憾这本身没有什么值得分享的，大致如下，
给大家随便看一下：&lt;/p&gt;

&lt;p&gt;常见的递归方式遍历方式，下面是 Douglas Crockford 写的递归实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function walkTheDOM (node, func) {
    func(node);
    node = node.firstChild;
    while (node) {
        walkTheDOM(node, func);
        node = node.nextSibling;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后有人自称写出了更快的遍历 DOM 方式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var elems = document.getElementsByTagName(&quot;*&quot;);
for(var i=0,l=elems.length; i&amp;lt;l; i++){
    handler(elems[i]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最初找到有详细对照的文章地址没有找到，这个是
&lt;a href=&quot;http://geekswithblogs.net/mparsons/archive/2006/03/02/71175.aspx&quot;&gt;类似的一篇&lt;/a&gt;，
而且也是非递归式的。&lt;/p&gt;

&lt;p&gt;确实是很快的，但只是快还是不够的，这个实现有很多弊端：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;注释等元素未必会被遍历。&lt;/li&gt;
&lt;li&gt;树形数据结构被整理成了平板结构，无法实现遍历过程的 in/out 处理。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;然后今天的主角隆重登场：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function walk(node, enter, leave){
    var tmp, n=node;
    label:
    do{
        enter(n);
        if(tmp = firstNode(node)){ // firstChild(HTMLElement)
            n = tmp;
        }else if(tmp = nextNode(n)){ // nextSibling(HTMLElement)
            n = tmp;
        }else if(n.parentNode){
            do{
                n = n.parentNode;
                leave(n);
                if(n == node){break label;}
                if(tmp = nextNode(n)){
                    n = tmp;
                    continue label;
                }
            }while(node);
        }else{
            break;
        }
    }while(n &amp;amp;&amp;amp; n!=node);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面只是一个精简版，实际过程中还需要考虑节点类型的问题，一般会过滤
1:HTMLElement, 8:Comment, 9:Document Type, 10:DocType 之外的节点。&lt;/p&gt;

&lt;p&gt;其实也不过如此嘛，飘过~~&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.quirksmode.org/dom/intro.html&quot;&gt;W3C DOM -Introduction - ppk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Vimlike.js</title>
   <link href="http://blog.hotoo.me/post/vimlike.js.html"/>
   <updated>2011-07-08T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vimlike.js</id>
   <content type="html">&lt;h1&gt;Vimlike.js&lt;/h1&gt;

&lt;p&gt;很久之前做了一个 &lt;a href=&quot;https://github.com/hotoo/Vimlide&quot;&gt;Vimlike 的 HTML(5) Slide&lt;/a&gt;，
很小的一个玩意，但是很好玩。里面支持 normal, search, command, help 等模式，
最初是每个单独自己 Copy 的一份，然后精简成各个模式自己需要的键映射。&lt;/p&gt;

&lt;p&gt;一直想把这个 Vimlike 的键映射部分抽象提取处理，前段时间 Google+ 出来的时候，
看到 mattn 做的一个用来
&lt;a href=&quot;https://github.com/mattn/GooglePlusCommander&quot;&gt;支持 +, c, s ... 等快捷键的 user-script&lt;/a&gt;，
我就立即提议实现 gg, G, gh, gp, gP 这些键盘映射，并把这个 Vimlike 键映射抽取好了。&lt;/p&gt;

&lt;p&gt;抽取的过程基本还顺利，只遇到一点点小问题，另外还做了些优化。&lt;/p&gt;

&lt;p&gt;之前为了避免无映射的键 push 到 history 中造成无法正确触发键映射的问题
（比如只映射了 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; 键，其他的 abc 之类的键会 push 到 histroy 中，
尝试对应的映射是找不到的，后续的键就无法触发了），采用优先触发当前键事件的方式。&lt;/p&gt;

&lt;p&gt;仔细想了想，优先考虑当前 key 是不合理的，比如同时映射了 j 和 gj，
由于优先原则的干扰，造成 gj 永远都不会被触发。&lt;/p&gt;

&lt;p&gt;接着以为针对 &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; 等键特殊处理，遇到这种键直接触发，
不放到 history 中就差不多可以了。&lt;/p&gt;

&lt;p&gt;继续深入思考，仍然不够，其实完整的 Vim-like 如果要支持 mark, g+, z+, +,
等一系列的扩展支持，都需要有内置支持，否则就是需要类似
map(&quot;m[a-zA-Z0-9]&quot;, function(){}) 这样的模糊映射支持了。&lt;/p&gt;

&lt;p&gt;实现增强版的内置扩展键支持，还是实现模糊映射支持，这是个问题？&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hotoo/Vimlike.js&quot;&gt;Vimlike.js@github&lt;/a&gt;,
  &lt;a href=&quot;http://hotoo.me/Vimlike.js/Vimlike.html&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>说说渐进加载</title>
   <link href="http://blog.hotoo.me/post/about-lazy-load.html"/>
   <updated>2011-07-08T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/about-lazy-load</id>
   <content type="html">&lt;h1&gt;说说渐进加载&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;google+, quora, twitter... 这些网站都使用渐进加载数据的方式，
类似的还有淘宝图片的懒加载，都是等用户真正滚到最后之后才开始去加载，
提前一些预加载体验不是更好么。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;到最后一页了还是有“更多”，直到点击最后一个更多没加载到数据才告诉用户
没更多数据了，这不是蛋疼么？&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;估计是基于算法上的考虑，比如每页 10 条：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dataList = select top 10 * from table where id &amp;gt; 10 * page;
for(var i=0,l=dataList.length; i&amp;lt;l; i++){}
hasMore = select top 1 * from table where id &amp;gt; 10*(page+1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样要查询 2 次。&lt;/p&gt;

&lt;p&gt;不过只查数据库一次也是可以的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;datas = select top 11 * from table where id &amp;gt; 10*page;
for(var i=0,l=min(data.length, 10); i&amp;lt;l; i++){}
hasMore = datas.length == 11;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;好久不写后端程序，不知道他们这么做是否有基于其他的考虑？&lt;/p&gt;

&lt;p&gt;p.s. Google+ 个笨蛋居然剔除行首的有效空白，而不剔除行尾的无效空白。。。&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/108314985261981078822/posts/WrYSxHJnDXW&quot;&gt;@Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>别用 try/catch</title>
   <link href="http://blog.hotoo.me/post/donot-use-try-catch.html"/>
   <updated>2011-07-05T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/donot-use-try-catch</id>
   <content type="html">&lt;h1&gt;别用 try/catch&lt;/h1&gt;

&lt;p&gt;实践证明：#JavaScript 用 try/catch 来忽略未定义的函数调用异常是不明智的，
效能太差了，尤其在 FF 里，还是 typeof 快点。&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://hotoo.me/labs/fast-check-function.html&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>说说支付宝爱心捐助</title>
   <link href="http://blog.hotoo.me/post/love.alipay.com.html"/>
   <updated>2011-07-04T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/love.alipay.com</id>
   <content type="html">&lt;h1&gt;说说支付宝爱心捐助&lt;/h1&gt;

&lt;p&gt;以前我还持续捐助，但是我觉得&lt;a href=&quot;https://love.alipay.com&quot;&gt;支付宝爱心捐助&lt;/a&gt;
我是越来越没法持续捐助下去了，那该死的 KPI 要求项目达到 XX 数量，
狗日的又没有质量要求。&lt;/p&gt;

&lt;p&gt;每天救救这个，帮帮那个，都是一些实体的捐助对象，看这很痛心，但排成一排来展览，
看着就有点恶心了，让人看不下去，吃不下饭。&lt;/p&gt;

&lt;p&gt;我知道国内 NGO 很难，靠谱的也不多。但是我还是希望相对靠谱一点的机构
（下面都简称慈善机构，支付宝本身不是也有爱心小组么，虽然好像都是业余的）
来做这些实体的捐助过程，安排捐助计划，定时公开捐助报表，
普通捐助人只需要持续对这个机构捐助就好了。&lt;/p&gt;

&lt;p&gt;像对一个人、或一个家庭这么小的单位，慈善机构自己可以自己列为项目，计划支出，
但捐助人真的无需去直接接触。你说我捐助了某个病人A，不去捐助另一个病人B吗？
世界上困难的人这么多，每个捐助人都需要一个个去直接指定捐助么？
这种事情慈善机构能有一点自己的计划么，该不该捐助，该如何捐助，
你慈善机构没有计划，你还让捐助人信任你什么？！&lt;/p&gt;

&lt;p&gt;而对于重大集体性灾难，可以在爱心捐助平台上展示一个项目，让更多的人知晓，
传播给更多的人来支持捐助，而且一般这种项目，捐助人是很希望可以指定捐助的，
比如上次日本地震+海啸+核污染，中国大陆居然没有可靠方便的捐助方式，简直是匪夷所思。&lt;/p&gt;

&lt;p&gt;最后给大家献给一曲《&lt;a href=&quot;http://www.tudou.com/programs/view/sx7rLsjqfJY/&quot;&gt;无地自容&lt;/a&gt;》&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;策划：雅沫&amp;lt;br /&amp;gt;
导演：莞儿&amp;lt;br /&amp;gt;
曲：李丹&amp;lt;br /&amp;gt;
词：刘咚咚&amp;lt;br /&amp;gt;
唱：@土著Walker&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
美眉她姓郭，爱炫自我；&amp;lt;br /&amp;gt;
各种名包，各种好车；&amp;lt;br /&amp;gt;
微博经认证，名头热火；&amp;lt;br /&amp;gt;
红十字会商业老总；&amp;lt;br /&amp;gt;
是否涉嫌炒作，你最清楚；&amp;lt;br /&amp;gt;
妹子到底想要揭露什么？&amp;lt;br /&amp;gt;
何必东藏西躲，又何必删贴；&amp;lt;br /&amp;gt;
迟早有一天你会面对我；&amp;lt;br /&amp;gt;
天灾人祸中，常看到你；&amp;lt;br /&amp;gt;
宣扬博爱，弘扬道义；&amp;lt;br /&amp;gt;
捐款全给你，进出无明细；&amp;lt;br /&amp;gt;
庞大帐目谁在审计；&amp;lt;br /&amp;gt;
总在自说自话，难自圆其说；&amp;lt;br /&amp;gt;
百姓问你到底做了什么？&amp;lt;br /&amp;gt;
不要再装沉默，你实话实说；&amp;lt;br /&amp;gt;
我们的爱心多少被挥霍；&amp;lt;br /&amp;gt;
商红会无车，清贫如洗；&amp;lt;br /&amp;gt;
没有电脑没有手续；&amp;lt;br /&amp;gt;
成立十几年，从不会登记；&amp;lt;br /&amp;gt;
中红博爱惹人注意；&amp;lt;br /&amp;gt;
总在自说自话，难自圆其说；&amp;lt;br /&amp;gt;
百姓问你到底做了什么？&amp;lt;br /&amp;gt;
不要再装沉默，你实话实说；&amp;lt;br /&amp;gt;
我们的爱心多少被挥霍；&amp;lt;br /&amp;gt;
不再相信，相信什么公益；&amp;lt;br /&amp;gt;
除非捐款公布明细；&amp;lt;br /&amp;gt;
这场危机，怎样才能过去；&amp;lt;br /&amp;gt;
不必追究是谁的错；&amp;lt;br /&amp;gt;
我曾为你献血，也曾替你开脱；&amp;lt;br /&amp;gt;
如今献唱一曲，让你无地自容！
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/108314985261981078822/posts/8gAama93tnW&quot;&gt;@Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>“盗梦空间”</title>
   <link href="http://blog.hotoo.me/post/dream-the-thief.html"/>
   <updated>2011-06-30T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/dream-the-thief</id>
   <content type="html">&lt;h1&gt;“盗梦空间”&lt;/h1&gt;

&lt;p&gt;前段时间公司发生了好几次盗窃案，虽然很快破案了，但总还是感觉不太安全。
前几天有同事跟我说不要把自己本本放在公司，但是我却不以为然，公司座位那么多，
而且柜子还锁着，偷到我的位置上的概率没那么高吧！&lt;/p&gt;

&lt;p&gt;昨晚做梦，说我心爱的小黑晚上盗了，我悲痛欲绝，无法相信这是真的。&lt;/p&gt;

&lt;p&gt;仿佛知道是在夜里做梦似的，或者是因为盗窃案发生在夜里的缘故，我梦里深夜赶到公司，
看到柜子被撬开了，翻乱一地。保安说摄像头有拍下整个过程，然后带我们去监视室。&lt;/p&gt;

&lt;p&gt;我们进的应该不是监视室，那种房间我去过，肯定不是。而且我也没有看到录像，
梦里乱七八糟的，盗贼的脸留下了悬念。另外虽然有录像，但是破案又是另外一回事了。&lt;/p&gt;

&lt;p&gt;第二天上班，没有电脑，然后师傅天蓬急了，给相关人员（ IT ?）
说好并让我去申请一天小台，但居然又是去的监视室的那个房间。
IT 给我一台谁谁用过的小白，然后我就出来了。&lt;/p&gt;

&lt;p&gt;过了一会儿，我突然想起拿小白的时候仿佛瞟到我的小黑在那监视室的一张很乱的桌子上
放着，我赶紧过去看，果然，是放在那里，我心爱的小黑。&lt;/p&gt;

&lt;p&gt;梦里似乎有一个很合理的解释为什么我的小黑在这个房间里，仿佛是已经破案了，
“赃物”都放在这里。呃，是这么回事么？可惜我已经记不清了。&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/108314985261981078822/posts/9LLgAcSrpbs&quot;&gt;@Google+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>丢弃图片的 HTTP 请求</title>
   <link href="http://blog.hotoo.me/post/abort-image-request.html"/>
   <updated>2011-06-23T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/abort-image-request</id>
   <content type="html">&lt;h1&gt;丢弃图片的 HTTP 请求&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt; OS       &lt;/th&gt;
&lt;th&gt; Browser        &lt;/th&gt;
&lt;th&gt; &quot;&quot;    &lt;/th&gt;
&lt;th&gt; null  &lt;/th&gt;
&lt;th&gt; remove &lt;/th&gt;
&lt;th&gt; delete &lt;/th&gt;
&lt;th&gt; stop &lt;/th&gt;
&lt;th&gt; StopImage &lt;/th&gt;
&lt;th&gt; Stop &lt;/th&gt;
&lt;th&gt; Button &lt;/th&gt;
&lt;th&gt; Timeout    &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Windows  &lt;/td&gt;
&lt;td&gt; IE6,7,8        &lt;/td&gt;
&lt;td&gt; √(e) &lt;/td&gt;
&lt;td&gt; √(e) &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; 21s (e)    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; \/       &lt;/td&gt;
&lt;td&gt; FF4,5          &lt;/td&gt;
&lt;td&gt; II    &lt;/td&gt;
&lt;td&gt; II    &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; 21s (e)    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; \/       &lt;/td&gt;
&lt;td&gt; Chrome12       &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; 21s (e)    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; \/       &lt;/td&gt;
&lt;td&gt; Safari4,5      &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; 21s (e)    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; \/       &lt;/td&gt;
&lt;td&gt; Opera9         &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; √(e) &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; 47s (e)    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; \/       &lt;/td&gt;
&lt;td&gt; Opera11        &lt;/td&gt;
&lt;td&gt; II    &lt;/td&gt;
&lt;td&gt; √(e) &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; 47s (e)    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Mac OS X &lt;/td&gt;
&lt;td&gt; Safari5        &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; 1.2m (e)   |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; \/       &lt;/td&gt;
&lt;td&gt; Chrome12       &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; 1.2m (e)   |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; \/       &lt;/td&gt;
&lt;td&gt; FF4,5          &lt;/td&gt;
&lt;td&gt; II    &lt;/td&gt;
&lt;td&gt; II    &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; 1m'15s (e) |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Ubuntu   &lt;/td&gt;
&lt;td&gt; FF4,5          &lt;/td&gt;
&lt;td&gt; II    &lt;/td&gt;
&lt;td&gt; II    &lt;/td&gt;
&lt;td&gt; II     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt;        &lt;/td&gt;
&lt;td&gt; 3m'9s (e)  |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; \/       &lt;/td&gt;
&lt;td&gt; Chrom(e/ium)12 &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×    &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; II   &lt;/td&gt;
&lt;td&gt; ×        &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt;        &lt;/td&gt;
&lt;td&gt; 3.2m (e)   |&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;ul&gt;
&lt;li&gt;Windows XP, Server 2003, 7.&lt;/li&gt;
&lt;li&gt;Mac OS X 10.6.7&lt;/li&gt;
&lt;li&gt;Ubuntu 11.04&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;em&gt;标题注解：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&quot;&quot;:: &lt;code&gt;img.src = &quot;&quot;&lt;/code&gt;
null:: &lt;code&gt;img.src = null&lt;/code&gt;
revmove:: &lt;code&gt;img.removeAttribute(&quot;src&quot;)&lt;/code&gt;
delete:: &lt;code&gt;delete img[&quot;src&quot;]&lt;/code&gt;
stop:: &lt;code&gt;window.stop()&lt;/code&gt;
StopImage:: &lt;code&gt;document.execCommand(&quot;StopImage&quot;)&lt;/code&gt;
Stop:: &lt;code&gt;document.execCommand(&quot;Stop&quot;)&lt;/code&gt;
Button:: Browser Stop Button.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;图标注解：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;√:: 能够 Abort 图片请求，并回调 (e)onerror/(a)onabort/(l)onload 函数。
II:: 能够 Abort 图片请求，但不触发任何事件进行回调。
≈:: 部分版本支持。如 Stop/StopImage 在 .NET Framework 3.0 中取消了支持。
×:: 不能 Abort 图片请求，或不支持该方法。&lt;/p&gt;

&lt;h2&gt;事件回调&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var img = new Image();
img.onload = function(){out.innerHTML += &quot;loaded.&quot;;};
img.onabort = function(){out.innerHTML += &quot;aborted.&quot;;};
img.onerror = function(){out.innerHTML += &quot;errored.&quot;;};
window.setTimeout(function(){
    out.innerHTML += &quot;before.&quot;;
    // abort.
    img.src = null;
    out.innerHTML += &quot;after.&quot; + img.complete;
}, 2000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;p&gt;IE:: before.errored.after.
Opera:: before.after.errored.
FF:: before.after.
Chrome:: before.after.
Safari:: before.after.&lt;/p&gt;

&lt;h2&gt;TODO:丢弃 jsonp 请求？&lt;/h2&gt;

&lt;p&gt;为什么不是 script/link?&lt;/p&gt;

&lt;p&gt;使用 document.createElement(&quot;script&quot;) 创建元素并设置 src 属性，
appendChild 到 DOM 中会去请求指定资源，可以到底向日志服务器发送数据的要求。&lt;/p&gt;

&lt;p&gt;但是使用这种方式有一下几点弊端：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建脚本带来的危险性。&lt;/li&gt;
&lt;li&gt;会向 DOM 中附加元素，影响 DOMLint 校验。&lt;/li&gt;
&lt;li&gt;无法 abort，无论设置 &lt;code&gt;script = null;&lt;/code&gt;, &lt;code&gt;script.src=&quot;&quot;;&lt;/code&gt;, &lt;code&gt;script.src=null;&lt;/code&gt;,
 &lt;code&gt;script.removeAttribute(&quot;src&quot;);&lt;/code&gt;, &lt;code&gt;document.body.removeChild(script);&lt;/code&gt;
 都无法实现 abort.&lt;/li&gt;
&lt;li&gt;引入资源不触发 onload/onerror/onabort 事件，除非使用 jsonp 的方式，
 对元素本身无法得到回调。&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;http://stackoverflow.com/questions/930237/javascript-cancel-stop-image-requests&lt;/li&gt;
&lt;li&gt;http://www.sysopt.com/forum/archive/index.php/t-177147.html&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/1671717/javascript-image-onabort-event-not-firing-in-firefox-chrome&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/4506160/abort-active-image-requests&lt;/li&gt;
&lt;li&gt;http://www.devguru.com/technologies/ecmascript/quickref/image.html&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/930237/javascript-cancel-stop-image-requests&quot;&gt;Javascript: Cancel/Stop Image Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/support/forum/p/Chrome/thread?tid=4bf113154d53d101&amp;amp;hl=en&quot;&gt;Can't you stop images from loading?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.stop()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;http://stackoverflow.com/questions/930237/javascript-cancel-stop-image-requests&lt;/li&gt;
&lt;li&gt;http://stackoverflow.com/questions/3146200/stop-loading-of-images-on-a-hashchange-event-via-javascript-or-jquery&lt;/li&gt;
&lt;li&gt;https://developer.mozilla.org/en/DOM/window.stop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execCommand&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms536419%28v=vs.85%29.aspx&quot;&gt;execCommand Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;http://msdn.microsoft.com/en-us/library/ms536419%28v=vs.85%29.aspx&lt;/li&gt;
&lt;li&gt;http://msdn.microsoft.com/en-us/library/ms533049%28v=vs.85%29.aspx&lt;/li&gt;
&lt;li&gt;https://developer.mozilla.org/En/Document.execCommand&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.xiahaixia.com/2010/11/19/ie6%E4%B8%8B%E9%93%BE%E6%8E%A5onclick%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E4%B8%AD%E7%9A%84%E8%AF%B7%E6%B1%82%E8%A2%ABaborted/&quot;&gt;IE6下链接ONCLICK事件处理中的请求被ABORTED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/zhyt1985/archive/2009/05/27/1490755.html&quot;&gt;What does (Aborted) mean in HttpWatch?&lt;/a&gt;
  &lt;a href=&quot;http://www.sanotes.net/html/y2008/165.html&quot;&gt;来源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;http://blog.httpwatch.com/2007/11/20/error_internet_invalid_url-httpwatch/&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/mayingbao/archive/2007/11/30/978530.html&quot;&gt;HttpWatch工具简介及使用技巧&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>如何取 URL 中第一个单独的问号(?) 位置</title>
   <link href="http://blog.hotoo.me/post/how-to-get-the-first-single-question-mark.html"/>
   <updated>2011-06-22T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/how-to-get-the-first-single-question-mark</id>
   <content type="html">&lt;h1&gt;如何取 URL 中第一个单独的问号(?) 位置&lt;/h1&gt;

&lt;p&gt;新版 Arale 通过 nginx 服务支持使用双问号的访问方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://static.alipay.com/ar??arale.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;访问 &lt;code&gt;https://static.alipay.com/ar/arale.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通过正则的正向预搜索有办法获得第一个单问号的位置么？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var r = /\?(?!\?)/;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会匹配双问号的第 2 个问号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://static.alipay.com/ar??arale.js
                             ^


var path = function(uri){
    var idx = uri.indexOf(&quot;;jsessionid=&quot;);
    if(idx &amp;gt;= 0){return uri.substr(0, idx);}

    do{
        idx = uri.indexOf(&quot;?&quot;, idx);
        if(idx &amp;lt; 0){break;}
        if(&quot;?&quot; == uri.charAt(idx+1)){
            idx += 2;
        }else{
            break;
        }
    }while(idx &amp;gt;= 0);

    return idx &amp;lt; 0 ? uri : uri.substr(0, idx);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前是通过循环方式计算的，无心比较遍历和正则之间无优劣，
纯粹对于正则的实现很有兴趣 :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;答案一：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var path = function(uri){
    return uri.replace(/;jsessionid=.*$/, &quot;&quot;)
        .replace(/^(.*?[^?])\?[^?]/, &quot;$1&quot;);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;答案二：&lt;/p&gt;

&lt;p&gt;上面用了两个相同规则的分组，这里可以减少到一个分组&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;asdfadf??a?a&quot;.replace(/([^\s])\?\1/, '$1*$1'); // &quot;asdfadf??a*a&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这种做法对于问号(?)在字符串首尾时没有办法匹配&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var temp= &quot;12345???89?asdf&quot;.search(/(?:[^?]|^)\?(?!\?)/);
var index = temp ? temp + 1 : temp; // index的就想要的索引值
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>使用 Vimwiki 还是 Jekyll 作为博客系统？</title>
   <link href="http://blog.hotoo.me/post/blog-system-vimwiki-or-jekyll.html"/>
   <updated>2011-06-19T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/blog-system-vimwiki-or-jekyll</id>
   <content type="html">&lt;h1&gt;使用 Vimwiki 还是 Jekyll 作为博客系统？&lt;/h1&gt;

&lt;p&gt;一直使用 Vimwiki 作为个人博客系统，今天非常荣幸收到加入
&lt;a href=&quot;http://planet.vim-cn.com/&quot;&gt;Vim 中文星&lt;/a&gt; 的邀请，需要我的提供 RSS/Atom 输出。&lt;/p&gt;

&lt;p&gt;但是 Vimwiki 本质上是一个 wiki 系统，通常来说都是（个人推荐）作为平板结构
来放置信息，较少（但也支持）基于目录，尤其是基于日期时间格式的目录结构来存储
词条（或者说日志），所以要支持基于时间的 RSS/Atom 就有一定的困难，而且貌似
需求本身也不怎么合理，不过 github 的提交记录里是有 RSS 输出的，虽然作为博客
订阅的意义几近于无。&lt;/p&gt;

&lt;p&gt;于是想是否有必要在 Wordpress 上同步更新博客（Blogger 被墙的厉害），但是发现
很久以前（还是在拥有 xianyun.org，并使用 mail@xianyun.org）注册的 Wordpress，
杯具的忘记密码了，注册的邮箱也不再使用，无法索取找回密码了。&lt;/p&gt;

&lt;p&gt;于是想：迁移到 Jekyll 怎么样？&lt;/p&gt;

&lt;p&gt;由于 github pages 的缘故，很早就大致了解了下 Jekyll，但是没有深入，一直主观的
认为 Jekyll 会根据模板动态转换 markdown/textile 文件。但是更深入的了解之后
发现，Jekyll 只是一个静态文件转换程序，通过模板引擎将数据（博客日志）和模板
转换成静态 HTML 文件。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持 markdown, textile 语法。&lt;/li&gt;
&lt;li&gt;支持生成 RSS, ATOM。&lt;/li&gt;
&lt;li&gt;ruby 脚本生成静态文件。&lt;/li&gt;
&lt;li&gt;需要将安装 ruby 和 jekyll.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;而 Vimwiki 是一个基于 Vim 的 wiki 客户端程序，提供便于管理和使用的本地 wiki 支持。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持 wiki 语法。&lt;/li&gt;
&lt;li&gt;不支持生成 RSS, ATOM。&lt;/li&gt;
&lt;li&gt;Vim script 生成静态文件。&lt;/li&gt;
&lt;li&gt;需要安装 Vim, Vimwiki.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;我个人目前最简单的需求，就是在 Vimwiki 的基础上实现 RSS 输出的支持。不过完整
、完美意义上来说，我还是希望有这样一个博客系统。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持 wiki, markdown, textile 或其他语法。(Vimwiki, Jekyll)&lt;/li&gt;
&lt;li&gt;支持生成 RSS/Atom 输出. (Jekyll)&lt;/li&gt;
&lt;li&gt;通过 Vim(script) 或其他易于安装使用的程序，将日志+模板自动生成 HTML 文件。(Vimwiki, Jekyll)&lt;/li&gt;
&lt;li&gt;日志原始文件通过 Dropbox 或其他云服务自动同步，无需 push 到 github。(Vimwiki)&lt;/li&gt;
&lt;li&gt;只将生成好的静态 HTML 文件 push 到 github。(Vimwiki)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kyle.xlau.org/2009/08/13/blogging-like-a-hacker.html&quot;&gt;像黑客一样写博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.leezhong.com/tech/2010/08/25/make-github-as-blog-engine.html&quot;&gt;使用github作为博客引擎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yangzhiping.com/tech/wordpress-to-jekyll.html&quot;&gt;告别wordpress，拥抱jekyll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://roylez.heroku.com/2010/02/04/jekyll-on-heroku.html&quot;&gt;在heroku上用jekyll做博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.shaoshing.com/2010/04/03/blog-engine-jekyll-vs-toto/&quot;&gt;轻量级博客工具: Jekyll vs ToTo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.miaout17.net/2011/05/08/convert-wordpress-to-jekyll-and-disqus/&quot;&gt;將Wordpress轉移到Jekyll及Disqus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>多种不同结果的返回模式</title>
   <link href="http://blog.hotoo.me/post/parser-return-pattern.html"/>
   <updated>2011-06-08T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/parser-return-pattern</id>
   <content type="html">&lt;h1&gt;多种不同结果的返回模式&lt;/h1&gt;

&lt;p&gt;探讨个问题哈，我现在再做一个 HTML 校验工具，先将 HMTL 源码解析成 DOM 树，
其间可能遇到语法错误，为了发现更多的错误，会跳到下一个分界点继续解析；
然后将解析得到的 DOM 树返回给 lint 工具继续进行进一步的语法、语义解析。
其过程是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var dom = parse(html){cap(err); return dom;};
var lintErr = lint(dom){return err;};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终需要将 parse 和 lint 的错误收集到一起反馈给服务端。&lt;/p&gt;

&lt;p&gt;请问，parse 有什么好的方式来返回解析时错误信息？&lt;/p&gt;

&lt;p&gt;之前先是将 parse 设计成了函数式，但是我觉得下面这种返回方式很不好：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return {
    dom: dom,
    err: err
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;另外一种思路&lt;/h2&gt;

&lt;p&gt;HTMLParser 设计成独立的类（而不是上面的函数方式）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var HTMLParser = function(){
    var err = [];
    this.parse = function(html){
        var dom = {};

        err.push(new Error(&quot;this is not error.&quot;));
        err.push(new Error(&quot;err is not error.&quot;));

        return dom;
    };
    this.getErrors = function(){
        return err;
    };
};

function main(html){
    var parser = new HTMLParser();
    var dom = parser.parse(html);
    var err = parser.getErrors();
    var result = HTMLint(dom);

    // concat array to err.
    Array.prototype.push.apply(err, result);

    return err;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;貌似这种方式比上面的稍好一点，不过我又不想为此将原本很简单的函数式改成
对象式。&lt;/p&gt;

&lt;h2&gt;外部数据存储&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;var Console = (function(){
    var _err = [];
    function log(err){
        _err.push(err);
    }
    function getErr(){
        return _err;
    }

    return {
        log: log,
        getErrors: getErr
    };
});
var HTMLParse = function(){
    Console.log(new Error(&quot;syntax error.&quot;));
    Console.log(new Error(&quot;parse error&quot;));

    return dom;
};
var HTMLint = function(dom){
    var err = [];
    err.push(new Error(&quot;lint error.&quot;));
    err.push(new Error(&quot;lint error.&quot;));
    return err;
};
function main(html){
    var dom = HTMLParse(html);
    var parseErr = Console.getErrors();
    var lintErr = HTMLint(dom);

    Array.prototype.push.apply(parseErr, lintErr);

    return parseErr;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于只有一个实例（或运行一次）的情况，第三方独立的 &lt;code&gt;console&lt;/code&gt; 是合适的。
但是一旦需要多个实例（或运行多次，每次Parse的结果都各自独立，
每个html的parse和lint的错误结果各自拼接一起，但是不是所有的html的parse+lint错误结果拼接在一起）
的情况，还是将解析异常信息和解析器本身绑定在一起（比如类）的方式比较合适。&lt;/p&gt;

&lt;p&gt;上面的文字有点绕，表达式：&lt;/p&gt;

&lt;p&gt;err0 = parseError0 + lintError0;
err1 = parseError1 + lintError1;&lt;/p&gt;

&lt;p&gt;err0 和 err1 是各自独立的，实例化多个第三方独立的有专用的Console，不如用类的方式好了。&lt;/p&gt;

&lt;h2&gt;寻求指教&lt;/h2&gt;

&lt;p&gt;对于这种需要返回多种不同数据的函数式，
如果你有其他的方案，欢迎回帖、回邮，或回博交流指导 ：）&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>【结束】趣味 Vim Tee</title>
   <link href="http://blog.hotoo.me/post/vim-tee-2.html"/>
   <updated>2011-05-26T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim-tee-2</id>
   <content type="html">&lt;h1&gt;【结束】&lt;del&gt;趣味 Vim Tee&lt;/del&gt;&lt;/h1&gt;

&lt;p&gt;去年 [[vim73-tee|【已结束】团购庆祝 Vim 7.3 正式发布的 Tee]] 真是热闹的说，今年刚入夏，
就有 Vim 爱好者提出团购 Tee 的事了，我本来没准备印 Vim 的 Tee 的，倒是刚印了
2 件“连接被重置”和“连接超时”的 Tee。&lt;/p&gt;

&lt;p&gt;偶然又看到这副 &lt;a href=&quot;http://www.jonlee.ca/quick-vim-tip-esc-alternative/&quot;&gt;Emacs 警追杀 Vim 匪&lt;/a&gt;
的漫画，可惜原图太小了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.jonlee.ca/wp-content/uploads/2008/04/control_escape_comic.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vim Talk 群里的“猫猫虫”同学非常给力的描了副大图，几经处理之后，我们终于
有了可以 &lt;a href=&quot;http://i.min.us/i7k94.png&quot;&gt;印刷在 Tee 的创意&lt;/a&gt; 了。啊哈，这幅漫画我最爱了。&lt;/p&gt;

&lt;p&gt;跟商家初步聊了下，去年 60 多件每件 25 块，今年即使有这么多数量，最便宜也只能到
33 块了（哦，我的口袋，有 33 块）。现在数量还没确定，而且这次不像去年那么热烈了，
估计人数会少很多。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tee 的设计：&amp;lt;br /&amp;gt;
正面：印这幅漫画。&amp;lt;br /&amp;gt;
背面：无。&amp;lt;br /&amp;gt;
右手袖标：印每个人的 ID，可以自行决定，可以没有。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你也想印一件或者几件，请发邮件一下信息至 &lt;code&gt;hotoo.cn+VimTee[AT]gmail.com&lt;/code&gt; ，
请将 &lt;code&gt;[AT]&lt;/code&gt; 替换成 &lt;code&gt;@&lt;/code&gt;，其他保持不变。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*注意* ：如果确定要购买，请务必将你 [需要的尺码](http://www.flickr.com/photos/hotoo/4890597770/)，
*邮件地址* ，实际的 *收货地址* ， *邮编* ， *收件人姓名* 和你要求的 *袖标* 。&amp;lt;br /&amp;gt;
最好还有即时联系方式，比如手机，快递可能需要。&amp;lt;br /&amp;gt;
请确认这些信息能直接联系到你，收件人能收到货。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gmail 最近很难连接上，尤其在公司，只能晚上回家整理订单了 抱歉。&lt;/p&gt;

&lt;p&gt;报名 ~还是像去年一样，截至这周末（2011/05/29） 吧~ 截至下周一(2011/05/30)，
过期自己想印的可以单印，给商家打出我们的旗号，再好好商量，应该有折扣的 ：）&lt;/p&gt;

&lt;p&gt;我并非托，不收分毫中介费或者中间利润。如果你不信任的话可以自行拿图去印刷，
版权免费（如果猫猫虫同意的话）。&lt;/p&gt;

&lt;h2&gt;流程&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;网友邮件详细信息给闲耘。&lt;/li&gt;
&lt;li&gt;闲耘收集统计信息，查漏补缺与确认。&lt;/li&gt;
&lt;li&gt;闲耘下订单。&lt;/li&gt;
&lt;li&gt;店家印制 Tee 并发货。&lt;/li&gt;
&lt;li&gt;闲耘得到快递单号，通知各位团友。&lt;/li&gt;
&lt;li&gt;团友收到 Tee 之后邮件通知闲耘，并（支付宝/银行）转账给闲耘。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;会有快递单号的，到时候我会一一发给各位的。33不是最终价格，看我们最终定的数量，我尽量争取更实惠的价格。邮费是另算的，如果同城其实可以考虑合寄，还可以顺便线下认识下。货款我是下单的时候统一给卖家的，到时候大家收到Tee之前/之后支付宝/银行转账都可以。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://picplz.com/user/nixzhu/pic/grj4q/&quot;&gt;@NIX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fangke.im/338&quot;&gt;fanke.im&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://t.co/wy7vGuo&quot;&gt;@yyfrankyy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;vim73-tee&quot;&gt;去年的贴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>closure-compiler.vim</title>
   <link href="http://blog.hotoo.me/post/closure-compile.vim.html"/>
   <updated>2011-05-26T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/closure-compile.vim</id>
   <content type="html">&lt;h1&gt;closure-compiler.vim&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hotoo/vimrc/blob/master/plugin/ClosureCompiler.vim&quot;&gt;ClosureCompiler.vim&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Auto_compile_Javascript_with_Closure&quot;&gt;Auto compile Javascript with Closure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.othree.net/log/2009/09/08/vim-js-yuicompressor/&quot;&gt;Vim 儲存完 JavaScript 檔案後自動用 yuicompressor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bootleq.blogspot.com/2010/08/vim-funcion-closure-compiler-js.html&quot;&gt;Vim function：使用 closure compiler 壓縮 js 文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/JeffreyZhao/archive/2009/12/09/ikvm-google-closure-compiler.html&quot;&gt;在项目中使用Google Closure Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ued.taobao.com/blog/2010/12/23/advanced-optimization-in-closure-compiler-and-more/&quot;&gt;Closure Compiler 高级模式及更多思考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/lifesinger/closure-compiler-vs-yuicompressor&quot;&gt;Closure Compiler vs YUICompressor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/545665&quot;&gt;function to use closure-compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/closure-compiler/&quot;&gt;Closure Compiler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://closure-compiler.appspot.com/&quot;&gt;closure-compiler online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://code.google.com/intl/zh-CN/closure/compiler/&quot;&gt;Closure Compiler Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>深入 hasAttribute</title>
   <link href="http://blog.hotoo.me/post/hasAttribute.html"/>
   <updated>2011-05-19T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/hasAttribute</id>
   <content type="html">&lt;h1&gt;深入 hasAttribute&lt;/h1&gt;

&lt;p&gt;众所周知，IE 的 HTMLElement 对象不支持 hasAttribute 方法，于是有了如下实现：
它针对不支持 hasAttribute 方法的浏览器，检查 getAttribute 得到的是否等于 null，
如果是 null 则表明这个 HTMLElement 不存在指定的 Attribute。很聪明的一个方法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function hasAttr(elem, attr){
    if(elem.hasAttribute){
        return elem.hasAttribute(attr);
    }
    return null!=elem.getAttribute(attr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最近写了个原理简单的基于 Select+Input 的可编辑 &lt;a href=&quot;http://hotoo.me/labs/combox.html&quot;&gt;Combox&lt;/a&gt;
控件，用到了这个方法来检查目标 select
对象是否存在如 multiple, editable 这样的属性，来实现不同的 Combox 版本。其他
浏览器上跑的很好，但是在 IE6 上却总是被初始化为 multiple 的实例，很明显，这个
hasAttribute 的实现出问题了。&lt;/p&gt;

&lt;p&gt;原来针对 IE6，还有稍多一点的特殊性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input.getAttribute(&quot;checked&quot;)&lt;/code&gt; 返回 Boolean 值，true/false；

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input[type=checkbox|radio].getAttribute(&quot;checked&quot;)&lt;/code&gt; 根据他的 checked 状态相关；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input[type=others...].getAttribute(&quot;checked&quot;)&lt;/code&gt; 始终返回 false；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select.getAttribute(&quot;multiple&quot;)&lt;/code&gt; 返回 Boolean 值；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select&amp;gt;option.getAttribute(&quot;selected&quot;)&lt;/code&gt; 返回 Boolean 值。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;虽然可以通过 getAttribute(&quot;checked&quot;) 判断 checkbox/radio 的属性状况，但对于
其他类型的 input 元素，是无法准确获得 checked 属性的。&lt;/p&gt;

&lt;p&gt;TODO: checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected&lt;/p&gt;

&lt;p&gt;下面是比较完整一点的实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function hasAttr(elem, attr){
    var tag = elem.tagName.toLowerCase();
    attr = attr.toLowerCase();
    if(elem.hasAttribute){
        return elem.hasAttribute(attr);
    }
    if(navigator.userAgent.indexOf(&quot;MSIE 6&quot;)&amp;gt;0 &amp;amp;&amp;amp;
      ((&quot;input&quot;==tag &amp;amp;&amp;amp; &quot;checked&quot;==attr) ||
      (&quot;option&quot;==tag &amp;amp;&amp;amp; &quot;selected&quot;==attr) ||
      (&quot;select&quot;==tag &amp;amp;&amp;amp; &quot;multiple&quot;==attr))){
        return elem.getAttribute(attr);
    }
    return null!=elem.getAttribute(attr);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-- Update 2011/07/26 --&lt;/p&gt;

&lt;p&gt;继续发现新坑：IE 中下面的代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;q onclick=&quot;alert(0);&quot;&amp;gt;&amp;lt;/q&amp;gt;

&amp;lt;script&amp;gt;
    p.onclick = function(){};

    alert(p.getAttribute(&quot;onclick&quot;));
    alert(q.getAttribute(&quot;onclick&quot;));
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function(){}

function onclick()
{
alert(0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以上面的 &lt;code&gt;hasAttr&lt;/code&gt; 函数是无法正确返回这种在脚本中设置 &lt;code&gt;onclick&lt;/code&gt; 值的。&lt;/p&gt;

&lt;p&gt;对策：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var hasAttr = function(elem, attr){
    if(!elem || 1!=elem.nodeType){return false;}
    if(elem.hasAttribute){return elem.hasAttribute(attr);}
    // for IE, not perfect.
    // @see http://www.patmullin.com/weblog/2006/04/06/getattributestyle-setattributestyle-ie-dont-mix/
    attr = attr.toLowerCase();
    if(&quot;style&quot; == attr){return &quot;&quot; !== elem.style.cssText;}
    if(navigator.userAgent.indexOf(&quot;MSIE 6&quot;)&amp;gt;0 &amp;amp;&amp;amp;
      ((&quot;input&quot;==tag &amp;amp;&amp;amp; &quot;checked&quot;==attr) ||
      (&quot;option&quot;==tag &amp;amp;&amp;amp; &quot;selected&quot;==attr) ||
      (&quot;select&quot;==tag &amp;amp;&amp;amp; &quot;multiple&quot;==attr))){
        return elem.getAttribute(attr);
    }
    var val = elem.getAttribute(attr);
    if(null == val){return false;}
    else if(&quot;function&quot; == typeof(val)){
        return val.toString().indexOf(&quot;function &quot;+attr+&quot;()&quot;) == 0;
    }else{return true;}
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;----- Update 2011/10/26 ------&lt;/p&gt;

&lt;p&gt;继续新坑，IE5,6,7 的 &lt;code&gt;script.getAttribute(&quot;src&quot;) === &quot;&quot;&lt;/code&gt;，正常的 DOM 方法已经
阻止不了 IE 了，hack 方案可以解析 wrapHTML(node){return outerHTML.startTag;}，
判断是否有 src 属性。&lt;/p&gt;

&lt;p&gt;如果在这里你真的可以忽略 IE，最佳方案还是屏蔽 IE 吧。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>window.close()</title>
   <link href="http://blog.hotoo.me/post/window.close.html"/>
   <updated>2011-04-26T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/window.close</id>
   <content type="html">&lt;h1&gt;window.close()&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;window.opener=null;
window.open(&quot;&quot;,&quot;_self&quot;);
window.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;onclick
return false;&lt;/p&gt;

&lt;p&gt;IE5.5以下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;OBJECT id=&quot;close&quot; type=&quot;application/x-oleobject&quot; classid=&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;&amp;gt;
    &amp;lt;param name=&quot;Command&quot; value=&quot;CLOSE&quot;&amp;gt;
&amp;lt;/object&amp;gt;
&amp;lt;input type=&quot;button&quot; onclick=&quot;close.Click()&quot; value=&quot;关闭窗口&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/window.close&quot;&gt;window.close&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javascript-coder.com/window-popup/javascript-window-close.phtml&quot;&gt;Using the window.close method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://javascript.about.com/library/blclose.htm&quot;&gt;window close&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/jhxk/articles/1610920.html&quot;&gt;window.opener=null;window.close()，只支持IE6不支持IE7,IE8的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://topic.csdn.net/t/20020703/10/845994.html&quot;&gt;怎么去掉使用window.close()时弹出的提示框？（不用按钮）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blogjava.net/wangxinsh55/archive/2007/03/23/105743.html&quot;&gt;window.close关闭窗口，不弹出系统提示，直接关闭&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Vim 神技</title>
   <link href="http://blog.hotoo.me/post/vim-share-2011.html"/>
   <updated>2011-04-11T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim-share-2011</id>
   <content type="html">&lt;h1&gt;vim-share-2011&lt;/h1&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_9693832&quot;&gt; &lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/hotoo/vim-9693832&quot; title=&quot;Vim 神技&quot; target=&quot;_blank&quot;&gt;Vim 神技&lt;/a&gt;&lt;/strong&gt; &lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/9693832&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0&quot; allowfullscreen&gt;&lt;/iframe&gt; &lt;div style=&quot;padding:5px 0 12px&quot;&gt; View more PowerPoint from &lt;a href=&quot;http://www.slideshare.net/hotoo&quot; target=&quot;_blank&quot;&gt;hotoo&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;


&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/hotoo/vim-9693832&quot;&gt;Vim 神技@slideshare&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>JavaScript 异常</title>
   <link href="http://blog.hotoo.me/post/javascript-exceptions.html"/>
   <updated>2011-04-03T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/javascript-exceptions</id>
   <content type="html">&lt;p&gt;= JavaScript 异常 =&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt; Browser   &lt;/th&gt;
&lt;th&gt; message &lt;/th&gt;
&lt;th&gt; description &lt;/th&gt;
&lt;th&gt; line &lt;/th&gt;
&lt;th&gt; number &lt;/th&gt;
&lt;th&gt; lineNumber &lt;/th&gt;
&lt;th&gt; name &lt;/th&gt;
&lt;th&gt; fileName &lt;/th&gt;
&lt;th&gt; stack &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; IE8       &lt;/td&gt;
&lt;td&gt; √      &lt;/td&gt;
&lt;td&gt; √          &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×         &lt;/td&gt;
&lt;td&gt; √   &lt;/td&gt;
&lt;td&gt; ×       &lt;/td&gt;
&lt;td&gt; ×    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Firefox 5 &lt;/td&gt;
&lt;td&gt; √      &lt;/td&gt;
&lt;td&gt; ×          &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; √         &lt;/td&gt;
&lt;td&gt; √   &lt;/td&gt;
&lt;td&gt; √       &lt;/td&gt;
&lt;td&gt; √    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Chrome 12 &lt;/td&gt;
&lt;td&gt; √      &lt;/td&gt;
&lt;td&gt; ×          &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×         &lt;/td&gt;
&lt;td&gt; √   &lt;/td&gt;
&lt;td&gt; ×       &lt;/td&gt;
&lt;td&gt; √    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Safari 5  &lt;/td&gt;
&lt;td&gt; √      &lt;/td&gt;
&lt;td&gt; ×          &lt;/td&gt;
&lt;td&gt; √   &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×         &lt;/td&gt;
&lt;td&gt; √   &lt;/td&gt;
&lt;td&gt; ×       &lt;/td&gt;
&lt;td&gt; ×    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Opera 11  &lt;/td&gt;
&lt;td&gt; √      &lt;/td&gt;
&lt;td&gt; ×          &lt;/td&gt;
&lt;td&gt; ×   &lt;/td&gt;
&lt;td&gt; ×     &lt;/td&gt;
&lt;td&gt; ×         &lt;/td&gt;
&lt;td&gt; √   &lt;/td&gt;
&lt;td&gt; ×       &lt;/td&gt;
&lt;td&gt; √    |&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;属性描述：&lt;/p&gt;

&lt;p&gt;message:: {String} 异常消息描述，全部浏览器都支持。
name:: 错误名称，一般等同于错误类型名，如 Error, TypeError, ReferenceError...。不过实际抛出的同一个错误，不同浏览器的 name 值可能不一致(下面讲述)。
description:: 异常描述，IE 中同 message，其他浏览器不支持。
line:: 错误行号，仅 Safari 支持。
number:: 错误编号，例如“缺少对象”是 -2146823281。“xx未定义”是 -2146823279。仅 IE 支持。
lineNumber:: 错误发生所在行号，仅 Firefox 支持。
fileName:: 发生错误的所在文件地址，仅 Firefox 支持。&lt;/p&gt;

&lt;p&gt;构造函数的参数&amp;amp;顺序：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt; 参数    &lt;/th&gt;
&lt;th&gt; 1(个)                     &lt;/th&gt;
&lt;th&gt; 2(个)                     &lt;/th&gt;
&lt;th&gt; 3(个)                                &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Firefox &lt;/td&gt;
&lt;td&gt; &lt;code&gt;Error(message)&lt;/code&gt;          &lt;/td&gt;
&lt;td&gt; &lt;code&gt;Error(message,fileName)&lt;/code&gt; &lt;/td&gt;
&lt;td&gt; &lt;code&gt;Error(message,fileName,lineNumber)&lt;/code&gt; |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; IE      &lt;/td&gt;
&lt;td&gt; &lt;code&gt;Error(&amp;lt;Number&amp;gt; number)&lt;/code&gt;  &lt;/td&gt;
&lt;td&gt; &lt;code&gt;Error(number,message)&lt;/code&gt;   &lt;/td&gt;
&lt;td&gt; &gt;                                    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; \/      &lt;/td&gt;
&lt;td&gt; &lt;code&gt;Error(&amp;lt;String&amp;gt; message)&lt;/code&gt; &lt;/td&gt;
&lt;td&gt; \/                        &lt;/td&gt;
&lt;td&gt; &gt;                                    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Chrome  &lt;/td&gt;
&lt;td&gt; &lt;code&gt;Error(message)&lt;/code&gt;          &lt;/td&gt;
&lt;td&gt; &gt;                         &lt;/td&gt;
&lt;td&gt; &gt;                                    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Safari  &lt;/td&gt;
&lt;td&gt; \/                        &lt;/td&gt;
&lt;td&gt; &gt;                         &lt;/td&gt;
&lt;td&gt; &gt;                                    |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; Opera   &lt;/td&gt;
&lt;td&gt; \/                        &lt;/td&gt;
&lt;td&gt; &gt;                         &lt;/td&gt;
&lt;td&gt; &gt;                                    |&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;Note: IE, &lt;code&gt;new Error(String message)&lt;/code&gt; - &lt;code&gt;&amp;lt;Object,Array,RegExp,...&amp;gt;.toString()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JavaScript 有多种原生异常类型，包括最常见的 Error 和 EvalError, RangeError,
ReferenceError, SyntaxError, TypeError, URIError. 这些原生异常类型分别对应的
意义是：&lt;/p&gt;

&lt;p&gt;Error:: 异常的基类。
EvalError:: 发生在 eval() 函数中的异常。
RangeError:: 数值超出 JavaScript 可表示的范围。
ReferenceError:: 使用了非法的引用。
SyntaxError:: 在 eval() 中发生了语法错误的异常。除此之外的语法错误异常，均无法通过 try/catch 和 onerror 捕获，这类异常会直接报告给浏览器。
TypeError:: 变量类型不是预期的。
URIError:: 在 encodeURI() 和 decodeURI() 函数中发生异常。&lt;/p&gt;

&lt;p&gt;TODO: 每种异常类型都带有以下成员/方法。
message::
line::&lt;/p&gt;

&lt;p&gt;值得注意的是，直接掷出 Error 之外的其他原生异常（如 &lt;code&gt;throw new EvalError(&quot;msg&quot;)&lt;/code&gt;）
时，IE 浏览器是无法捕获异常消息的，统一的异常消息是“例外被抛出且未被接住”。&lt;/p&gt;

&lt;p&gt;而在 try{}catch(ex){} 中可以拿到更详细的异常信息。&lt;/p&gt;

&lt;p&gt;JavaScript 也可以掷出其他类型的异常，如 throw &quot;xx error.&quot;&lt;/p&gt;

&lt;h2&gt;捕获异常&lt;/h2&gt;

&lt;p&gt;推荐的异常捕获方法是 &lt;code&gt;try/catch&lt;/code&gt;，不过也可以简单使用全局异常捕获方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.onerror = function(msg, file, line){
    return true;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;window.onerror&lt;/code&gt; 事件可以捕获浏览器端掷出的所有异常，并可以拿到错误消息，所在文件，
及错误所在行。但是无法获得异常对象本身，及触发异常的事件对象。&lt;/p&gt;

&lt;p&gt;注意：onerror 事件不在早期的 HTML4 规范中，只有 IE, Firefox 和后续的 Chrome 才有
支持，Safari, Opera 至今没有支持这个事件。&lt;/p&gt;

&lt;p&gt;一般来说，绑定事件(addEventListener/attachEvent)的方式比给 HTML DOM 元素直接连接事件处理函数的方式要好。&lt;/p&gt;

&lt;p&gt;但是为 window 绑定 error 事件却似乎不太理想。
IE 浏览器能得到 4 个参数（比 onerror 多一个），但有效的还是前面 3 个（跟 onerror 一致）。
而其他浏览器却只能得到一个参数，即错误事件（FF 得到的是 Error，Chrome 得到的 ErrorEvent。&lt;/p&gt;

&lt;p&gt;题外话，对于 HTML 元素的 onerror 事件一般会触发在加载外部资源时。&lt;/p&gt;

&lt;h2&gt;无法捕获的异常&lt;/h2&gt;

&lt;p&gt;如果 &lt;code&gt;onerror&lt;/code&gt; 所在 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 块本身有语法错误，会导致 &lt;code&gt;onerror&lt;/code&gt; 错误处理脚本本身无法
被执行，也就无法初始化全局异常处理函数。&lt;/p&gt;

&lt;p&gt;或者异常发生在初始化全局异常处理函数之前，这个异常也无法被全局处理函数捕获。&lt;/p&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error&quot;&gt;Error - MDC Doc Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/DOM/window.onerror&quot;&gt;window.onerror - MDC Doc Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc197053%28VS.85%29.aspx&quot;&gt;onerror Event&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javascriptkit.com/javatutors/error.shtml&quot;&gt;The onerror event of the window object&lt;/a&gt;
  &lt;a href=&quot;http://www.javascriptkit.com/javatutors/error2.shtml&quot;&gt;2&lt;/a&gt;
  &lt;a href=&quot;http://www.javascriptkit.com/javatutors/error3.shtml&quot;&gt;3&lt;/a&gt;
  &lt;a href=&quot;http://www.javascriptkit.com/javatutors/error4.shtml&quot;&gt;4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/TypeError&quot;&gt;TypeError&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hi.baidu.com/fcl06/blog/item/c3721bfa2643689058ee9040.html&quot;&gt;js判断错误类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iefans.net/ie-javascript-error/&quot;&gt;解析IE浏览器中的Javascript Error对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://damnit.jupiterit.com/home/learn&quot;&gt;DamnIT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.exceptionhub.com/&quot;&gt;ExceptionHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>树形控件的分时装载</title>
   <link href="http://blog.hotoo.me/post/timed-tree-processing.html"/>
   <updated>2011-03-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/timed-tree-processing</id>
   <content type="html">&lt;h1&gt;树形控件的分时装载&lt;/h1&gt;

&lt;p&gt;异步装载树形控件节点的时机：
1. 传统方式是展开节点时再装载子节点；
2. 预装载子节点（即展开节点时，预装载到孙级节点。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;任何可见的节点，如果有子节点，则其子节点不是已经装载好，就是在装载的网路上）。
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript 分时加载</title>
   <link href="http://blog.hotoo.me/post/timed-array-processing.html"/>
   <updated>2011-03-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/timed-array-processing</id>
   <content type="html">&lt;h1&gt;JavaScript 分时加载&lt;/h1&gt;

&lt;p&gt;使用原始数据（非副本）和索引访问（非shift()），在IE中性能大幅度提高，
其他浏览器对 concat()，尤其是 shift() 方法进行了优化，性能差别不大。&lt;/p&gt;

&lt;p&gt;分时算法对于需要及时更新 UI 的情况非常有效，但是实际上分时算法性能非常不好
（当然分时算法追求的不是这个），不适合作为巨量数据的实时处理。&lt;/p&gt;

&lt;p&gt;譬如说在树形控件中，原始数据提供了一个巨大的数组数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var datas = [
    {id:&quot;1&quot;, pid:&quot;0&quot;, text:&quot;Node 1&quot;},
    {id:&quot;2&quot;, pid:&quot;0&quot;, text:&quot;Node 2&quot;},
    ...
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我的处理方式是先将这份数据遍历一次，用 HashMap 进行缓存索引，便于后续的操作
更加快捷。但是这个遍历本身是非常耗时的，虽然它不产生界面变化，但同样会将页面
卡死。为了提高界面响应速度，我们会想到使用分时计算方式，不过这种方式会延长
缓存索引的过程变的更久，导致后续创建节点的操作无法及时执行，也就无法更新界面，
界面虽然可以操作，但是没什么可操作的（对于以树本身为主的页面来说）。&lt;/p&gt;

&lt;p&gt;后来的做法是，根据树的实时装载能力（目前是十万个节点。经过缓存索引的数据，
跟节点层级深度无关）和实际应用作出判断，对于在超出浏览器处理能力的，使用异步
装载方式；处理能力以内的，不做要求。&lt;/p&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;http://lifesinger.googlecode.com/svn/trunk/lab/2009/array-processing.html&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/bluedream2009/archive/2010/03/16/1687095.html&quot;&gt;【优化】分时加载&lt;/a&gt; - Cauma&lt;/li&gt;
&lt;li&gt;http://www.nczonline.net/blog/2009/08/11/timed-array-processing-in-javascript/&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>四象限法 2.0</title>
   <link href="http://blog.hotoo.me/post/quadrant-2.0.html"/>
   <updated>2011-03-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/quadrant-2.0</id>
   <content type="html">&lt;h1&gt;四象限法 2.0&lt;/h1&gt;

&lt;p&gt;四象限法是任务管理里一项重要的方法，这里根据
&lt;a href=&quot;http://www.gtdlife.cn/2011/2183/free-your-quadrant/&quot;&gt;GTDLife 的分享&lt;/a&gt;
制作而成的 &lt;a href=&quot;http://hotoo.me/labs/quadrant.html&quot;&gt;2.0 版&lt;/a&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript 千分位算法</title>
   <link href="http://blog.hotoo.me/post/javascript-commfy.html"/>
   <updated>2010-12-20T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/javascript-commfy</id>
   <content type="html">&lt;h1&gt;JavaScript 千分位算法&lt;/h1&gt;

&lt;p&gt;https://gist.github.com/748249&lt;/p&gt;

&lt;h2&gt;参考阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.xhlv.com/index.php/2009/09/15/parsedata-regexp/&quot;&gt;“千分位”格式化数据的正则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hi.chibaole.com/blog/2009/09/15/%E4%BB%A5%E2%80%9C%E5%8D%83%E5%88%86%E4%BD%8D%E2%80%9D%E6%A0%BC%E5%BC%8F-javascript/&quot;&gt;以“千分位”格式化数字–JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lonelyfishor.blogbus.com/logs/41230348.html&quot;&gt;javascript 按千分位划分数字-递归方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/yezi1305/archive/2008/09/09/2903239.aspx&quot;&gt;js数字千分位及取小数点后几位方法测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>placeholder 最佳实践</title>
   <link href="http://blog.hotoo.me/post/placeholder-in-action.html"/>
   <updated>2010-12-06T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/placeholder-in-action</id>
   <content type="html">&lt;h1&gt;placeholder 最佳实践&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.w3.org/html5/spec/Overview.html#the-placeholder-attribute&quot;&gt;placeholder&lt;/a&gt;
&lt;a href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/common-input-element-attributes.html#the-placeholder-attribute&quot;&gt;2&lt;/a&gt;
是 HTML5 中的标准属性，它用于定义显示在输入框中的简短提示信息，并在适当的时机
（比如在输入框获得焦点时）隐匿起来。&lt;/p&gt;

&lt;p&gt;在早期的浏览器中，只能通过 JavaScript 自定义函数来实现。而在早期的实现中又五花八门。&lt;/p&gt;

&lt;p&gt;在 HTML 方面，一般是使用自定义的 hint 或者 title 属性放置提示消息。&lt;/p&gt;

&lt;p&gt;而在 JavaScript 上，最常见的是通过修改 input 本身的 value 及其 CSS 样式实现。
一般有直接修改 input 的样式，或者添加 class 两种，后者从某种程度上来说更好些。&lt;/p&gt;

&lt;p&gt;早期的实现中还有一个比较不好的问题是，代码里直接判断 input.value 是否为空，
或者是否为占位符提示的值，如果用户输入的内容如果碰巧和占位符提示相同，则会出现误判。&lt;/p&gt;

&lt;p&gt;下面可以说是早期思想中一个较佳的实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&quot;input[placeholder]&quot;).each(function(){
    var o=$(this);
    if(!o.val()){
        o.val(o.attr(&quot;placeholder&quot;));
        o.addClass(&quot;placeholder&quot;)
    }
    o.focus(function(){
        if(o.hasClass(&quot;placeholder&quot;)){
            o.val(&quot;&quot;);
            o.removeClass(&quot;placeholder&quot;);
        }
    }).blur(function(){
        if(&quot;&quot;==o.val()){
            o.val(o.attr(&quot;placeholder&quot;));
            o.addClass(&quot;placeholder&quot;);
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是即使如此，直接修改 input.value 同样会有一个几乎无法避免的问题：假如用户在必填项中没有
输入任何内容，但是占位符会填充其内容，在提交表单时，当然也可以通过判断 input 是否包含
&lt;code&gt;placeholder&lt;/code&gt; 样式类来针对性处理。但是特殊地，当页面出现脚本错误（这应该说不少见），导致
表单验证函数未能正确处理而直接提交到服务器，这时服务器是较难准确确认输入框中的内容是占位符，
还是用户输入的内容的，它只知道这个满足非空条件。&lt;/p&gt;

&lt;p&gt;于是后来有了一种更有趣的实现，它不是直接修改 input.value，而是使用一个附加的元素，占位符消息
放置在这个元素中，并通过恰当控制这个元素的显示/隐藏，来达到更真实和优秀的体验。&lt;/p&gt;

&lt;p&gt;这种实现甚至可以轻易的实现只有用户在输入框中输入内容之后，占位符提示消息才消失。&lt;/p&gt;

&lt;p&gt;这个实现要注意以下几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;字体大小等样式要尽量和 input 一致（颜色例外）。&lt;/li&gt;
&lt;li&gt;使用 label 作为占位符消息的容器标签，可以加上恰当的 for 属性，实现自动关联。&lt;/li&gt;
&lt;li&gt;占位符的位置，可以直接使用 CSS 的相对位置实现，也可以使用 JavaScript 计算获得。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;比如下面的实现：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$('input[placeholder],textarea[placeholder]').each(function(){
    var ME=$(this), id=ME.attr('id'), txt=ME.attr('placeholder');
    if(!id){
        id=&quot;rand_ID_&quot;+Math.random().toString().substr(2);
        ME.attr('id', id);
    }
    var holder=$('&amp;lt;label for=&quot;'+id+'&quot; class=&quot;placeholder&quot;&amp;gt;'+txt+'&amp;lt;/label&amp;gt;')
    if(holder.width&amp;gt;ME.width()){
        holder.css({&quot;width&quot;:ME.width()});
    }
    ME.before(holder);
    function hanlder(){
        if(ME.val()){
            holder.hide();
        }else{
            holder.show();
        }
    }
    if(&quot;keyup&quot;==placeholder_handler){
        ME.keyup(hanlder);
    }else{
        ME.focus(function(){
            holder.hide();
        });
    }
    ME.blur(hanlder);
    if(!ME.val()){holder.show();}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外对于已经支持 &lt;code&gt;placeholder&lt;/code&gt; 的浏览器可以忽略上面的代码，而使用浏览器的默认实现。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(!(&quot;placeholder&quot; in document.createElement(&quot;input&quot;))){
    // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://diveintohtml5.org/forms.html#placeholder&quot;&gt;diveintohtml5.org#placeholder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cssrainbow.cn/demos/892.html&quot;&gt;让所有的浏览器都支持 HTML5 placeholder 属性，基于MooTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.quanlei.com/2010/09/%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84html5-placeholder-%E5%AE%9E%E7%8E%B0/&quot;&gt;跨浏览器的HTML5 placeholder 实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zhoumingzhi.com/2009/12/17/inline-form-labels/&quot;&gt;Inline Form Labels&lt;/a&gt;，
  &lt;a href=&quot;http://www.zhoumingzhi.com/2010/08/10/inline-form-labels-2/&quot;&gt;Inline Form Labels（2）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kamikazemusic.com/quick-tips/jquery-html5-placeholder-fix/&quot;&gt;JQuery HTML5 placeholder fix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Err Msg For Horizontal Forms</title>
   <link href="http://blog.hotoo.me/post/err-msg-for-horizontal-forms.html"/>
   <updated>2010-11-26T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/err-msg-for-horizontal-forms</id>
   <content type="html">&lt;hr /&gt;

&lt;p&gt;layout: post
title: 水平表单的错误消息方式
tags:
  - Forms
  - Web Design&lt;/p&gt;

&lt;p&gt;= 水平表单的错误消息方式 =
垂直方向的表单，错误消息有很多种呈现方式，放在输入框后面，下面，或上面都挺好，
因为垂直表单本身可用空间较大，而且向下或向右挤也不是什么问题，布局也没什么影响。&lt;/p&gt;

&lt;p&gt;但是对于水平方向向右一字排开的表单（自动适应可用宽度，不够则自动折行），搜索表单
比较常用，这种表单会有数个搜索输入框或选项，如图：&lt;/p&gt;

&lt;p&gt;[http://farm6.static.flickr.com/5202/5209097632_a2bddacb9f_b.jpg]&lt;/p&gt;

&lt;p&gt;这种表单，错误消息无论放在上、下、左、右，都会影响到表单的布局，而悬浮消息
也可能会遮挡住其他的输入框。那这样的表单，错误消息应该如何更好的呈现呢？&lt;/p&gt;

&lt;p&gt;我想到一种，即“双重视觉强调”讲的：在表单上/下方给出整体的的错误信息，但输入框
本身，只给出警戒色的边框进行提醒。&lt;/p&gt;

&lt;p&gt;[http://farm5.static.flickr.com/4091/5208505527_1a8dd70502_b.jpg]&lt;/p&gt;

&lt;p&gt;当用户鼠标悬浮在出错输入框上，或者出错输入框获得焦点时，上/下面的错误信息框
自动高亮当前输入框对应的错误消息。&lt;/p&gt;

&lt;p&gt;这种表单本身不会很多选项导致需要翻页，所以放在上面是没有问题的。如果真的需要
很多选项，那就要考虑换成垂直表单了。&lt;/p&gt;

&lt;p&gt;高亮而不是更新消息内容，是为了防止消息框高度发生变化，导致表单本身上下跳跃移动；
当然也可以将消息框放在下面，不过直觉上，错误消息放在上面似乎更靠谱。&lt;/p&gt;

&lt;p&gt;上面是个人观点，大家可以各抒己见。&lt;/p&gt;

&lt;p&gt; blog:datetime=2010/11/26 21:15:56:tags=Forms,Web,Design&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>无限级联动控件的设计</title>
   <link href="http://blog.hotoo.me/post/linkage.html"/>
   <updated>2010-11-23T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/linkage</id>
   <content type="html">&lt;h1&gt;无限级联动控件的设计&lt;/h1&gt;

&lt;p&gt;联动控件一般用于下拉列表，例如省市县的联动。&lt;/p&gt;

&lt;p&gt;很早的时候有些初级的实现只做到了固定级别（比如二级、三级）的联动，它们传入固定
的 N 个 &lt;select&gt; DOM 元素，形成固定的 N 级联动关系。后来有了一些较好的实现，
这些实现做到了动态级别的联动（即无限级联动）。&lt;/p&gt;

&lt;p&gt;早期的无限级联动控件，一般实现是通过主动下拉列表在 onchange 触发时主动调用
被动列表的更新 &lt;option&gt; 的方法，或者甚至在 onchange 处理函数中直接操作从动列表
的 &lt;option&gt;。&lt;/p&gt;

&lt;p&gt;主动调用从动列表的更新函数，则需要事先函数名称及传参的约定。
直接操作从动列表的 &lt;option&gt; 就更不靠谱了，灵活性也更差。&lt;/p&gt;

&lt;p&gt;另外，这两种实现只能做到一维的线性联动，即一个主动列表对应一个从动列表，要实现
一个主动列表联动多个（不确定数量的）从动列表，则比较麻烦/困难。&lt;/p&gt;

&lt;p&gt;另一种更好的实现，则是让从动列表来确定自己的主动列表，并监听主动列表的 change
事件。这种实现可以轻易做到动态级别、动态维度的联动，各个 &lt;select&gt; 的数据源及
及处理函数都由自身确定。&lt;/p&gt;

&lt;p&gt;我想说的其实只有一句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这里用 *从动监听主动* ，比 *主动调用从动* 的设计思想更先进。
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>客户端时间(续)</title>
   <link href="http://blog.hotoo.me/post/sync-client-time.html"/>
   <updated>2010-11-15T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/sync-client-time</id>
   <content type="html">&lt;h1&gt;同步客户端时间(续)&lt;/h1&gt;

&lt;p&gt;08 年我就有了这样的 &lt;a href=&quot;correct-web-client-datetime.html&quot;&gt;想法&lt;/a&gt;，却到今天才开始实践。&lt;/p&gt;

&lt;p&gt;公司电脑时间错了好多，但我的账户没有 Internet 同步的权限，遂手动校准。&lt;/p&gt;

&lt;p&gt;到 &lt;a href=&quot;http://www.time.ac.cn/stime.asp&quot;&gt;国家授时中心&lt;/a&gt; 校准时，发现其服务器时间的
跳跃是受客户端时间影响的，当客户端时间发生修改时，页面上显示的服务器时间也跟着
偏差。&lt;/p&gt;

&lt;p&gt;后来到台湾的 &lt;a href=&quot;http://www.stdtime.gov.tw/chinese/home.aspx&quot;&gt;國家時間與頻率標準實驗室&lt;/a&gt;
发现没有这个问题。&lt;/p&gt;

&lt;p&gt;研究了两者的代码，发现跟第一观感不同的是，这两者我更赞赏大陆的做法了，虽然有明显的可见缺陷。
下面简单分析下两者的实现思想及各自的优缺点。&lt;/p&gt;

&lt;p&gt;台湾的是使用 setInterval 实现了一个定时器，这个定时器考虑到了调用函数的时间消耗，
但是 setInterval 或 setTimeout 本身的不确定性，随着跳跃时间变长，页面显示的服务器
时间便有非常大的偏差，尤其在 IE 浏览器中（几十分钟内，Firefox偏差数秒，IE7偏差数分钟）。&lt;/p&gt;

&lt;p&gt;而大陆的实现则使用服务器的初始时间，但使用客户端的频率进行跳跃（并在 1 秒中检查 10 次，
避免跳秒问题）。这样即使经过长时间的跳跃，同样能保持较高的准确度。但问题是，当客户端
时间发生修改时，所谓的服务器时间也会收到影响。&lt;/p&gt;

&lt;p&gt;于是我结合两者各自的优点，避开他们的缺点，实现了一个 &lt;a href=&quot;https://github.com/hotoo/Chronos&quot;&gt;校时器&lt;/a&gt;。
他使用客户端的跳秒，但是当客户端发生时间不正常的跳跃时，自动修正客户端和服务器端之间的
时间差。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>用 Dropbox 做私有 Git 服务器</title>
   <link href="http://blog.hotoo.me/post/git-on-dropbox.html"/>
   <updated>2010-11-12T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/git-on-dropbox</id>
   <content type="html">&lt;h1&gt;用 Dropbox 做私有 Git 服务器&lt;/h1&gt;

&lt;p&gt;这几记录一下如何做一个本地版本库，关键命令是：&lt;code&gt;git clone --bare test test.git&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir test
cd test
git init

# for Windows.
echo NUL &amp;gt; README
# for Unix-like.
touch README

git add .
git commit -m &quot;first commit.&quot;

cd ..
git clone --bare test test.git

# for Windows.
mkdir &quot;D:\My Dropbox\codes\repositories&quot;
copy test.git &quot;D:\My Dropbox\codes\repositories&quot;
# for Unix-like
mkdir ~/Dropbox/codes/repositories
mv test.git ~/Dropbox/codes/repositories

cd test
# for Windows.
git remote add &quot;file:///D:\My Dropbox\codes\repositories\test.git&quot;
# for Unix-like.
git remote add origin file:///Users/{name}/Dropbox/codes/repositories/test.git

vi README
git add .
git commit -m &quot;make changes.&quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://roylez.heroku.com/2010/01/16/git-dropbox.html&quot;&gt;用dropbox做私有git服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.williamyao.com/archives/232&quot;&gt;方便而又强大：本地 Git 操作完全指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://andre.engelbrechtonline.net/blog/2010/04/22/hosting-git-repo-dropbox/&quot;&gt;Hosting a Git Repo on Dropbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forums.dropbox.com/topic.php?id=23772&quot;&gt;GitBox - Git repository hosting inside Dropbox folders&lt;/a&gt;
 &lt;a href=&quot;https://github.com/karalabe/gitbox&quot;&gt;@github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>“方便”的副本</title>
   <link href="http://blog.hotoo.me/post/the-duplicate-element.html"/>
   <updated>2010-10-27T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/the-duplicate-element</id>
   <content type="html">&lt;h1&gt;“方便”的副本&lt;/h1&gt;

&lt;p&gt;在整理《&lt;a href=&quot;form-in-action.md&quot;&gt;Form 表单最佳实践&lt;/a&gt;》的时候，想起了功能相同，
分居在页面上、下两地的孪生元素。于是在 Twitter ，各个群里询问大家对于搜索引擎
页面底部这个副本搜索框的实际使用情况。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;【调查/询问】：搜索引擎一般都在结果页上、下都提供搜索框，请问实际 较常使用
下面这个搜索框的用户有多少呢，你常用吗？下面的这个搜索框究竟多有用？&amp;lt;br /&amp;gt;
[@twitter](https://twitter.com/hotoo/status/28867350319)&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
实际上你有多常用这个搜索框？撇开其他的顾虑。&amp;lt;br /&amp;gt;
[@twitter](https://twitter.com/hotoo/status/28867805472)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到了蛮多的回馈，各方理由颇多，不一而足。总体来说，还是几乎不用的居多，
用的较少、或是还算常用的两者比起来都不相伯仲。&lt;/p&gt;

&lt;p&gt;我个人的情况是：多数情况下，都不自觉的滚轮/&lt;PageUp&gt;到页面顶部，然后在上面的
输入框输入关键字进行搜索。然后（有时候）想起下面其实也可以搜索，会有些懊恼。
而早先 Google 和 Firefox 右上角的搜索框的配合很好的时候，则直接使用这个浏览器
搜索框的居多。&lt;/p&gt;

&lt;p&gt;听说 gnome 里右键点击滚动条上面的箭头，就直接滚上去了。&lt;/p&gt;

&lt;p&gt;有用 vimperator 插件，默认是上面的搜索框，所以下面的基本用不上。&lt;/p&gt;

&lt;p&gt;也有说用 AutoPager 插件，无视下面的搜索框（不过这是翻页，跟使用下面的搜索框
还是不一样的）。&lt;/p&gt;

&lt;p&gt;有些用户是直接使用 Google Chrome 的多功能地址栏。&lt;/p&gt;

&lt;p&gt;而支持使用下面的搜索框者，理由就都差不多了：浏览到底部，没有找到，想换关键字
就直接在下面输入了。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vote.sparklit.com/web_poll.spark?pollID=1121516&quot;&gt;调查&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;思考&lt;/h2&gt;

&lt;p&gt;搜索引擎下面的搜索框用的较少的一个原因：结果列表并不长。&lt;/p&gt;

&lt;p&gt;多数情况下，或者多数人几乎都非常少用下面的搜索框，可以精简掉吗？呃，对于本来
就很简洁的搜索引擎来说，他至少没什么负面影响，另外支持这个输入框的用户同样会
站出来捍卫他们的利益。如果还有其他更好的方式，他们还会反对吗？&lt;/p&gt;

&lt;p&gt;Vim-like 的 &lt;code&gt;/&lt;/code&gt; 快捷键用来快速定位到上面的输入框、或者激活悬浮搜索框到显耀的
位置，是一种更好的方式吗？（毕竟要更换搜索关键字，就要使用键盘的吧？）&lt;/p&gt;

&lt;h2&gt;延伸&lt;/h2&gt;

&lt;p&gt;不仅仅是搜索框：
1. 翻页链接。&lt;br /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;有人说翻页放到上面是一种变态，在下面没有翻页链接的情况下。&amp;lt;br /&amp;gt;
恩~~，是够变态的。&amp;lt;br /&amp;gt;
个人认为放在下面比较合适，上面的就不必了。
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;类似在线音乐列表的全选/反选复选框。&lt;br /&gt;
 支持 +Shift 多选也是一种方案。&lt;br /&gt;
 这个比较特殊，我个人的习惯是：&lt;br /&gt;
 功能(播放)按钮在上面时，使用上面的全选复选框；功能按钮在下面时，使用下面的
 全选复选框。&lt;br /&gt;
 对于 Gmail 这种上下都提供完全一致的全选复选框和功能按钮的情况，
 主要还是用上面的，记忆中，几乎每天都用的 Gmail，5 年来下面的复选框和功能按钮
 用过不超过 3 次。&lt;br /&gt;
 &lt;br /&gt;
 一般来说，一屏差不多可显示完的短列表，上面提供全选及功能按钮就可以了；
 对于非常长的列表，放置在底部可能比较合适。&lt;br /&gt;
 另外：对于不需要思考就很可能会选择全选的内容（如唱片专辑），可以在上、下
 都提供全选及功能按钮。&lt;/li&gt;
&lt;li&gt;一些打着方便的旗号，甚至跨页面的副本。&lt;br /&gt;
 有时候也许是好事，但遍地开花就不仅仅是未必了。&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Form 表单最佳实践</title>
   <link href="http://blog.hotoo.me/post/form-in-action.html"/>
   <updated>2010-10-27T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/form-in-action</id>
   <content type="html">&lt;h1&gt;Form 表单最佳实践&lt;/h1&gt;

&lt;h2&gt;前言&lt;/h2&gt;

&lt;p&gt;这份文档献给我身边某些可爱的 Java 工程师，感谢你们激怒了我 :)&lt;/p&gt;

&lt;p&gt;“Form 表单”其实是一种错误的叫法，Form 本身就是表单，不过这样叫似乎比较顺口。&lt;/p&gt;

&lt;p&gt;这里所谓的“最佳实践”只是标题党。&lt;/p&gt;

&lt;h2&gt;POST &amp;amp; GET&lt;/h2&gt;

&lt;p&gt;表单有一般使用 POST 或 GET 方式提交数据到服务器端，如果你理解这两个词，这里就
不再赘述了；如果不理解，那也没什么好讲的，就以下面通俗的“所见即所得”理解吧。&lt;/p&gt;

&lt;h3&gt;GET:&lt;/h3&gt;

&lt;p&gt;所谓 GET 方式，通俗的讲，就是地址栏可见所有提交的信息：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&quot;http://example.com/get.htm&quot; method=&quot;get&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; name=&quot;key&quot; value=&quot;value&quot; /&amp;gt;
    &amp;lt;input type=&quot;submit&quot; name=&quot;search&quot; value=&quot;搜索&quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个表单提交之后，地址栏就包含了所有的提交信息：
&lt;code&gt;http://example.com/get.html?key=value&amp;amp;search=%CB%D1%CB%F7&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以直接在地址栏修改：
action: 即 &lt;code&gt;http://example.com/get.html&lt;/code&gt; 部分。
data/param: 即 key=value&amp;amp;search=%CB%D1%CB%F7 这些参数部分。&lt;/p&gt;

&lt;p&gt;广义上，通俗的讲，包括地址栏上手写并回车，点击链接，或者 method=&quot;get&quot; 的表单，
以及通过 AJAX get 提交的都是 get 方式。get 请求，刷新时还是 get 请求。&lt;/p&gt;

&lt;h3&gt;POST:&lt;/h3&gt;

&lt;p&gt;通俗的讲，POST 就是地址栏看不到提交请求所带的数据（又称为“参数”）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&quot;http://example.com/post.html&quot; method=&quot;post&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; name=&quot;data&quot; /&amp;gt;
    &amp;lt;input type=&quot;submit&quot; value=&quot;提交&quot;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个表单提交之后，地址栏除了 &lt;code&gt;http://example.com/post.html&lt;/code&gt; 外不包含其他信息。&lt;/p&gt;

&lt;p&gt;广义上，通俗的讲，method=&quot;post&quot; 的表单，AJAX post 都是 post 方式。
post 提交后，刷新仍是 post 提交相同的数据。&lt;/p&gt;

&lt;h2&gt;编码(Encoding)&lt;/h2&gt;

&lt;p&gt;在客户端页面和服务器端程序编码不同时，提交数据非常容易出现编码问题，即所谓的
“乱码”。&lt;/p&gt;

&lt;p&gt;解决这个问题，可以多种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;最根本的，就是统一客户端和服务器端的编码。建议都使用 utf-8。&lt;br /&gt;
 目前服务器上均是使用 utf-8 接受数据，所以可以考虑统一使用 utf-8 编码，
 要做的有一下几点：

&lt;ul&gt;
&lt;li&gt;修改页面的 charset 设置&lt;/li&gt;
&lt;li&gt;.vm 文件本身保存为 utf-8 编码。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改编码设置：
milan-web-base-2.0-SNAPSHOT.jar\META-INF\webx\pipeline.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;valve class=&quot;com.alibaba.turbine.pipeline.SetLocaleValve&quot;
    defaultLocale=&quot;zh_CN&quot; defaultCharset=&quot;UTF-8&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;milan-web-base-2.0-SNAPSHOT.jar\META-INF\webx\webx-default.xml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;service name=&quot;VelocityService&quot;
    class=&quot;com.alibaba.service.velocity.DefaultVelocityService&quot; earlyInit=&quot;true&quot;&amp;gt;

    &amp;lt;property name=&quot;input.encoding&quot; value=&quot;UTF-8&quot;/&amp;gt;
    &amp;lt;property name=&quot;parser.pool.size&quot; value=&quot;100&quot;/&amp;gt;
    &amp;lt;property name=&quot;velocimacro.library&quot; value=&quot;macros.vm&quot;/&amp;gt;
&amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置 form 元素的 accept-charset 属性为服务器接收数据使用的编码。&lt;br /&gt;
 Hack in IE: &lt;code&gt;onsubmit=&quot;document.charset='utf-8';&quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过 JavaScript 的 &lt;code&gt;encodeURIComponent(key)&lt;/code&gt; 函数转码，一般用于 AJAX 提交。&lt;br /&gt;
 另有两个转码函数：&lt;code&gt;escape()&lt;/code&gt;, &lt;code&gt;encodeURI()&lt;/code&gt;&lt;br /&gt;
 解码函数分别是：&lt;code&gt;unescape()&lt;/code&gt;, &lt;code&gt;decodeURI()&lt;/code&gt;, &lt;code&gt;decodeURIComponent()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;onsubmit&lt;/h2&gt;

&lt;p&gt;Form 表单的 onsubmit 事件在表单真正向服务器发送请求之前执行，一般用于验证表单
的数据完整性和合法性。如果处理函数返回 false，则不向服务器发送请求。&lt;/p&gt;

&lt;p&gt;绑定 onsubmit 事件处理函数的方法有 3 种：
* 一般简单的页面，直接在 form 标签中添加 onsubmit 属性:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`&amp;lt;form onsubmit=&quot;return validater(this);&quot;&amp;gt;...&amp;lt;/form&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;按照“内容与行为分离”的思想，我们一般可以在 JavaScript 加载完成后对表单进行
  事件绑定：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//var form = document.getElementById(&quot;formId&quot;);
form.onsubmit = function(){
    if(ie){document.charset=&quot;utf-8&quot;;}
    return !!this[&quot;k&quot;].value;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更专业的事件绑定方法（考虑到兼容性问题，这里使用 jQuery 代码）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&quot;#formId&quot;).submit(function(){
    return this.k.value;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;普通提交数据的表单&lt;/h2&gt;

&lt;p&gt;对于普通提交数据的表单，比如新增、修改数据，使用 POST 方式提交数据即可。
删除的方式一般有两种：
1. 删除链接的 href 指向执行删除操作的地址，链接元素绑定 onclick 事件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;`&amp;lt;a href=&quot;del.html?id=1&quot; onclick=&quot;return window.confirm('确认删除？');&quot;&amp;gt;`&amp;lt;br /&amp;gt;
这是 GET 提交方式。绑定事件处理函数的技巧同上面的 onsubmit。
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;绑定 onclick 事件，并执行 AJAX 提交， return false；回调函数中可以使用动态
 更新 DOM 的方式或其他。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;呃，其实最好体验也许是：删除操作时不要求确认（弹出确认对话框），但在事后可以
执行 &lt;a href=&quot;cancel-vs-undo.html&quot;&gt;撤销&lt;/a&gt; 删除操作。&lt;/p&gt;

&lt;h2&gt;多个提交按钮的表单&lt;/h2&gt;

&lt;p&gt;某些时候，单个表单中可能存在 2 个及其以上的提交按钮。&lt;/p&gt;

&lt;p&gt;首先，考虑清楚这多个按钮是否真的都需要向服务器提交数据。像关闭，返回，后退，
或者失传已久的重置操作，就不要使用按钮了，至少不要使用绑定 onclick 并&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;form.action = &quot;back.html&quot;;
form.submit()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或 &lt;code&gt;location.href=&quot;back.html&quot;&lt;/code&gt; 这样的按钮。&lt;/p&gt;

&lt;p&gt;这些按钮在实践上使用链接来实现更好更简单：&lt;code&gt;&amp;lt;a href=&quot;back.html&quot;&amp;gt;后退&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对于确实需要多个提交操作的按钮，可以通过提交按钮的 name 来区分。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&quot;submit&quot; name=&quot;event_submit_do_publish&quot; value=&quot;发布&quot; /&amp;gt;
&amp;lt;input type=&quot;submit&quot; name=&quot;event_submit_do_draft&quot; value=&quot;保存为草稿&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;多个相同操作的表单&lt;/h2&gt;

&lt;p&gt;类似于搜索引擎结果页，页面上、下均有功能相同的搜索框（为方便用户使用，虽然
实际受惠的用户可能并不多），这两个搜索框分别由两个表单组成，但是可以统一使用
同一个 onsubmit 事件处理函数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form onsubmit=&quot;return validater(this);&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; name=&quot;k&quot; /&amp;gt;
    &amp;lt;input type=&quot;submit&quot; value=&quot;搜索&quot; /&amp;gt;
&amp;lt;/form&amp;gt;

搜索结果列表...

&amp;lt;form onsubmit=&quot;return validater(this);&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; name=&quot;k&quot; /&amp;gt;
    &amp;lt;input type=&quot;submit&quot; value=&quot;搜索&quot; /&amp;gt;
&amp;lt;/form&amp;gt;

function validater(form){
    return form[&quot;k&quot;].value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;搜索&lt;/h2&gt;

&lt;p&gt;搜索建议使用 GET 方式提交，过滤参数和当前页码这些信息全部带在地址中。
&lt;code&gt;http://example.com/search.html?k=keywrod&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;翻页链接（上一页，下一页...）
&lt;code&gt;http://example.com/search.html?k=keywrod&amp;amp;p=2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;翻页系统一般还允许用户手动输入页码并直接跳转到指定页，这个翻页表单建议和
搜索表单分离，分别是不同的 form 组成。&lt;/p&gt;

&lt;p&gt;下面是搜索关键字 key 并翻页到第 2 页之后的状态：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form action=&quot;search.html&quot; method=&quot;get&quot;&amp;gt;
    &amp;lt;input type=&quot;text&quot; name=&quot;k&quot; value=&quot;key&quot; /&amp;gt;
    &amp;lt;input type=&quot;submit&quot; value=&quot;搜索&quot; /&amp;gt;
&amp;lt;/form&amp;gt;

搜索结果列表...

&amp;lt;a href=&quot;search.html?k=key&amp;amp;p=1&quot;&amp;gt;上一页&amp;lt;/a&amp;gt;
&amp;lt;a href=&quot;search.html?k=key&amp;amp;p=3&quot;&amp;gt;下一页&amp;lt;/a&amp;gt;
&amp;lt;form action=&quot;search.html&quot; method=&quot;get&quot;&amp;gt;
    &amp;lt;input type=&quot;hidden&quot; name=&quot;k&quot; value=&quot;key&quot; /&amp;gt;
    &amp;lt;input type=&quot;text&quot; name=&quot;p&quot; value=&quot;3&quot; /&amp;gt;
    &amp;lt;input type=&quot;submit&quot; value=&quot;翻页&quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;可爱的陋习&lt;/h2&gt;

&lt;p&gt;不要在表单中为 button 类型的按钮绑定 onclick 事件，并在事件处理函数中执行
&lt;code&gt;form.submit();&lt;/code&gt; ，然后费尽心思实现“在输入框中也可以回车提交”这种蠢事。&lt;/p&gt;

&lt;p&gt;也不要为了&lt;del&gt;解决&lt;/del&gt;避免编码问题而在 onsubmit 处理函数中做
&lt;code&gt;input.value=encodeURIComponent(input.value);&lt;/code&gt;，然后为了避免这个带来的
“乱码(被编码的字符)瞬间出现在表单中”而把搜索框做成隐藏域，再附加一个傀儡
输入框用于输入。&lt;/p&gt;

&lt;h2&gt;Demo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://hotoo.me/labs/form-search.html|&quot;&gt;搜索表单演示&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vim 爱好者联系资料收集</title>
   <link href="http://blog.hotoo.me/post/vimmer-contact.html"/>
   <updated>2010-10-11T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vimmer-contact</id>
   <content type="html">&lt;h1&gt;Vim 爱好者联系资料收集&lt;/h1&gt;

&lt;p&gt;希望通过一些形式让 Vim 爱好者联系更紧密，于是收集 Vim 爱好者的联系资料，并通过
较好的形式展现出来。&lt;/p&gt;

&lt;p&gt;目前是通过 &lt;a href=&quot;http://hotoo.me/Vimmer/vimmer.html&quot;&gt;面板形式&lt;/a&gt; 展现，
并有计划通过 Google 地图展现全国 Vim 爱好者的分布情况。&lt;/p&gt;

&lt;p&gt;资料收集方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork &lt;a href=&quot;http://github.com/hotoo/Vimmer&quot;&gt;Vimmer&lt;/a&gt; 项目(最好是 gh-pages 分支)，并加入自己的资料到 vimmer.json 中。&lt;/li&gt;
&lt;li&gt;填写 &lt;a href=&quot;https://spreadsheets.google.com/viewform?formkey=dHdHM3R6S25PZDVON05yRjhWWWw2MkE6MQ&quot;&gt;Google Spread Sheets&lt;/a&gt; ^GFW出没注意^。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;邮件发送到 hotoo.cn+vim[AT]gmail.com ，请将 &lt;code&gt;[AT]&lt;/code&gt; 替换成 &lt;code&gt;@&lt;/code&gt;，保留 &lt;code&gt;+vim&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 常用的网络ID *
 必填，可以是中文或英文，例如我的：hotoo

 真实姓名
 选填

 昵称
 常用的网络昵称，例如我的：闲耘™。选填，默认与ID相同。

 电子邮箱 *
 建议使用 Gmail 邮箱，请使用 [AT] 代替 @ 符合，例如：hotoo.cn[AT]gmail.com

 博客/个人主页
 请输入完整的URL地址(以 http 或其他的协议开头)，例如：`http://hotoo.github.com`

 Twitter ID
 在 twitter.com 上的 ID，可以不带 @ 起始。例如我的 @hotoo

 Flickr ID
 在 flickr.com 上注册的 ID，例如：hotoo

 Delicious ID
 在 delicious.com 注册的 ID，例如 hotoo

 Github ID
 在 github.com 注册的 ID。

 豆瓣(Douban) ID
 在 douban.com 注册的 ID

 其他网站上注册的 ID
 如果你其他网站上注册的 ID，并希望分享出来，请填写在这里。
 网站和ID以冒号分隔，多个站的 ID 请以分号分隔。
 例如 about.me:hotoo; blueidea.com:hotoo

 Gravatar ID
 在 gravatar.com 注册并上传头像，根据邮箱地址计算MD5的值就是 Gravatar ID。
 例如：2fdef0a77e4bf207e3ec30660e7896e8

 目前所在地
 可以输入简要的地址，例如：杭州(Hangzhou)；
 也可以输入详细的联系地址，甚至卫星坐标，可以通过Google地图获得。

 其他
 你希望留下的任何资料信息。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>IE6 的 CSS:hover 伪类</title>
   <link href="http://blog.hotoo.me/post/css-hover-for-ie6.html"/>
   <updated>2010-09-15T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/css-hover-for-ie6</id>
   <content type="html">&lt;h1&gt;IE6 的 CSS:hover 伪类&lt;/h1&gt;

&lt;p&gt;众所周知，IE6 不支持 a:hover 以外的 CSS 伪类，解决办法一般有 3 种方案：&lt;/p&gt;

&lt;h2&gt;使用 JavaScript 事件&lt;/h2&gt;

&lt;p&gt;直接使用 JavaScript 的 onmouseover/onmouseenter 和 onmouseout/onmouseleave
事件进行针对性开发，这大概没什么好详细介绍的。&lt;/p&gt;

&lt;h2&gt;使用 CSS 表达式&lt;/h2&gt;

&lt;p&gt;辅以 CSS 表达式中 JScript 同样也有 onmouseover/onmouseenter 和
onmouseout/onmouseleave 事件，用以实现 :hover 效果。&lt;br /&gt;
注意：其中冒号之前的事件名称可以随意，关键是 expression() 里面的事件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ul li{
    onmouseout:expression(onmouseout=function(){this.style.backgroundColor=''});
    onmouseover:expression(onmouseover=function(){this.style.backgroundColor='yellow'});
}
ol li{
    onmouseleave:expression(onmouseleave=function(){this.style.backgroundColor=''});
    onmouseenter:expression(onmouseenter=function(){this.style.backgroundColor='yellow'});
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过应该说使用 CSS class 是更好的实践。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;table tr{
  onmouseout:expression(onmouseout=function(){
    try{this.className=this.className.replace(' hover','')}catch(ex){}});
  onmouseover:expression(onmouseover=function(){this.className+=' hover'});
}
table tr.hover td{background:yellow;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;onmouseout 事件处理函数中加了 try/catch 是为了避免 IE5.5 因为不支持 &lt;code&gt;replace()&lt;/code&gt;
而报脚本错误。当然为了避免这个错误，还是其他的实现方式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;table tr{
    onmouseenter:expression(onmouseout=function(){
        var c=this.className, h=' hover', l=h.length;
        var s=c.indexOf(h);
        this.className=c.substring(0,s)+c.substr(s+l);
    });
    onmouseleave:expression(onmouseover=function(){this.className+=' hover'});
}
table tr.hover td{background:yellow;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;使用 CSS behavior 行为&lt;/h2&gt;

&lt;p&gt;使用 &lt;a href=&quot;http://www.xs4all.nl/~peterned/csshover.html&quot;&gt;Whatever:hover&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.xs4all.nl/~peterned/htc/csshover3.htc&quot;&gt;csshover3.htc&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!--[if lte IE 6]&amp;gt;
&amp;lt;style type=&quot;text/css&quot;&amp;gt;
body{behavior:url(&quot;csshover3.htc&quot;); }
&amp;lt;/style&amp;gt;
&amp;lt;![endif]--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/andyyukun/archive/2007/07/03/1676963.aspx&quot;&gt;强大的CSS表达式 -- expression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.planabc.net/2009/09/21/optimization_of_css_eexpression/&quot;&gt;CSS Expression 的优化&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>实现文本转语音</title>
   <link href="http://blog.hotoo.me/post/tts.html"/>
   <updated>2010-09-12T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/tts</id>
   <content type="html">&lt;h1&gt;实现文本转语音&lt;/h1&gt;

&lt;p&gt;又是心血来潮，想把文本转为语音朗读，通过听书的方式来多重利用时间。分心听书有效
吗，未可知也。不过还是想折腾下，心血来潮嘛。&lt;/p&gt;

&lt;p&gt;刚开始以为一定需要下载个语音软件，用它将文本转成语音，通过调节字词之间的停顿，
来达到较好的视听效果。&lt;/p&gt;

&lt;p&gt;因为很久以前有折腾过使用 Word 实现语音朗读的事，朗读效果非常不好，所以不想下载
那些大型的朗读软件，总感觉他们读出来的声音会让人恶心死。&lt;/p&gt;

&lt;p&gt;群里请教了一下有没有推荐的，得到 &lt;a href=&quot;http://www.eguidedog.net/&quot;&gt;eGuideDog&lt;/a&gt;，但是
似乎仍然不甚理想，后来又发现了 &lt;a href=&quot;http://www.neospeech.com/&quot;&gt;NeoSpeech&lt;/a&gt;，里面提供
的试听效果非常好，尤其是日语朗读，跟真人朗读差不多。&lt;/p&gt;

&lt;p&gt;于是继续寻找相关资料，在 VeryCD 上得到这些：&lt;a href=&quot;http://www.verycd.com/topics/2780296/&quot;&gt;1&lt;/a&gt;
&lt;a href=&quot;http://www.verycd.com/topics/2799359/&quot;&gt;2&lt;/a&gt; &lt;a href=&quot;http://www.verycd.com/topics/2780296/&quot;&gt;3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;后来看到一张语音属性的图片，才进控制面板明白了一些事情。&lt;/p&gt;

&lt;p&gt;看到有通过微软拼音输入法3.0的语音功能实现的介绍，不过我在微软拼音3.0和 2007 中
都没有找到对应菜单项。&lt;/p&gt;

&lt;p&gt;通过 &lt;a href=&quot;http://blog.miyui.net/work/text-to-speech-in-excel-2007/&quot;&gt;Excel 2007中的文本到语音&lt;/a&gt;
知道 Excel 内置了语音朗读的功能，但是 Word 没有找到对应的。便找到了
&lt;a href=&quot;http://bbs.cfan.com.cn/viewthread.php?tid=661265&quot;&gt;office2007文本到语音命令的问题&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;详细步骤&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;安装语音引擎，我下载的 &lt;a href=&quot;http://www.verycd.com/topics/2799359/&quot;&gt;这个&lt;/a&gt;，解压安装
 会自动设置控制面板里的语音选择，可以进入“控制面板”-&gt;“语音”-&gt;“语音选择”，
 系统默认是 &quot;Microsoft Sam&quot;，可以改为刚安装的语音，试听一下。&lt;/li&gt;
&lt;li&gt;打开 Excel (2007)，点击左上角（靠右侧的）三角下拉菜单（鼠标悬浮提示是
 “自定义快速访问工具栏”-&gt;“其他命令”-&gt;“不在功能区的命令”，
 添加“朗读单元格”和“朗读单元格 - 停止朗读单元格”，
 在单元格中输入文本，点击“朗读单元格”就会听到发声。&lt;/li&gt;
&lt;li&gt;要想让 Word 朗读发声，可以使用自定义宏：

&lt;ol&gt;
&lt;li&gt;按 &lt;code&gt;&amp;lt;Alt-F11&amp;gt;&lt;/code&gt; 启动 Visual Basic 编辑器。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建名为 &lt;code&gt;ReadRec&lt;/code&gt; 的宏：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; Sub ReadSelection()
     Excel.Application.speech.speak Selection
 End Sub
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单击VBE编辑器窗口中的“工具”菜单，选择“引用”命令，在弹出的
 “引用-Normal”对话框中选择“Microsoft Excel 12.0 Object Library”复选框。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;确定，关闭Visual Basic编辑器返回Word窗口。&lt;/li&gt;
&lt;li&gt;右击工具栏，选择“自定义”命令，切换到“命令”选项卡，在“类别”中
 选择“宏”，将命令中的“Normal NewMacros.ReadSelection”拖放到工具栏中。&lt;/li&gt;
&lt;li&gt;现在在 Word 里选中文本，点击工具栏刚加入的按钮，就可以朗读选中文本了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;参考 &amp;amp; 延伸阅读&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.neospeech.com/&quot;&gt;NeoSpeech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.verycd.com/topics/2780296/&quot;&gt;NeoSpeech 语音下载(VeryCD)&lt;/a&gt;
 &lt;a href=&quot;http://www.verycd.com/topics/2799359/&quot;&gt;2&lt;/a&gt;
 &lt;a href=&quot;http://www.verycd.com/topics/2780296/&quot;&gt;3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.miyui.net/work/text-to-speech-in-excel-2007/&quot;&gt;Excel 2007中的文本到语音&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bbs.cfan.com.cn/viewthread.php?tid=661265&quot;&gt;office2007文本到语音命令的问题&lt;/a&gt;
 &lt;a href=&quot;http://blog.exiaoxue.cn/200815213528.html&quot;&gt;2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blogimg.chinaunix.net/blog/upfile2/081226113747.rar&quot;&gt;Word 从文本到语音工具栏&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://club.excelhome.net/viewthread.php?tid=419686&amp;amp;page=1&amp;amp;extra=page%3D1&quot;&gt;Word音标助手COM加载项(更新2009.6.30版)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gmw.cn/content/2005-03/18/content_198426.htm&quot;&gt;Word 2003如何实现文本朗读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://masnun.com/blog/2009/12/14/googles-text-to-speech-api-a-php-wrapper-class/&quot;&gt;Google's Text to Speech API : A PHP Wrapper Class&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>检测浏览器地址栏</title>
   <link href="http://blog.hotoo.me/post/hashchange.html"/>
   <updated>2010-09-05T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/hashchange</id>
   <content type="html">&lt;h1&gt;检测浏览器地址栏 #hash 的变化&lt;/h1&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://ajaxian.com/archives/emulating-onhashchange-without-setinterval&quot;&gt;Emulating onhashchange without setInterval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://benalman.com/projects/jquery-hashchange-plugin/&quot;&gt;jQuery hashchange event&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/DOM/window.onhashchange&quot;&gt;window.onhashchange - MDC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>取消 vs. 撤销</title>
   <link href="http://blog.hotoo.me/post/cancel-vs-undo.html"/>
   <updated>2010-09-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/cancel-vs-undo</id>
   <content type="html">&lt;h1&gt;取消 vs. 撤销&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;对于提交之前的操作，可以取消(Cancel)；
 比如点击某区域可以即时编辑，但是可以取消这个操作。&lt;/li&gt;
&lt;li&gt;但是提交时（真正提交之前）不要弹出确认对话框（让用户可以取消）。
 这时候应该使用撤销功能。
 比如删除时不要弹出确认对话框，但是删除后（至少在某时间段之内）可以撤销(Undo)
 这个删除操作。&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;参考 &amp;amp; 延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.alibuybuy.com/22500.html&quot;&gt;谈谈取消键与撤消键的使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Diff 模式下，让光标直接跳转到被修改的文本处</title>
   <link href="http://blog.hotoo.me/post/jump-to-difftext.html"/>
   <updated>2010-08-30T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/jump-to-difftext</id>
   <content type="html">&lt;h1&gt;Diff 模式下，让光标直接跳转到被修改的文本处&lt;/h1&gt;

&lt;p&gt;Vim 的 Diff 功能非常优秀。有一个我非常喜欢的特性是：完全相同的地方，
会被折叠隐藏起来(上下文除外)。还可以很方便的在各个差异点之间做出修改合并和快速跳转。&lt;/p&gt;

&lt;p&gt;不过默认的 &lt;code&gt;[c&lt;/code&gt; 和 &lt;code&gt;]c&lt;/code&gt; 两种跳转方式，目前只能跳转到差异点的行首。对于只修改了
行内部分文本内容（一般底色是浅红色）时，我更希望直接跳转到有变化的文本（底色是
深红色的部分）上。&lt;/p&gt;

&lt;p&gt;感谢 tocer ，我初步实现了两个版本 &lt;a href=&quot;http://gist.github.com/556810&quot;&gt;gits:556810&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;v1: 仅支持跳转到 DiffChange 的第一个 DiffText&lt;/li&gt;
&lt;li&gt;v2: 支持 DiffChange 行多个 DiffText&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;参考&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:h synIDattr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:h diff_hlID&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/hotoo/status/22227282177&quot;&gt;@twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/vim-cn/browse_thread/thread/8a0b5b7ed335782b&quot;&gt;vimdiff 的跳转&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://superuser.com/questions/145940/vimdiff-jump-to-next-difference-inside-line&quot;&gt;vimdiff: Jump to next difference inside line?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>隐私权</title>
   <link href="http://blog.hotoo.me/post/about-Privacy.html"/>
   <updated>2010-08-22T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/about-Privacy</id>
   <content type="html">&lt;h1&gt;隐私权&lt;/h1&gt;

&lt;p&gt;团购的时候我在邮件和 Google Docs 向所有参与团购的团友公布了各自的详细信息
（包括联系信息）。&lt;/p&gt;

&lt;p&gt;我的公布的理由有两个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;方便自己统一管理，和团友随时审阅；&lt;/li&gt;
&lt;li&gt;方便同城团友可以合并快递单。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;有团友很不高兴。于是我特地看了关于隐私权的一些资料。&lt;/p&gt;

&lt;p&gt;根据 &lt;a href=&quot;http://zh.wikipedia.org/zh-cn/%E9%9A%90%E7%A7%81%E6%9D%83&quot;&gt;维基百科全书：隐私权&lt;/a&gt;
和一些其他相关资料上的描述，我似乎并没有侵犯任何隐私权。
我没有把大家的手机号写在电线杆子上，并附上“办证”之类的字样；
没有入侵并偷窥大家的电子邮件；也没有找到大家的收货地址后非法闯进去。。。&lt;br /&gt;
&lt;em&gt;以上纯属玩笑话 :D&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;隐私权目前来说还是有一些模棱两可的地方，虽然我主观上是支持保护隐私权的。
我也有隐私，但只要不是把我和家人的资料公布在网上，或者提供给某些混蛋，
以至于我和家人会受到严重的骚扰和恐吓之外，还是没有什么的。&lt;/p&gt;

&lt;p&gt;朋友和一些相对比较可靠的人知道我的联系方式，是件好事吧。虽然我小时候曾经很傻的
想住到深山老林里去隐居。&lt;/p&gt;

&lt;p&gt;个人认为：有限区域范围内的个人或家庭联系方式，算不上是隐私。
你的邻居知道你家的门牌号码；公司、学校拥有你的详细资料；
商家索取买家发货地址；快递员直接打你的手机；
参加团购的成员知道你的联系资料。。。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;好吧，虽然我可能没有犯罪，但是我错了。我只是想偷懒才使用群发邮件的方式的。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;另外居然有蛋疼的律师控告电信说“来电显示”损害了其隐私权。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;你没有号码怎么打电话给他人；你拿到他人的号码，是否就侵犯了其隐私？&lt;/li&gt;
&lt;li&gt;你打电话给他人，这他人没有知情权，无权知道是哪个混蛋在骚扰他？&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;另外也有人控告移动、联通公司所谓的“恢复”收取来电显示的费用是单方面修改合同、
强制消费行为。想都不用想，最终败诉。&lt;/p&gt;

&lt;p&gt;现在好了，你可以关闭来电显示，每月省了 6 块还是几块钱。也就是说现在开通来电显示需要
每月多付几块钱，而这在以前是免费的。&lt;/p&gt;

&lt;p&gt;我有一个很不希望相信的“阴谋论”：这起官司是电信或移动公司幕后主使的案件。&lt;/p&gt;

&lt;p&gt;我对隐私权的概念还是有点不清晰，希望有人能写出清晰简洁的资讯出来，比如翻译关于隐私权
的论文和辩论过程之类，而不要像法律条文一样直接给我们模糊不清的强制性规定和结论。&lt;/p&gt;

&lt;p&gt;p.s. 希望有生之年不要看见“非法持有他人隐私”的罪名或者大帽出现。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>【已结束】关于团购庆祝 Vim 7.3 正式发布的 Tee</title>
   <link href="http://blog.hotoo.me/post/vim73-tee.html"/>
   <updated>2010-08-14T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim73-tee</id>
   <content type="html">&lt;h1&gt;【已结束】 &lt;del&gt;关于团购庆祝 Vim 7.3 正式发布的 Tee&lt;/del&gt;&lt;/h1&gt;

&lt;p&gt;我在 Twitter 上随意说了句相关的 &lt;a href=&quot;https://twitter.com/hotoo/status/21126325142&quot;&gt;意向&lt;/a&gt;，
便有不少回应表示也愿意加入，我本想最好由某个懂行或者牛人来发起活动，我参加就好了，
不过目前看来，我只能自己扛起这个重担。&lt;/p&gt;

&lt;h2&gt;关于 Tee&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;初步设想：&lt;br /&gt;
&lt;em&gt;正面&lt;/em&gt; ：印 Vim 的 Logo。 &lt;a href=&quot;http://vote.sparklit.com/web_poll.spark?pollID=1119325&quot;&gt;投票&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;背面&lt;/em&gt; ：印 &lt;code&gt;:wq!&lt;/code&gt; 或者 &lt;code&gt;:help!&lt;/code&gt; 命令，下面还印上版本信息 &lt;code&gt;:version&lt;/code&gt;。
&lt;a href=&quot;http://vote.sparklit.com/web_poll.spark?pollID=1119327&quot;&gt;投票&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;右手袖子&lt;/em&gt; ：印 &lt;code&gt;:version&lt;/code&gt; 信息。&lt;br /&gt;
&lt;em&gt;颜色&lt;/em&gt; ：商家唯一指定白色。&lt;br /&gt;
P.S. 还有网友提议将自己的 vimrc 打上去，创意不错，但这是一此集体活动。
不过大家还是可以提议一些非常具有 Vim 特色的代码。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://www.flickr.com/photos/hotoo/4893442809/%20http://farm5.static.flickr.com/4141/4893442809_aedb31676a_b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;商家答应可以有 3 种不同的图案，但是考虑到实际操作太麻烦，包括下订单，印刷和发货都非常容易出错，
所以我们最好是尽量少的使用不同图案。如果有喜欢但是没有选择的图案，各位可以各取所需自行单独印刷。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.newsmth.net/bbsanc.php?path=%2Fgroups%2Fcomp.faq%2FVIM%2Ffriends%2Fhuodong%2F2005%2FM.1115718502.M0&quot;&gt;滇狐很久之前提供的版本&lt;/a&gt;
  （&lt;a href=&quot;http://edyfox.codecarver.org/html/vim-logo-sim.png&quot;&gt;简易版&lt;/a&gt; ^[1]^
  &lt;a href=&quot;http://edyfox.codecarver.org/html/vim-logo-bas.png&quot;&gt;普通版&lt;/a&gt; ^[2]^
  &lt;a href=&quot;http://edyfox.codecarver.org/html/vim-logo-en.png&quot;&gt;高级版&lt;/a&gt; ^[3]^）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zazzle.com/vim+tshirts&quot;&gt;Vim T-shirts, Shirts and Custom Vim Clothing&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zazzle.com/apaga_y_vamonos_tshirt-235860815670055282&quot;&gt;Tee 图片&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zazzle.com/vim_tshirt-235495517240839065&quot;&gt;2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;另外感谢 &lt;a href=&quot;http://f2e.us&quot;&gt;阿阳&lt;/a&gt; 还提供了一份他找视觉设计师修改过，上次印 Tee 的 AI 文件。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Tee 的质量&lt;/h2&gt;

&lt;p&gt;商家是阿阳推荐的，他之前有在这家定制过，说是材料“比较厚，质量还不赖的”。&lt;br /&gt;
而商家说：“我们这只有一种220克的，是属于好的，差的么就是180 200克的。那二种我们没有在做的。”&lt;/p&gt;

&lt;h2&gt;关于费用&lt;/h2&gt;

&lt;p&gt;跟淘宝一个定制 Tee 的 &lt;a href=&quot;http://1tshirt.taobao.com/&quot;&gt;商家&lt;/a&gt; 联系，50件以上的话
双面印刷最低能到 &lt;del&gt;28.00&lt;/del&gt; &lt;del&gt;26.00&lt;/del&gt; 25.00 元/件（&lt;del&gt;单面 25.00&lt;/del&gt;），目前有 50 多人，
如果有更大的数量级，估计还可以更便宜，到时候我再商量，40 件估计需要一周才可以出货；
Tee 可以直接发到每个人手中，考虑到运费，我提议同城的统一由一个人负责签收并发放，
这样顺便还可以线下认识几个朋友，同城运费最终 AA 制；自己愿意单独付运费的不在此列。&lt;/p&gt;

&lt;p&gt;如果看中这店家的其他 Tee，参加团购的朋友也同样可以以团购的价格购买，直接在
店家商品上拍即可，记得给商家说明情况，另外还要报上我的旺旺ID（请来邮件索取）。&lt;/p&gt;

&lt;p&gt;周六我会公布所有同城信息，到时候希望同城统一签收的可以联系我。&lt;br /&gt;
除非专门指定，默认情况下，均发或到个人签收。&lt;br /&gt;
学校老师或学生会稍晚发货，以确保各位能在学校签收。&lt;/p&gt;

&lt;p&gt;目前不支持快递到国外，如果有国内的地址，请使用国内地址。&lt;br /&gt;
到台湾的快递费是 35.00 元，3 天之内可以到。&lt;/p&gt;

&lt;p&gt;目前还没有确定最终购买人数和打折尺度，而且费用收取方式上也还没有确定，大家可以自由选择
预付定金，或者我先垫资金的方式，都没有关系的。下周末等情况确定后我会公布收款方式，
请大家静候佳音。&lt;/p&gt;

&lt;p&gt;费用收取方式主要采取支付宝收款，或者银行卡汇款。&lt;/p&gt;

&lt;p&gt;店家提供的快递运费对照表：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt; 运输方式 &lt;/th&gt;
&lt;th&gt; 1公斤内 &lt;/th&gt;
&lt;th&gt; 加重/公斤 &lt;/th&gt;
&lt;th&gt; 运送到                                                                                                                    &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; 快递     &lt;/td&gt;
&lt;td&gt; 8.00    &lt;/td&gt;
&lt;td&gt; 5.00      &lt;/td&gt;
&lt;td&gt; 安徽                                                                                                                      |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; 快递     &lt;/td&gt;
&lt;td&gt; 5.00    &lt;/td&gt;
&lt;td&gt; 2.00      &lt;/td&gt;
&lt;td&gt; 上海，江苏，浙江                                                                                                          |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; 快递     &lt;/td&gt;
&lt;td&gt; 10.00   &lt;/td&gt;
&lt;td&gt; 8.00      &lt;/td&gt;
&lt;td&gt; 北京,天津,河北,山西,辽宁,吉林,黑龙江,福建,江西,山东,河南,湖北,湖南,广东,广西,海南,重庆,四川,贵州,云南,陕西,甘肃,青海,宁夏 |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; 快递     &lt;/td&gt;
&lt;td&gt; 15.00   &lt;/td&gt;
&lt;td&gt; ?         &lt;/td&gt;
&lt;td&gt; 大陆其他地区                                                                                                              |&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; 速运     &lt;/td&gt;
&lt;td&gt; 35.00   &lt;/td&gt;
&lt;td&gt; ?         &lt;/td&gt;
&lt;td&gt; 台湾                                                                                                                      |&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;默认使用圆通快递，台湾地区使用顺风速运，3天内可以到达。&lt;/p&gt;

&lt;h2&gt;【已结束】 &lt;del&gt;关于报名&lt;/del&gt;&lt;/h2&gt;

&lt;p&gt;为避免报名时间过短，或等待时间过长，初步计划报名截止到下周末，如果中途有事没有时间也没有关系，
只要确认购买，我可以预付费用的。&lt;/p&gt;

&lt;p&gt;一旦确定购买名单，我们就开始下订单订货。&lt;/p&gt;

&lt;p&gt;由于我第一次搞这样的活动，有经验的老师请一定多多指导。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;注意&lt;/em&gt; ：如果确定要购买，请务必将你 [http://www.flickr.com/photos/hotoo/4890597770/ 需要的尺码]，
&lt;em&gt;邮件地址&lt;/em&gt; ，实际的 &lt;em&gt;收货地址&lt;/em&gt; ， &lt;em&gt;邮编&lt;/em&gt; 和 &lt;em&gt;收件人姓名&lt;/em&gt; 。&lt;br /&gt;
最好还有即时联系方式，比如手机，快递可能需要。&lt;br /&gt;
请确认这些信息能直接联系到你，收件人能收到货。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;如果在截止时间之前没有给出详细联系地址导致无法发货的，一律认为不参加这次活动，请谅解。&lt;/p&gt;

&lt;p&gt;如果有些没所谓的小失误的话请多多包含，大失误我会尽力承担的。&lt;/p&gt;

&lt;h2&gt;活动结束语&lt;/h2&gt;

&lt;p&gt;这次活动过程几经波折，把我、团友，和商家都折腾的够呛。主要是由于我经验不足造成，
事先的准备工作也不够，导致有数次变更，甚至有些不尽如人意。&lt;/p&gt;

&lt;p&gt;不管怎么样，报名活动总算是结束了，我这里不再接收任何报名，仍希望购买的朋友可以尝试
&lt;a href=&quot;http://item.taobao.com/auction/item_detail.htm?item_num_id=7174622420&quot;&gt;这个链接&lt;/a&gt;，
运气好的话仍然可以得到团购的待遇。&lt;/p&gt;

&lt;p&gt;最后：这样的人生经历一次就够了，谢谢大家。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SQL LIKE 查询的一个问题</title>
   <link href="http://blog.hotoo.me/post/about-sql-like.html"/>
   <updated>2010-08-13T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/about-sql-like</id>
   <content type="html">&lt;h1&gt;SQL LIKE 查询的一个问题&lt;/h1&gt;

&lt;p&gt;在做用户管理的时候，用户表(users) 有一个字段(dept)用来存储用户所在部门的信息，
字段的值一般是这样的，各级部门间使用横杠分隔：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XX宝-技术部
XX宝-技术部-数据仓库
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们的系统有一个根据用户所在部门进行过滤的功能，所以我们用了类似下面的查询语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM users WHERE dept LIKE &quot;XX宝-技术部%&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的性能还好，但是今天发现一个问题是，当有两个部门名称很相似，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;XX宝-CEO
XX宝-CEO办公室
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时在查询 &lt;code&gt;XX宝CEO&lt;/code&gt; 的时候就会把 &lt;code&gt;XX宝-CEO办公室&lt;/code&gt; 的用户也查询出来。&lt;/p&gt;

&lt;p&gt;于是想到正则表达式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT *
FROM users
WHERE REGEXP_LIKE(dept, &quot;^XX宝-CEO$&quot;)
OR REGEXP_LIKE(dept, &quot;^XX宝-CEO-[\w\-]+&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;合并正则表达式的另一解：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT *
FROM users
WHERE REGEXP_LIKE(dept, &quot;^XX宝-CEO($|-[\w\-]+)&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;杯具的性能问题。&lt;/p&gt;

&lt;p&gt;突然想到&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT *
FROM users
WHERE dept=&quot;XX宝-CEO&quot;
OR dept LIKE &quot;XX宝-CEO-%&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;于是简单有效的解决了这个问题。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>用 gvim 比较 git diff</title>
   <link href="http://blog.hotoo.me/post/gitdiff-with-vim.html"/>
   <updated>2010-08-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/gitdiff-with-vim</id>
   <content type="html">&lt;h1&gt;用 gvim 比较 git diff&lt;/h1&gt;

&lt;h2&gt;for Windows&lt;/h2&gt;

&lt;p&gt;参考 [http://gist.github.com/502217 gist:502217]&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在用户目录下的 .gitconfig 中加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [diff]
   external = git_diff_wrapper.bat
 [pager]
   diff =
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建 git_diff_wrapper.bat 文件放到 $PATH 目录下，内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; path\to\gvim.exe -d &quot;%2&quot; &quot;%5&quot;


 gvim -d &quot;$2&quot; &quot;$5&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 注意其中的 path\to\ 要改为 gvim.exe 所在目录。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;for Linux&lt;/h2&gt;

&lt;p&gt;参考 &lt;a href=&quot;http://technotales.wordpress.com/2009/05/17/git-diff-with-vimdiff/&quot;&gt;Git Diff with Vimdiff&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>整合状态按钮和导向按钮</title>
   <link href="http://blog.hotoo.me/post/integrate-guide-button-and-status-button.html"/>
   <updated>2010-07-31T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/integrate-guide-button-and-status-button</id>
   <content type="html">&lt;h1&gt;整合状态按钮和导向按钮&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://hotoo.github.com/labs/integrate-guide-button-and-status-button.html&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.uesee.com/?p=143&quot;&gt;状态按钮和导向按钮&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>遍历字符的性能</title>
   <link href="http://blog.hotoo.me/post/performance-for-each-char.html"/>
   <updated>2010-07-29T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/performance-for-each-char</id>
   <content type="html">&lt;h1&gt;遍历字符的性能&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;s.charAt(i)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.split(&quot;&quot;)[i]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a href=&quot;http://hotoo.github.com/labs/preformance-for-each-chars.html&quot;&gt;Test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在 IE7, Firefox3.6.8, Chrome5.0, Safari5.0, Opera10 上测试，
除了 Firefox 之外，所有的浏览器均是第 2 种表达式更快速。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用 calendar.vim</title>
   <link href="http://blog.hotoo.me/post/use-vim-calendar.html"/>
   <updated>2010-07-23T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/use-vim-calendar</id>
   <content type="html">&lt;h1&gt;使用 calendar.vim&lt;/h1&gt;

&lt;p&gt;最初看到明城 &lt;a href=&quot;http://www.gracecode.com/archives/674/&quot;&gt;推荐使用 Vim Calendar 插件&lt;/a&gt;，
于是很小白的尝试了一下，然后就没有了然后。&lt;/p&gt;

&lt;p&gt;最初尝试的过程已经基本忘记，恍惚记得在 Calendar 的日期上回车，窗户貌似在右侧窗口
打开的（后来发现我记错了，这是 Vimwiki-diary的支持）；至于明城推荐设置的 &lt;code&gt;ca&lt;/code&gt;
快捷键，后来才知道是与 text-object 冲突的。&lt;/p&gt;

&lt;p&gt;再后来就用上了 Vimwiki，做个人 Wiki 之余，还用它的 diary 写日记。总体来说，Vimwiki
的 diary 是比较强大的，我甚至还提了几个被接受的建议。&lt;/p&gt;

&lt;p&gt;但是随着使用的深入，发现通常 Wiki 项目下是不需要 diary 的，而 diary 也基本不需要
Wiki，把这两种整合在一起也许就是个错误。我们真正需要的是一个更强的 Calendar diary，
而不是 Wiki 附加的 diary 支持。&lt;/p&gt;

&lt;p&gt;如果真的希望 Vimwiki 有 diary 的支持，我也希望这个 diary 和 Wiki 是相互独立的，
Wiki 项目中无需 diary，diary 无需包含在每个 Wiki 项目里。&lt;/p&gt;

&lt;p&gt;另外基于 Wiki 的原因，所有的 diary-wiki 文件都放在同一个目录下，当 diary 日渐增多，
目录变得臃肿起来也不是什么好事。&lt;/p&gt;

&lt;p&gt;我需要的是一个更强的 Vim Calendar。基于这个想法，我便尝试着手增强 Calendar。
目前已经支持 &lt;code&gt;:CalendarSearch&lt;/code&gt; 和更好的 diary 打开方式。更多的想法见
&lt;a href=&quot;http://github.com/hotoo/calendar-vim/blob/master/TODO&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在 Vim 页签中打开文件</title>
   <link href="http://blog.hotoo.me/post/open-files-in-vim-tabs.html"/>
   <updated>2010-06-25T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/open-files-in-vim-tabs</id>
   <content type="html">&lt;h1&gt;在 Vim 页签中打开文件&lt;/h1&gt;

&lt;p&gt;这两天折腾让文件在 Vim 的新页签中打开（类似 Firefox 等浏览器）的特性，
发现让文件在页签中打开有非常多的优点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打开文件的速度更快（免去了启动 Vim 的时间）&lt;/li&gt;
&lt;li&gt;占用内存等资源更少（单个 Vim 窗口比多个窗口节省资源）&lt;/li&gt;
&lt;li&gt;任务栏更节省可用空间（不过 Windows 7 中还未支持任务栏多页签内容预览）。&lt;/li&gt;
&lt;li&gt;编辑过程中文件间可以快速跳转，缓冲区也可以共享。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;我参考前辈的方案，做了更 &lt;a href=&quot;http://github.com/hotoo/Edit-with-Vim-tabs&quot;&gt;自动化的处理脚本&lt;/a&gt;，
将其中的 edit.with.vim.tabs.reg 合并到注册表就可以了。如果想还原为用窗口打开的方式，
再将 edit.with.vim.window.reg 合并到注册表中。&lt;/p&gt;

&lt;p&gt;这个设置会让双击默认编辑器为 Vim 的文件，或者右键 -&gt; Edit with Vim 都将文件在页签中
打开。开始用着确实挺爽，右键菜单中也没有了那些动态增加进来的已打开的文件的菜单项。
不过后来又发现不止如此，连“用 Vim 比较”(Diff with Vim)的项也没了。&lt;/p&gt;

&lt;p&gt;重装了好几次，终于搞清楚了一些东西。注册表的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[HKEY_CLASSES_ROOT\*\shellex\ContextMenuHandlers\gvim]
@=&quot;{51EEE242-AD87-11d3-9C1E-0090278BBD99}&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是关键项，他根据 gvimext.dll 来附加右键菜单的动态项，包括 Diff with Vim。
如果你不想有默认的新窗口中打开文件的“用 Vim 编辑 (&amp;amp;V)”(Edit with Vim)，
就需要把上面这项删除，不过这也会殃及 Diff with Vim。&lt;/p&gt;

&lt;p&gt;我实在没有特别好的办法，我在注册表中做了一个 &quot;Diff with Vim&quot; 的项，但是这个菜单命令
会针对选中的多个文件各自执行一次；而不是执行一次，并将多个选中的文件作为参数
一次传入。这个肯定也能做到的，参看 Vim 默认的行为，和 WinMerge 等就知道，只求高手来帮忙了。&lt;/p&gt;

&lt;p&gt;我目前不希望没有这个选中多个文件并 Diff 的功能（虽然它连快捷键都没有），
所以只好保留了这个注册表项，为了避免快捷键冲突，只好修改了在页签中打开文件的
注册表项的快捷键。&lt;/p&gt;

&lt;p&gt;或者用其他的文本比较工具，如 WinMerge，BeyondCompare。这样的话，直接删除上面的注册表项。&lt;/p&gt;

&lt;p&gt;如果你有好主意，快来快来告诉我 : )&lt;/p&gt;

&lt;h2&gt;其他&lt;/h2&gt;

&lt;p&gt;另外给页签加上序号是非常有用的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set guitablabel=%N.%t
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;尤其是在设置了这样的快捷键之后：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;imap &amp;lt;C-tab&amp;gt; :tabnext&amp;lt;cr&amp;gt;
nmap &amp;lt;C-tab&amp;gt; :tabnext&amp;lt;cr&amp;gt;
imap &amp;lt;C-S-tab&amp;gt; :tabprevious&amp;lt;cr&amp;gt;
nmap &amp;lt;C-S-tab&amp;gt; :tabprevious&amp;lt;cr&amp;gt;
imap &amp;lt;M-1&amp;gt; &amp;lt;Esc&amp;gt;:tabfirst&amp;lt;cr&amp;gt;
nmap &amp;lt;M-1&amp;gt; :tabfirst&amp;lt;cr&amp;gt;
imap &amp;lt;M-2&amp;gt; &amp;lt;Esc&amp;gt;2gt
nmap &amp;lt;M-2&amp;gt; 2gt
imap &amp;lt;M-3&amp;gt; &amp;lt;Esc&amp;gt;3gt
nmap &amp;lt;M-3&amp;gt; 3gt
imap &amp;lt;M-4&amp;gt; &amp;lt;Esc&amp;gt;4gt
nmap &amp;lt;M-4&amp;gt; 4gt
imap &amp;lt;M-5&amp;gt; &amp;lt;Esc&amp;gt;5gt
nmap &amp;lt;M-5&amp;gt; 5gt
imap &amp;lt;M-6&amp;gt; &amp;lt;Esc&amp;gt;6gt
nmap &amp;lt;M-6&amp;gt; 6gt
imap &amp;lt;M-7&amp;gt; &amp;lt;Esc&amp;gt;7gt
nmap &amp;lt;M-7&amp;gt; 7gt
imap &amp;lt;M-8&amp;gt; &amp;lt;Esc&amp;gt;8gt
nmap &amp;lt;M-8&amp;gt; 8gt
imap &amp;lt;M-9&amp;gt; &amp;lt;Esc&amp;gt;9gt
nmap &amp;lt;M-9&amp;gt; 9gt
imap &amp;lt;M-0&amp;gt; &amp;lt;Esc&amp;gt;:tablast&amp;lt;cr&amp;gt;
nmap &amp;lt;M-0&amp;gt; :tablast&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多，但是不推荐(因为跟默认快捷键冲突)的快捷键设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot; [CONFLICT] back tag history
imap &amp;lt;C-t&amp;gt; &amp;lt;Esc&amp;gt;:tabnew&amp;lt;cr&amp;gt;
nmap &amp;lt;C-t&amp;gt; :tabnew&amp;lt;cr&amp;gt;
&quot; [CONFLICT] window shortcut key.
imap &amp;lt;C-w&amp;gt; &amp;lt;Esc&amp;gt;:tabclose&amp;lt;cr&amp;gt;
nmap &amp;lt;C-w&amp;gt; :tableclose&amp;lt;cr&amp;gt;
imap &amp;lt;C-S-w&amp;gt; &amp;lt;Esc&amp;gt;:tabonly&amp;lt;cr&amp;gt;
nmap &amp;lt;C-S-w&amp;gt; :tabonly&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;更新 (2010/6/26)&lt;/h2&gt;

&lt;p&gt;今天想折腾一下 gvimext.dll ，因为这个是问题的本源，只要将它里面的“用 Vim 编辑”(Edit with Vim)加上参数，
改成新页签中打开的方式就好了，而且选中多个文件进行比较，好像也必须使用动态连接库的方式实现，
于是找到了这个 &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1720&quot;&gt;gvimext.dll&lt;/a&gt;
它让 Vim 7 支持新页签中打开。试用了一下，感觉有点啰嗦了，它让新窗口和新页签打开文件的方式共存，并且快捷键
仍然设置在新窗口打开的菜单项上。不过里面带有源码，我们可以改成自己喜欢的方式。&lt;/p&gt;

&lt;h2&gt;参考链接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.ubuntu.org.cn/index.php?title=Vimfaq&amp;amp;amp;variant=zh-cn&quot;&gt;Vimfaq - Ubuntu 中文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://easwy.com/blog/archives/vim-tips-windows-open-file-in-tab/&quot;&gt;vi/vim使用技巧: 在标签页中打开文件 (windows)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://support.microsoft.com/kb/310516/zh-cn&quot;&gt;如何通过使用注册项 (.reg) 文件添加、修改或删除注册表子项和值&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://davidvielmetter.com/?p=1094&quot;&gt;Context menu issues with gVim in Windows 7 x64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Add_open-in-tabs_context_menu_for_Windows&quot;&gt;Add open-in-tabs context menu for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Show_tab_number_in_your_tab_line&quot;&gt;Show tab number in your tab line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hi.baidu.com/mimimo/blog/item/e742243f3fe865e755e72351.html&quot;&gt;为gVim Portable添加右键菜单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://liyanrui.is-programmer.com/posts/1857.html&quot;&gt;Vim 的标签页功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Vim 自动补全成对的括号和引号</title>
   <link href="http://blog.hotoo.me/post/vim-autocomplete-pairs.html"/>
   <updated>2010-06-20T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim-autocomplete-pairs</id>
   <content type="html">&lt;h1&gt;Vim 自动补全成对的括号和引号&lt;/h1&gt;

&lt;p&gt;炫日分享了一个 &lt;a href=&quot;http://aoyme.wordpress.com/2010/05/31/%E5%9C%A8vim%E4%B8%AD%E5%B0%86%E6%8B%AC%E5%8F%B7%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%EF%BC%9A/&quot;&gt;自动补全成对的括号&lt;/a&gt;
的脚本，【注】：原文代码中引号被转义成了中文引号，下面是修正后的脚本。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;inoremap ( ()&amp;lt;ESC&amp;gt;i
inoremap ) &amp;lt;c-r&amp;gt;=ClosePair(')')&amp;lt;CR&amp;gt;
inoremap { {}&amp;lt;ESC&amp;gt;i
inoremap } &amp;lt;c-r&amp;gt;=ClosePair('}')&amp;lt;CR&amp;gt;
inoremap [ []&amp;lt;ESC&amp;gt;i
inoremap ] &amp;lt;c-r&amp;gt;=ClosePair(']')&amp;lt;CR&amp;gt;
inoremap &amp;lt; &amp;lt;&amp;gt;&amp;lt;ESC&amp;gt;i
inoremap &amp;gt; &amp;lt;c-r&amp;gt;=ClosePair('&amp;gt;')&amp;lt;CR&amp;gt;

function ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return &quot;\&amp;lt;Right&amp;gt;&quot;
    else
        return a:char
    endif
endf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;经启发我增加了对括号和引号更为智能的补全支持，
不过中文全角的括号和引号目前无法通过映射来实现，
对于转义的符号对的支持不佳。&lt;/p&gt;

&lt;p&gt;支持 2000 行以内（可以根据系统性能自行配置）文档的全局括号对识别能力。
也就是 2000 行以内的文档，支持跨行的括号对智能匹配能力；当文档行数超出预设值，
则使用行内括号对智能补全。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenPair:

&lt;ol&gt;
&lt;li&gt; 如果当前行的括号已经成对匹配，则自动补全右括号 &lt;code&gt;(I)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; 如果左括号比右括号多，则自动补全  &lt;code&gt;I(()&lt;/code&gt; &lt;code&gt;(I()&lt;/code&gt; &lt;code&gt;((I)&lt;/code&gt; &lt;code&gt;(()I&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; 如果左括号比右括号少，&lt;br /&gt;
  &lt;code&gt;I())&lt;/code&gt; 原样输出，不自动补全&lt;br /&gt;
  &lt;code&gt;(I))&lt;/code&gt; 同上&lt;br /&gt;
  &lt;code&gt;()I)&lt;/code&gt; 同上&lt;br /&gt;
  &lt;code&gt;())I&lt;/code&gt; 自动补全：左括号较少，且光标之后字符串进行一次递归上面的条件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;ClosePair:

&lt;ol&gt;
&lt;li&gt; 如果光标之后是一个右括号，向右移动一列 &lt;code&gt;(I)&lt;/code&gt; &lt;code&gt;((I)&lt;/code&gt; &lt;code&gt;(I))&lt;/code&gt; &lt;code&gt;()I)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; 否则原样输出。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;代码见 &lt;a href=&quot;http://gist.github.com/449512&quot;&gt;gist: 449512&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;更新 (2010/6/24)&lt;/h2&gt;

&lt;h2&gt;最后更新 (2010/7/9)&lt;/h2&gt;

&lt;h2&gt;相关脚本&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2754&quot;&gt;delimitMate.vim&lt;/a&gt;
(&lt;a href=&quot;http://github.com/Raimondi/delimitMate&quot;&gt;src&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Making_Parenthesis_And_Brackets_Handling_Easier&quot;&gt;Making Parenthesis And Brackets Handling Easier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>在 Google Maps 的街景视图里看实况足球</title>
   <link href="http://blog.hotoo.me/post/3d-game-in-google-maps.html"/>
   <updated>2010-06-16T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/3d-game-in-google-maps</id>
   <content type="html">&lt;h1&gt;在 Google Maps 的街景视图里看实况足球&lt;/h1&gt;

&lt;p&gt;我承认我标题党了，这只是我的一个 idea 而已，并没有实际实现。&lt;/p&gt;

&lt;p&gt;前几天有新闻称日本要申办 2022 年的世界杯，承诺将以 3D 转播赛况，
还以全息技术将赛况投影到足球场上，任何一个足球场都可以模拟现场实况，
并准备研发全息电视，把赛况以全息技术在家庭里播放。
而实际上，日本在某些音乐会已经使用全息技术的实际应用
（X-Japan的 &lt;a href=&quot;http://v.youku.com/v_show/id_XOTE2MDcxMTY=.html&quot;&gt;Art of Life&lt;/a&gt;
的 15:36 至 19:13 之间都是以全息技术
制作的演出，直接观看19:10，然后等几秒钟就会明白）。&lt;/p&gt;

&lt;p&gt;我的个神啊，这是一种怎样的未来。&lt;/p&gt;

&lt;p&gt;在看南非世界杯的几个球场街景视图时，我突然想到如果模拟实况足球游戏，
根据比赛实况，将比赛情形在类似的视图中展现出来，会爽到什么程度啊。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=zh-CN&amp;amp;geocode=&amp;amp;q=%E4%BC%8A%E4%B8%BD%E8%8E%8E%E7%99%BD%E6%B8%AF&amp;amp;sll=35.86166,104.195397&amp;amp;sspn=51.335062,89.033203&amp;amp;brcurrent=3,0x0:0x0,0%3B5,0,0&amp;amp;ie=UTF8&amp;amp;hq=&amp;amp;hnear=%E4%BC%8A%E4%B8%BD%E8%8E%8E%E7%99%BD%E6%B8%AF,+%E4%B8%9C%E5%BC%80%E6%99%AE,+%E5%8D%97%E9%9D%9E&amp;amp;ll=-33.937975,25.599529&amp;amp;spn=0.006533,0.014956&amp;amp;t=h&amp;amp;z=17&amp;amp;layer=c&amp;amp;cbll=-33.937919,25.59958&amp;amp;panoid=Q5GeWsE39Ki147z_1qBkAQ&amp;amp;cbp=12,8,,0,-0.94&quot;&gt;伊丽莎白港&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=zh-CN&amp;amp;geocode=&amp;amp;q=%E5%86%85%E5%B0%94%E6%96%AF%E6%99%AE%E9%9B%B7%E7%89%B9&amp;amp;sll=35.86166,104.195397&amp;amp;sspn=52.945838,89.033203&amp;amp;ie=UTF8&amp;amp;hq=&amp;amp;hnear=%E5%86%85%E5%B0%94%E6%96%AF%E6%99%AE%E9%9B%B7%E7%89%B9,+%E6%99%AE%E9%A6%AC%E8%98%AD%E5%8A%A0%E7%9C%81,+%E5%8D%97%E9%9D%9E&amp;amp;ll=-25.461787,30.929775&amp;amp;spn=0.007343,0.014956&amp;amp;t=h&amp;amp;z=17&amp;amp;brcurrent=3,0x0:0x0,0%3B5,0,0&amp;amp;layer=c&amp;amp;cbll=-25.461933,30.929288&amp;amp;panoid=H1O5Rhjde8l9QhaO75Z6Vg&amp;amp;cbp=12,11.73,,0,2.74&quot;&gt;内尔斯普雷特&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;p.s. 现在的 Google Maps 街景视图，比 Google Earth 的 3D 模型要爽要逼真，
不过街景视图无法以 3D 效果看鸟瞰图。&lt;/p&gt;

&lt;h2&gt;延伸阅读：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnbeta.com/articles/111966.htm&quot;&gt;日本申办2022世界杯 许诺提供3D比赛直播&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnbeta.com/articles/113031.htm&quot;&gt;日本研发全息电视：用激光投射飘浮图像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.org.cn/tag/google-trike&quot;&gt;Google Trike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhaiyx.com/2010/03/miku-3d-concert/&quot;&gt;初音未来3D全息演唱会 | 宅映像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XMTY3OTM2MDEy.html&quot;&gt;初音未来全息演唱会&lt;/a&gt; - 初音ミク&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>用 Google Code 管理与发布 Wiki</title>
   <link href="http://blog.hotoo.me/post/vimwiki-google-code.html"/>
   <updated>2010-05-20T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vimwiki-google-code</id>
   <content type="html">&lt;h1&gt;用 Google Code 管理与发布 Wiki&lt;/h1&gt;

&lt;p&gt;由于 &lt;a href=&quot;Dropbox-died-in-China.html&quot;&gt;Dropbox 的墙掉&lt;/a&gt;，https 协议访问 dl 或 dl-web 子域
的方法也随之失效，虽然可以通过修改 hosts 来继续同步文件，但是 Public 目录再也
不能输出文化了。&lt;/p&gt;

&lt;p&gt;我之前 &lt;a href=&quot;use-vimwiki-for-blog.html&quot;&gt;在 Dropbox Public 目录搭建的博客和 Wiki 系统&lt;/a&gt;
也无法在线浏览了，为了能够继续 辅助文化局输出文化，我便利用万恶的资本主义国家
的 Google Code 来为我们服务了。&lt;/p&gt;

&lt;p&gt;由于可以继续使用 Dropbox 来自动同步私有文件，所以可以保持 .wiki 文件在 Dropbox
中，其他自动同步的软件也可以用来做类似的事情。&lt;/p&gt;

&lt;p&gt;将 Vimwiki 的 &lt;code&gt;path_html&lt;/code&gt; 修改为 Google Code 的某个 svn 或 Hg 目录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:vimwiki_list = [{...},
    \ {...},
    \ {...},
    \ {
        \ 'path'        : 'D:\My Dropbox\blog',
        \ 'path_html'   : 'D:\hotoo\blog',
        \ 'html_header' : 'D:\My Dropbox\blog\template\header.tpl',
        \ 'html_footer' : 'D:\My Dropbox\blog\template\footer.tpl'
    \ }
    \ ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然 Vimwiki 目前的 toHTML 方法还不支持重新生成仅更新过的 wiki 文件，但是 svn
可以判断文件是否有真正被修改过。&lt;/p&gt;

&lt;p&gt;另外 http://hotoo.googlecode.com/svn/wiki 目录存放的是 Google Code 的 Wiki 文件，
这里面的 wiki 文件无需通过 Vimwiki 导出 HTML，Google Code 会自动完成这一工作，
并可以通过 http://code.google.com/p/hotoo/w/list 浏览。而 Vimwiki 是 Google Code
Wiki 语法的一个子集，所以基本可以天衣无缝的配合使用。&lt;/p&gt;

&lt;p&gt;这也是不错的一个方案，除了需要 commit 之外，Google Code 比 Dropbox 的 Public
有过之而无不足，域名也是杠杠的。&lt;/p&gt;

&lt;p&gt;另外不小心发现还有其他的托管方案，让防火墙筑的更高些吧，当局者把自己当猪圈养起来
比较好，做个专职的脑子又笨，目光又短浅的墙脚之猪也可以提高幸福指数的。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>让 Vim 支持 LOG 文件</title>
   <link href="http://blog.hotoo.me/post/log-syntax-4-vim.html"/>
   <updated>2010-05-13T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/log-syntax-4-vim</id>
   <content type="html">&lt;h1&gt;让 Vim 支持 LOG 文件&lt;/h1&gt;

&lt;p&gt;日志(.LOG)文件的基本上无章可循，各成风格。所以一般都是在纯文本模式下查看。
以普通文本的方式显示日志，基本没有清晰度和阅读舒适感。&lt;/p&gt;

&lt;p&gt;不过一般来说，日志中是会有日期时间（格式非常多样），错误产生的地址，行号，
列号，日志类型（错误(ERROR)，信息(INFO)，调试(DEBUG)，警告(WARN)等）&lt;/p&gt;

&lt;p&gt;据此，我为 .LOG 文件定义了一些语法着色的规则，将
&lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vimfiles/syntax/log.vim&quot;&gt;log.vim&lt;/a&gt;
放至 &lt;code&gt;$VIM\vimfiles\syntax&lt;/code&gt;(Windows) 目录，并在 &lt;code&gt;$VIM\vim72\filetype.vim&lt;/code&gt; 中加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;au BufNewFile,BufRead *.log         setf log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在就可以在 Vim 中较清晰的查看 .LOG 日志了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm5.static.flickr.com/4051/4623711702_81901313f9_o.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你也可以针对自己的实际情况，来自定义语法。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dropbox 的墙掉</title>
   <link href="http://blog.hotoo.me/post/Dropbox-died-in-China.html"/>
   <updated>2010-05-10T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/Dropbox-died-in-China</id>
   <content type="html">&lt;h1&gt;Dropbox 的墙掉&lt;/h1&gt;

&lt;p&gt;其他的都不想说，只希望 Dropbox 的开放性能更强大，比如 API 或者分布式
的云技术再上台阶，第三方服务风起云涌，像 Twitter 那样。我深信：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;开放到极致的世界，无视大独裁者。&lt;br /&gt;&lt;br /&gt;
让 XX 去万岁，我只要真理，真理使我们自由。&lt;br /&gt;&lt;br /&gt;
-- 闲耘™&lt;/p&gt;&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>老家</title>
   <link href="http://blog.hotoo.me/post/hometown.html"/>
   <updated>2010-05-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/hometown</id>
   <content type="html">&lt;h1&gt;老家&lt;/h1&gt;

&lt;p&gt;明月，蛙鸣，&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>天目山拓展活动</title>
   <link href="http://blog.hotoo.me/post/outreach-activities-2010-04.html"/>
   <updated>2010-04-17T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/outreach-activities-2010-04</id>
   <content type="html">&lt;h1&gt;天目山拓展活动&lt;/h1&gt;

&lt;p&gt;公司组织了一次天目山野外拓展活动，收益良多，这里稍事记录。&lt;/p&gt;

&lt;p&gt;“信任背摔”：如果信任队友，笔直倒下，这无论对自己，对队友都是最佳选择。
在队友的保护下倒下90度并不会造成什么伤害，8个队友的平均分摊也使受力最小。
但如果不信任队友，撅着屁股坐下去，队友不堪其苦，手可能会受伤，因为承受
不住而将自己扔在地上，自己也会摔的很惨。&lt;/p&gt;

&lt;p&gt;感受：把适当的工作放手交给队友，信任他们，自己可以得到最大程度的释放，
队友也可以表现到最好。否则自己心力交瘁，队友也不堪其苦。&lt;/p&gt;

&lt;p&gt;“齐头并进”：我们小组获得了最大程度的失败，中途两次中断排头有一定的责任，
但各位队友心力不齐是更大的问题，而最大的毛病是不能保持平和的心态，很好的
势头，但急于求成，越走越快，直至完全失控，乱掉方寸。&lt;/p&gt;

&lt;p&gt;“天桥”（真正的名称未知，具体是爬上10米高架，从断桥跳跃抓住单杠）：据教练
说最快速度是从爬上到跳下总共14秒，我第一次玩这个，作为压阵选手，我准备挑战
一下，让同事用我的手机秒表记时，可惜他不是很熟练，没记上，说大概是25秒，
看来还是有差距。这个游戏最刺激的是下落那一刻，负责保险绳的教练，非常好玩，
他说了，只负责队员的生命安全，其他不管，弄哭了好几个女生（不包括在上面还
没有开跳就开哭的）。我在自由下落那一刻，眼前一片模糊，四肢没有知觉，不知道
有没有很挫的蜷缩。&lt;/p&gt;

&lt;p&gt;“电网”：我第一个出发，在队友的帮助下从下面的窟窿安全穿过，然后帮助几乎
所有队友通过，好累，也揩了好多油，美女都是我抱过来的，很多男的也是（挫）。&lt;/p&gt;

&lt;p&gt;经验：第一个需要身体适中（不是太壮大，但身体较强壮，比如我 ：D）；再辅助
几个能派上用场的男队员过来，中间把所有女队员抱过来，瘦的要留在最后，并且
一定要记得要在下面给他留一个可以钻过的窟窿。衣服要很小心注意。&lt;/p&gt;

&lt;p&gt;“逃生墙”：没有绳子辅助，要翻过 4.2米的高墙是不可能的，团队合作尤为重要。
我被选为第一个逃生者，踩在队友的大腿和肩膀上是不够的，我没想到他们会将我
托起来，太伟大了！我（被女生称为）“像猴子一样”迅速翻过，然后协助了超过一半
的队友完成逃生，先上来的又积极协助后面的队友，而下面作为基石的队友更是伟大，
有些基石托起了超过一半人。逃生 过程非常火爆，最终我们81人全部在 13分8秒完成了翻墙逃生。&lt;/p&gt;

&lt;p&gt;技巧：两名基石队员半蹲准备，逃生队员通过其大腿踩到肩膀上，然后身体贴这墙
直起身体，向上伸手求助（第一名队员千万不要通过弹跳来抓上面，这样基石队员
的肩膀非常容易受伤），翻墙时脚的协助非常重要，侧身攀延。最后一个队员的逃生
最为困难，本来准备让我倒挂救援的，结果据说是让其抓住倒数第二名队员的脚
拉上来的，我没有看到，不过人多力量大，这个绝对可以做到。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vim 学习路线</title>
   <link href="http://blog.hotoo.me/post/Vim-tutor.html"/>
   <updated>2010-04-11T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/Vim-tutor</id>
   <content type="html">&lt;h1&gt;Vim 学习路线&lt;/h1&gt;

&lt;p&gt;因为是完全自学，身边没有这方面的导师，所以在真正入门之前，我是完全不理解 Vim
是个什么玩意的，其中最大的障碍，遇到的第一个问题就是：“我怎么输入文字？”&lt;/p&gt;

&lt;p&gt;鼠标乱点，双击，右键，胡乱击键，应该是偶尔击到 &quot;a&quot; 键上而进入插入模式，但是
当时觉得又无章可循。新手在找一款趁手的工具时，一般很少太有耐心的，尤其面对
这么怪异不可理解、还未接受的东西。这是个什么鸟玩意，我说，就离开了。&lt;/p&gt;

&lt;p&gt;所以第一个要点是，理解“多模式”编辑方式。&lt;/p&gt;

&lt;p&gt;能熟练进出插入模式并输入内容后，中文用户遇到的另一个重要问题就是编码问题了，
除非你直接拣了他人的 vimrc。Vim 的编码支持是非常好的，重要的是理解并设置好
Vim 的编码选项。&lt;/p&gt;

&lt;p&gt;这两个门槛跨过之后，对新手来说 Vim 就和其他编辑器（如Editplus，Notepate++等）
大致没什么差别了。&lt;/p&gt;

&lt;p&gt;我于此踏上了 Vim 之旅，进入疯狂的学习期。&lt;/p&gt;

&lt;p&gt;这个学习期是无章可循的，不过大致是先学习凌波微步，各种快速移动的技巧；找别人
的 vimrc 参考设置，命令，快捷键，自定义的键盘映射，看别人推荐的插件介绍并
亲身体验，搜索 Vim Wiki，看台湾大牛林佑安的 PPT，论坛和群组里交流学习，
搜索收集各种有趣、有用的小玩意。乱七八糟一堆东西，沉迷其中，不可收拾。&lt;/p&gt;

&lt;p&gt;逐渐的我也可以给新手一些指导帮助了，由于射手座，O型血的缘故，崇尚自由开放，在
力所能及的领域还算热心人，我便成了我。&lt;/p&gt;

&lt;p&gt;Vim 是一个大宝藏，里面有太多太多的宝贝，Vim doc 就是一本 Vim 的百科全书，对
Vim 的注解精悍而又无所不包，你几乎可以找到任何需要的帮助，如果实在找不到，
Vim Script 和 Wiki 上也有其他人非常多的智慧。&lt;/p&gt;

&lt;p&gt;不过对于普通用户，只需要掌握快速移动，文本对象，少量的寄存器，搜索、替换技巧，
和微量的宏技术，基本就差不离了，这些是最常用的技巧，可以大幅度提高编辑、阅读
效率。&lt;/p&gt;

&lt;p&gt;偶尔有一些特殊需求可以搜索或找人帮忙，如果喜欢，也可以学习脚本技术来扩展自己的
Vim。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>欢迎加入 Vim 的 Gtalk 群</title>
   <link href="http://blog.hotoo.me/post/Gtalk-group-for-Vim.html"/>
   <updated>2010-04-09T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/Gtalk-group-for-Vim</id>
   <content type="html">&lt;h1&gt;欢迎加入 Vim 的 Gtalk 群&lt;/h1&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;声明：&lt;/em&gt; 由于能力&amp;amp;精力有限，我已不再是 vim-cn@appspot.com 群管理员。&lt;br /&gt;
平时工作很忙，我已经退出这个群，无心参与这个群的讨论。&lt;br /&gt;
大家有什么想和我交流、分享的话题，欢迎来邮件交流。&lt;br /&gt;
&lt;br /&gt;
这篇日志的所谓群规，不再适用于 vim-cn@appspot.com ，对其管理员&amp;amp;群成员没有任何约束力。&lt;br /&gt;
&lt;br /&gt;
2011/10/22&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;欢迎加入 Vim Talks™(&lt;del&gt;vimcn@chatterous.com&lt;/del&gt; 已迁移到 vim-cn@appspot.com) 这个 Gtalk 群，
任何人可以随意加入，没有任何限制。&lt;/p&gt;

&lt;p&gt;给对 Vim 感兴趣的朋友推荐一些 &lt;a href=&quot;http://wiki.hotoo.me/Vim.html&quot;&gt;有用或有趣的资源&lt;/a&gt;。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;警告：&lt;/em&gt; 所有可用命令都已在 &lt;code&gt;//help&lt;/code&gt; 中列出，入群后请不要自作聪明尝试未知的命令，
给群其他成员带来无谓的打扰，谢谢。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;加入方法：&lt;/h2&gt;

&lt;p&gt;在 Gtalk 里加 &lt;code&gt;vim-cn@appspot.com&lt;/code&gt; 为好友，然后给大家打个招呼 :)&lt;/p&gt;

&lt;h2&gt;使用帮助(针对Gtalk)：&lt;/h2&gt;

&lt;p&gt;下面的命令，机器人会单独针对你进行回复，包括你的命令和回复的消息，都不会被其他
群成员接受到（除非你的命令有错误，被当作消息发送）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;help&lt;/code&gt;::         查看所有可用的命令。&lt;/p&gt;

&lt;p&gt;最新的命令前缀以横线 &lt;code&gt;-&lt;/code&gt; 开始（&lt;code&gt;help&lt;/code&gt; 命令可以不带前缀），你也可以修改为适合
自己的设置。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;更多内容参考 [http://io43.com/io43.GtalkGroup/cmds/] 和 [http://wiki.hotoo.me/Gtalk.html GTalk]。&lt;/del&gt;&lt;/p&gt;

&lt;h2&gt;《群规》&lt;/h2&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;自由开放，自重互爱。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;管理员不得将 vim-cn@appspot.com 设置为私有状态，保证入、退群都没有任何障碍。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;管理员不得以任何理由审查聊天信息，禁言、踢人须得至少 2 位管理员同意。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;允许偏见，不要求中立；但尽量不要有歧视，侮辱，诽谤或人身攻击行为。&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;允许闲聊，不禁止灌水，但抽水机除外，请至少言之有物。&lt;br /&gt;
   【注意】有技术话题时请积极参与，并暂停闲聊（可以去私聊）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;我之前也有试玩过将 vimcn@chattous.com 群设置为 Private，记得当时感觉非常不好，&lt;/del&gt;
&lt;del&gt;作为新用户会遇到很多麻烦。另外 Private 群也不出现在 chatterous.com 列表中，&lt;/del&gt;
&lt;del&gt;新人很难找到，@join 的时候也会遇到问题。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;之前的因为不了了之，没有记录和反思，偶尔手贱便会有“复辟”的念头，甚至还写了
&lt;a href=&quot;http://vimcn.sourceforge.net/passcode.php&quot;&gt;用来检验新用户的程序&lt;/a&gt;，完全违背了群组
创立之初所坚信的自由开放精神，和这个 &lt;a href=&quot;http://vote.sparklit.com/web_poll.spark/1117556&quot;&gt;投票&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;于是立此群规，约束管理员和群友的行为。以上为立群之根本，管理员不得私自修改，
必须经全部管理员同意，及群友投票数达到 50 票，并有 60% 以上的投票同意方可修订。&lt;/p&gt;

&lt;p&gt;群规细则视需要再补充。&lt;/p&gt;

&lt;!--1. 踢人往往不是很好的办法，鉴于本群的开放性，他可以继续加入进来，所以禁言是比较有效的方法。--&gt;


&lt;!--2. 禁言最多不得超过 24 小时，责任管理员负责解除禁言。--&gt;


&lt;!--3. 辩论，而不要争论。真理愈辩愈明。--&gt;


&lt;p&gt;&lt;em&gt;延伸阅读&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;“公民论坛”对话守则：&lt;br /&gt;
1989年的冬天，哈维尔等捷克知识分子在布拉格成立了“公民论坛”，制定了8条《对话守则》，
在街头巷尾、居住区、大学校园到处张贴，希望广为人知，以便监督。（1993年
&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/%E7%93%A6%E8%8C%A8%E6%8B%89%E5%A4%AB%C2%B7%E5%93%88%E7%BB%B4%E5%B0%94&quot;&gt;瓦茨拉夫·哈韦尔&lt;/a&gt;
当选捷克第一任总统。瓦茨拉夫·哈韦尔出生于1936年，作为一名持不同政见者，长期从事反对前政府的活动，
曾3次入狱。他是“&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/%E4%B8%83%E4%B8%83%E5%AE%AA%E7%AB%A0&quot;&gt;七七宪章&lt;/a&gt;”和“公民论坛”的创始人。）内容是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;对话的目的是寻求真理，不是为了斗争。&lt;/li&gt;
&lt;li&gt;不做人身攻击。&lt;/li&gt;
&lt;li&gt;保持主题。&lt;/li&gt;
&lt;li&gt;辩论时要用证据。&lt;/li&gt;
&lt;li&gt;不要坚持错误不改。&lt;/li&gt;
&lt;li&gt;要分清对话与只准自己讲话的区别。&lt;/li&gt;
&lt;li&gt;对话要有记录。&lt;/li&gt;
&lt;li&gt;尽量理解对方。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;(注：我没有找到原始出处，但我很认同。)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;《提问的智慧》&lt;/em&gt;&lt;br /&gt;
&lt;a href=&quot;http://wiki.woodpecker.org.cn/moin/AskForHelp&quot;&gt;简体中文&lt;/a&gt;
&lt;a href=&quot;http://www.linuxforum.net/doc/smartq-grand.html&quot;&gt;2&lt;/a&gt;
&lt;a href=&quot;http://mis.ndhu.edu.tw/docu/question.htm&quot;&gt;繁体中文&lt;/a&gt;
&lt;a href=&quot;http://www.catb.org/~esr/faqs/smart-questions.html&quot;&gt;En&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;独门绝技：&lt;/em&gt; 直接提问，最好一次描述清楚问题。不要预热说：“谁熟悉 XX？”&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/zh/Wikipedia:%E4%B8%8D%E8%A6%81%E4%BC%A4%E5%AE%B3%E6%96%B0%E6%89%8B&quot;&gt;不要伤害新手&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;== 技巧 ==
&lt;em&gt;群 LOGO&lt;/em&gt; &lt;br /&gt;
将下面（或者任何你喜欢）的图片保存到本地，到 Gmail 的联系人(Contacts)、或者你的客户端里修改群机器人的头像即可。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt; 白色背景                                                             &lt;/th&gt;
&lt;th&gt; 透明背景                                                             &lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt; &lt;img src=&quot;http://farm3.static.flickr.com/2683/4540127131_9304e4aac9_o.png&quot; alt=&quot;&quot; /&gt; &lt;/td&gt;
&lt;td&gt; &lt;img src=&quot;http://farm3.static.flickr.com/2726/4541741357_6670b23cd3_o.png&quot; alt=&quot;&quot; /&gt; |&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;&lt;em&gt;修改昵称&lt;/em&gt; &lt;br /&gt;
建议加入群组之后立即修改昵称，和 FID，一来可以标识和展现你的身份，二来可以避免长用户名好 FID 影响群聊效果。&lt;/p&gt;

&lt;!--*群统计*--&gt;


&lt;!--百合仙子为我们群做了一个统计分析工具： [http://www.lilydjwg.cjb.net:8081/lily/chat_vim/rank.html Chatterous Stat (rank)]--&gt;


&lt;h2&gt;缺陷 &amp;amp; 不足&lt;/h2&gt;

&lt;p&gt;不能像 QQ 一样方便的发送图片并直接预览。GTalk 已经支持发送文件，
而且在新版的 Pidgin 中发送图片也支持直接预览，这跟平台相关。
如果确实需要分享图片/截图，可以使用第三方的图片服务
（如 &lt;a href=&quot;http://www.flickr.com/&quot;&gt;Flickr&lt;/a&gt;，
&lt;a href=&quot;https://www.dropbox.com/&quot;&gt;Dropbox&lt;/a&gt; 的Public目录，
&lt;a href=&quot;http://www.yupoo.com/&quot;&gt;Yupoo&lt;/a&gt; 等），将图片所在的链接发送到群里即可。&lt;/p&gt;

&lt;p&gt;没有群空间，用来存储/分享文件。当然你同样可以使用第三方存储服务（&lt;a href=&quot;https://www.dropbox.com/&quot;&gt;Dropbox&lt;/a&gt;，
&lt;a href=&quot;http://sync.live.com/&quot;&gt;Windows Live Sync&lt;/a&gt; ^&lt;a href=&quot;http://skydrive.live.com/&quot;&gt;SkyDrive&lt;/a&gt;^，
&lt;a href=&quot;https://docs.google.com/&quot;&gt;Google Docs&lt;/a&gt; ^支持上传任意类型的文件^，
&lt;a href=&quot;http://rapidshare.com/&quot;&gt;RapidShare&lt;/a&gt; 等）来实现。&lt;/p&gt;

&lt;h2&gt;Gtalk 群的使用：&lt;/h2&gt;

&lt;p&gt;鉴于 Gtalk 的特殊性，大段代码最好不要作为聊天内容直接发送，推荐的方法是，
将代码贴到专业的第三方网站（如 &lt;a href=&quot;http://snipt.org/&quot;&gt;Snipt&lt;/a&gt;,
&lt;a href=&quot;http://pastebay.com/&quot;&gt;PasteBay&lt;/a&gt;, &lt;a href=&quot;http://copytaste.com/&quot;&gt;CopyTaste&lt;/a&gt;,
&lt;a href=&quot;http://paste.ubuntu.org.cn/&quot;&gt;Ubuntu Paste&lt;/a&gt;, &lt;a href=&quot;http://pastebin.com/&quot;&gt;Pastebin&lt;/a&gt;），
然后将网址贴到聊天消息里。这有个好处是，
避免大段内容影响阅读，专业的第三方服务能保持代码原文不被转义，支持代码着色，
甚至可以直接运行并得到结果，如果是第三方服务的会员，也可以方便管理自己的代码。&lt;/p&gt;

&lt;p&gt;有些 *nix 高手偶尔会频繁的尝试一些高级命令，例如 &quot;@online&quot;, &quot;@ls&quot; 之类。
我个人希望群聊是本着分享和讨论交流的宗旨进行，当然闲聊也可以，话唠也行，
但是垃圾信息不要太多以至影响大家正常的交流。&lt;/p&gt;

&lt;h2&gt;为什么不是 QQ 群？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%B1%B3%E5%85%B0%E8%BE%BE%E8%AD%A6%E5%91%8A&quot;&gt;米兰达警告(Miranda Warning)&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“你有权使用 QQ，但是你在 QQ 上所说的一切将被作为呈堂证供。Do you understand?”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;GTalk 没有人数限制，不需要冲Q币来增加某些服务，而受到更多不可理喻的限制；可以轻易的加入或退出群，
或随时暂停接收他人的讨论；具有完整的开放性，有非常多的官方或第三方客户端可以用，包括Windows,Linux,Mac平台；
更尊重 &lt;a href=&quot;http://zh.wikipedia.org/zh-cn/%E8%A8%80%E8%AE%BA%E8%87%AA%E7%94%B1&quot;&gt;言论自由&lt;/a&gt;，
没有无理取闹的&lt;a href=&quot;http://zh.wikipedia.org/zh-cn/%E5%AE%A1%E6%9F%A5%E5%88%B6%E5%BA%A6&quot;&gt;审查制度&lt;/a&gt;，
不会因为胡萝卜、李子和温习功课而被敏感词。&lt;/p&gt;

&lt;p&gt;== Vim Talks™大事記 ==
2010/4/9:: Vim Talks™Gtalk 群创立于深夜。之前我加入“Vim 草堂”QQ 群，是比较活跃的成员， 因为不喜欢腾讯的所作所为，创立此群。不久后，重度删除腾讯的各种软件。&lt;/p&gt;

&lt;p&gt;2010/6/12:: 关于“群隐私”及 Vim Talks™要处于 Public 还是 Private 状态的讨论。
(&lt;a href=&quot;http://www.chatterous.com/vimcn/history/79/&quot;&gt;link&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;2010/9/15:: &lt;a href=&quot;http://lilydjwg.is-programmer.com/&quot;&gt;百合仙子(依云,lilydjwg)&lt;/a&gt;
&lt;a href=&quot;http://www.chatterous.com/vimcn/history/196/#msg_info_52&quot;&gt;成为管理员&lt;/a&gt;。&lt;br /&gt;不久 [http://davidx.me/ davidx] 也成为管理员。&lt;/p&gt;

&lt;p&gt;2010/11/3:: “我刚做了一个艰难的决定，如果群里明天还有聊QQ和360的，禁止发言24小时。”
(&lt;a href=&quot;http://www.chatterous.com/vimcn/history/293/#msg_info_2&quot;&gt;#5132176862502009&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;2010/11/4:: 临时邀请“&lt;a href=&quot;http://qun.qq.com/air/28971390&quot;&gt;Vim 草堂&lt;/a&gt;”堂主 张九天
成为 Vim Talks™的管理员。&lt;a href=&quot;http://www.chatterous.com/vimcn/history/296/#msg_info_21&quot;&gt;#5145129995941272&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2010/11/10:: 创立群规。&lt;br /&gt;邀请 shrek 和 春棍 为管理员。&lt;/p&gt;

&lt;p&gt;2010/11/24:: 群出现严重的丢消息情况，迁移到 GAE，由开源项目搭建的群组服务
&lt;code&gt;vim-cn@appspot.com&lt;/code&gt;，机器人由百合仙子搭建&amp;amp;维护，任何人都可以&lt;a href=&quot;https://github.com/lilydjwg/gaegtalk&quot;&gt;参与提交代码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;2011/1/1:: 删除 vimcn@chatterous.com 群，全面迁移到 vim-cn@appspot.com，对于未主动迁移的群友，请自行迁移。&lt;/p&gt;

&lt;p&gt;2011/10/22:: 自行删除管理员身份，退出群。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>表单设计</title>
   <link href="http://blog.hotoo.me/post/form-design.html"/>
   <updated>2010-04-08T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/form-design</id>
   <content type="html">&lt;h1&gt;表单设计&lt;/h1&gt;

&lt;p&gt;表单元素有新增、修改、删除的状态（新增和修改可以参考 svn 的图标，删除则直接从页面上删除 DOM）&lt;/p&gt;

&lt;h2&gt;Ref:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ucdchina.com/snap/6284&quot;&gt;如何精简用户界面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>有中国特色的社会主义笑话</title>
   <link href="http://blog.hotoo.me/post/China-joke.html"/>
   <updated>2010-04-08T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/China-joke</id>
   <content type="html">&lt;h1&gt;有中国特色的社会主义笑话&lt;/h1&gt;

&lt;p&gt;笑料：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ent.qq.com/a/20100407/000164.htm&quot;&gt;广电总局禁止电视节目用“NBA”等外语和缩略词&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;笑点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;三个达不溜点后头没有点卡姆。 &lt;a href=&quot;http://www.cnbeta.com/articles/108165.htm&quot;&gt;ref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注：其实根据一项 &lt;a href=&quot;http://ent.qq.com/a/20100407/000164.htm&quot;&gt;最新指示&lt;/a&gt;，
  我们的标题是违规的，正确的写法应该是
  “最受推特微博客网站和脸谱社交网站网友欢迎的美国职业男子篮球联赛球队”。
  &lt;a href=&quot;http://www.cnbeta.com/articles/108037.htm?tj=1&quot;&gt;最受 Twitter 和 Facebook 网友欢迎的 NBA 球队&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我是用窗牌操作系统第七版回复的&lt;/li&gt;
&lt;li&gt;我是用因特网探索者第八代浏览器回复的&lt;/li&gt;
&lt;li&gt;剧院浏览器第十代半用户飘过……&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>轉換編碼筆記</title>
   <link href="http://blog.hotoo.me/post/convert-encoding-note.html"/>
   <updated>2010-04-07T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/convert-encoding-note</id>
   <content type="html">&lt;h1&gt;轉換編碼筆記&lt;/h1&gt;

&lt;p&gt;今天發現一個顯示為亂碼的 html 頁面，發現是當前頁面和 reference 頁面編碼
不一致造成的，reference 編碼為 gbk，當前頁面編碼是 utf8。&lt;/p&gt;

&lt;p&gt;雖然各自 head 里的 charset 和其文件存儲的編碼一致，但某些瀏覽器（如Firefox）
從 reference 轉過來時，默認當前頁面的 charset 和 reference 的一致，導致亂碼
顯示。&lt;/p&gt;

&lt;p&gt;由于 reference 所使用的編碼是整站的基準編碼，所以把當前頁面的 fileencoding
轉成和 reference 一致即可，不過轉碼時遇到一個問題是，文件中存在特殊字符，無法
由 utf8 正常轉碼為 gbk。&lt;/p&gt;

&lt;p&gt;文檔中無法用肉眼看出那些特殊字符，于是備份后使用 notepad 或 editplus 強行轉碼
（注：會丟失那些特殊的字符），然后將轉碼后的文檔和原始備份檔比較，來查找特殊
字符，編輯（刪除無意義的，轉義有用的）保存即可。&lt;/p&gt;

&lt;p&gt;注：Vim &lt;code&gt;:set fenc=gbk&lt;/code&gt;，可以轉碼，但 &lt;code&gt;:wq!&lt;/code&gt; 無法正常保存；UltraEdit 本身的編碼
支持不夠好，不建議用來轉碼。&lt;/p&gt;

&lt;p&gt;注2：Vim diff 可以比較出不同，找出特殊字符，但可能無法正常編輯（如刪除）它們，
特殊字符是非常怪異的；BeyondCompare 和 WinMarge 基本可以勝任。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>针对HTML的Snippets</title>
   <link href="http://blog.hotoo.me/post/snippets-for-html.html"/>
   <updated>2010-04-06T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/snippets-for-html</id>
   <content type="html">&lt;h1&gt;针对 HTML 的 Snippets&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# @see http://www.blueidea.com/tech/web/2009/6547.asp
snippet cc:ie
  &amp;lt;!--[if IE${1}]&amp;gt;${2}&amp;lt;![endif]--&amp;gt;${3}
snippet cc:ie5
  &amp;lt;!--[if IE 5]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:noie5
  &amp;lt;!--[if !IE 5]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie6
  &amp;lt;!--[if IE 6]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie6+
  &amp;lt;!--[if gt IE 6]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie6+=
  &amp;lt;!--[if gte IE 6]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie6-
  &amp;lt;!--[if lt IE 6]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie6-=
  &amp;lt;!--[if lte IE 6]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:noie6
  &amp;lt;!--[if !IE 6]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie7
  &amp;lt;!--[if IE 7]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie7+
  &amp;lt;!--[if gt IE 7]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie7+=
  &amp;lt;!--[if gte IE 7]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie7-
  &amp;lt;!--[if lt IE 7]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie7-=
  &amp;lt;!--[if lte IE 7]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:noie7
  &amp;lt;!--[if !IE 7]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie8
  &amp;lt;!--[if IE 8]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie8+
  &amp;lt;!--[if gt IE 8]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie8+=
  &amp;lt;!--[if gte IE 8]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie8-
  &amp;lt;!--[if lt IE 8]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:ie8-=
  &amp;lt;!--[if lte IE 8]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
snippet cc:noie8
  &amp;lt;!--[if !IE 8]&amp;gt;${1}&amp;lt;![endif]--&amp;gt;${2}
# @see http://code.google.com/p/zen-coding/wiki/ZenHTMLElementsEn
snippet link:css
  &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;${1:style.css}&quot; media=&quot;${2:all}&quot; /&amp;gt;
snippet link:icon
  &amp;lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;${1:favicon.ico}&quot; /&amp;gt;
snippet link:favicon
  &amp;lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;${1:favicon.ico}&quot; /&amp;gt;
snippet link:rss
  &amp;lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;${1:RSS}&quot; href=&quot;${2:rss.xml}&quot; /&amp;gt;
snippet link:atom
  &amp;lt;link rel=&quot;alternate&quot; type=&quot;application/atom+xml&quot; title=&quot;${1:Atom}&quot; href=&quot;${2:atom.xml}&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>用 Vimwiki 写博客</title>
   <link href="http://blog.hotoo.me/post/use-vimwiki-for-blog.html"/>
   <updated>2010-03-29T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/use-vimwiki-for-blog</id>
   <content type="html">&lt;h1&gt;用 Vimwiki 写博客&lt;/h1&gt;

&lt;p&gt;由于众所周知的缘故，&lt;a href=&quot;http://blog.xianyun.org/&quot;&gt;我的博客&lt;/a&gt; 被消失了。
在国内买域名或主机都是十分不靠谱的事，所以目前没有重新开独立博客的打算。
而使用第三方博客服务也同样不靠谱，目前只同步在 Google Blogger 上。&lt;/p&gt;

&lt;p&gt;把东西都放在自己的计算机里算是比较可靠的方式了，
我计划使用 Vim + Vimwiki + Dropbox 来搭建自己的特殊博客系统。&lt;/p&gt;

&lt;h2&gt;原理&lt;/h2&gt;

&lt;p&gt;使用 Vim 这个极致的编辑器，加上 Vimwiki 这个优秀的插件，
可以用 Wiki 语法来写日志，&lt;del&gt;1. 然后由 Dropbox 自动同步与发布，&lt;/del&gt;
&lt;del&gt;2. 已经改为 SVN 提交到 Google Code（生成的 HTML 文件需要设置 svn:mime-type 为 text/html），&lt;/del&gt;
3. 现在是用 Git 提交到 &lt;a href=&quot;http://hotoo.github.com&quot;&gt;hotoo.github.com&lt;/a&gt;。
整体上来说这个系统基本完好，&lt;del&gt;除了域名稍稍缺憾之外，&lt;/del&gt;Github 支持绑定第三方域名。&lt;/p&gt;

&lt;h2&gt;搭建步骤&lt;/h2&gt;

&lt;p&gt;如果你看过 &lt;a href=&quot;http://code.google.com/p/vim-script-cn/&quot;&gt;Vim Script 文档中文计划&lt;/a&gt;
的介绍，下面有写内容大概已经熟悉，这里作为完整的技巧一并介绍：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;确认正确安装了 &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; 和
 &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2226&quot;&gt;Vimwiki&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果安装了 &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2540&quot;&gt;snipMate&lt;/a&gt;
 在 $VIM/vimfiles/snippets/ 下新建一个 vimwiki.snippets 文件（已有则打开文件）。
 在 vimwiki.snippets 中添加自己的博客格式模板，例如我的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; snippet blog
     %\title $1 (注意：&quot;title&quot; 前面的 &quot;\&quot; 去掉)

     = ${1:title} =
     ${2:content}

      blog:datetime=`strftime(&quot;%Y/%m/%d %H:%M:%S&quot;)`:tags=${3}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为 Vimwiki 和 snipMate 的 &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; 热键冲突，
 可以将 $VIM/vimfiles/ftplugin/vimwiki.vim 中的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; inoremap &amp;lt;expr&amp;gt; &amp;lt;buffer&amp;gt; &amp;lt;Tab&amp;gt; vimwiki_tbl#kbd_tab()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 换成其他的热键，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; inoremap &amp;lt;expr&amp;gt; &amp;lt;buffer&amp;gt; &amp;lt;C-Tab&amp;gt; vimwiki_tbl#kbd_tab()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;到此，在 .wiki 文件中输入 &lt;code&gt;blog&amp;lt;Tab&amp;gt;&lt;/code&gt; 就展开博客模板了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 vimrc 的 &lt;code&gt;g:vimwiki_list&lt;/code&gt; 中加入一个 wiki，例如我的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; let g:vimwiki_list = [
     \ {...},
     \ {...},
     \ {...},
     \ {
         \ 'path'        : 'D:\My Dropbox\blog',
       &quot; \ 'path_html'   : 'D:\My Dropbox\Public\blog',
       &quot; \ 'path_html'   : 'D:\wrokbench\hotoo.googlecode.com\blog',
         \ 'path_html'   : 'D:\wrokbench\hotoo.github.com\blog',
         \ 'html_header' : 'D:\My Dropbox\blog\template\header.tpl',
         \ 'html_footer' : 'D:\My Dropbox\blog\template\footer.tpl'
     \ }
 \ ]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;技巧&lt;/h2&gt;

&lt;p&gt;这样我使用 &lt;code&gt;4&amp;lt;leader&amp;gt;ww&lt;/code&gt;(一般是&lt;code&gt;4\ww&lt;/code&gt;) 就可以快速启动博客 Wiki 首页并进行编辑了。
Wiki 文件保存在 Dropbox 私有目录下，生成的 html 文件保存在公开目录。&lt;/p&gt;

&lt;p&gt;草稿日志的 Wiki 文件中加入 &lt;code&gt;%nohtml&lt;/code&gt; 不转成 HTML，索引页用 HTML 注释
&lt;code&gt;&amp;lt; !-- --&amp;gt;&lt;/code&gt; （去掉 ! 前面的空格）就可以了。写好想发布时，
修改对应代码并 &lt;code&gt;:Vimwiki2HTML&lt;/code&gt; 即可。&lt;/p&gt;

&lt;h2&gt;模板&lt;/h2&gt;

&lt;p&gt;可以直接查看源码得到，或者这里 &lt;a href=&quot;http://dl.dropbox.com/u/1151037/dl/vimwiki/wiki.template.zip&quot;&gt;下载&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;评论系统&lt;/h2&gt;

&lt;p&gt;可以使用 &lt;a href=&quot;http://disqus.com/&quot;&gt;disq.us&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;搜索&lt;/h2&gt;

&lt;p&gt;使用 Google AJAX Search API，详细可以参考老肥博客的
&lt;a href=&quot;http://fis.io/ajax-google-custom-search-engine.html&quot;&gt;打造完美的 ajax 版 Google 自定义搜索&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>周数(Week Number, WeekNum)计算</title>
   <link href="http://blog.hotoo.me/post/WeekNumber.html"/>
   <updated>2010-03-16T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/WeekNumber</id>
   <content type="html">&lt;h1&gt;周数(Week Number, WeekNum)计算&lt;/h1&gt;

&lt;p&gt;jQuery UI v1.8rc 版的日历控件已经非常完善，比之 v1.7.1 已经支持显示周数(WeekNum)，
而且计算 WeekNum 的算法可以自定义；而 &lt;a href=&quot;http://www.my97.net/dp/demo/index.htm&quot;&gt;My97DatePicker&lt;/a&gt;
的算法又有Bug。对于两年交接的周，有两种常见的算法：&lt;/p&gt;

&lt;p&gt;每年 1月 1日所在的周均为该年的第 1周（如MS Excel的WeekNum()函数和 jQuery 实现）；&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
   @param  date  Date - the date to get the week for
   @return  number - the number of the week within the year that contains this date */
iso8601Week: function(date) {
    var checkDate = new Date(date.getTime());
    // Find Thursday of this week starting on Monday
    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
    var time = checkDate.getTime();
    checkDate.setMonth(0); // Compare with Jan 1
    checkDate.setDate(1);
    return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;每年最后 1天所在的周&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * @param date {Date} 每周第 1天。
 * @return {Number}
 */
calculateWeek:function(date){
    var d = new Date(date.getTime()+(6*86400000)), t=d.getTime();
    var start = new Date(d.getTime()); start.setMonth(0); start.setDate(1);
    return Math.floor((t - start.getTime())/86400000/7)+1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而从自然语言中来说，这交接的一周即可以是头一年的最后一周，也可以是后一年的第 1周。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vimwiki 介绍</title>
   <link href="http://blog.hotoo.me/post/Vimwiki.html"/>
   <updated>2010-03-16T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/Vimwiki</id>
   <content type="html">&lt;h1&gt;Vimwiki 介绍&lt;/h1&gt;

&lt;h2&gt;BUG&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不支持嵌套标签，如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  = [link desc] =
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;v0.9.9 及其之前的版本中，表格对中文支持不佳，1.0 Beta 之后有较大修正。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  let g:vimwiki_use_mouse = 1
  let g:vimwiki_camel_case = 0
  let g:vimwiki_CJK_length = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GTD (/TODO) list 使用 &lt;code&gt;&amp;lt;C-Space&amp;gt;&lt;/code&gt; 切换 List Item 的 check 状态，但这个
  快捷键是中文输入法的默认快捷键。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Vim 中文帮助文档</title>
   <link href="http://blog.hotoo.me/post/Vim-Chinese-Doc.html"/>
   <updated>2010-03-15T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/Vim-Chinese-Doc</id>
   <content type="html">&lt;h1&gt;Vim 中文帮助文档&lt;/h1&gt;

&lt;p&gt;前两天不知道为什么，帮助文档又跑会英文了（隐约是用 Vimball 安装了 Vimwiki
或者 &lt;em&gt;重复&lt;/em&gt;安装了 TwitVim 的缘故）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:set helplang=cn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;无效。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let helptags=$VIM.'\vimfiles\doc'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;亦无效。&lt;/p&gt;

&lt;p&gt;很早以前不知道从哪里抄来的这个：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp -R doc $VIM.'\vimfiles\doc\'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从一开始就是报错的，一直被注释，从未被启用。&lt;/p&gt;

&lt;p&gt;在注册表中找到两个相关的项：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HKEY_CLASSES_ROOT\TypeLib\{0F0BFAE0-4C90-11D1-82D7-0004AC368519}\1.1\HELPDIR
(默认)    d:\Vim\vim72
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将默认值修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d:\Vim\vimfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d:\Vim\vimfiles\doc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启系统，均无效。&lt;/p&gt;

&lt;p&gt;另一个注册表项的路径是正确的，无需改变：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\Classes\TypeLib\{0F0BFAE0-4C90-11D1-82D7-0004AC368519}\1.1\HELPDIR
(默认值)    d:\Vim\vimfiles\doc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;万般无奈，只好重装了中文文档。&lt;/p&gt;

&lt;p&gt;中文文档可以从 &lt;a href=&quot;http://vimcdoc.sourceforge.net/&quot;&gt;vimCdoc.sf.net&lt;/a&gt; 下载，也可以从
&lt;a href=&quot;http://vimdoc.sourceforge.net/&quot;&gt;vimdoc.sf.net&lt;/a&gt; 找到链接，下载回来的是一个 .exe
可执行安装文件，研究了下安装过程：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;前面都是在抽取中文文档文件(.cnx)，并放至合适的位置：(如 D:\Vim\vim72..\vimfiles\doc)&lt;/li&gt;
&lt;li&gt;抽取 tags-cn 并输出到文档同一目录 D:\Vim\vim72..\vimfiles\doc&lt;/li&gt;
&lt;li&gt;抽取 help_cn.vim 输出到 D:\Vim\vim72..\vimfiles\syntax&lt;/li&gt;
&lt;li&gt;抽取 vimcdoc.vim 输出到 D:\Vim\vim72..\vimfiles\plugin&lt;/li&gt;
&lt;li&gt;抽取 README,INSTALL,LICENSE,AUTHORS,guides.txt 到 C:\Program Files\vimcdoc&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;其中设置 Vim 帮助的默认语言的步骤，即是在 vimcdoc.vim 中，因为 plugin 比 vimrc
加载要晚(&lt;a href=&quot;http://forum.ubuntu.org.cn/viewtopic.php?f=68&amp;amp;t=190529&quot;&gt;参考&lt;/a&gt;)，
所以在 vimrc 中的设置会被 vimcdoc.vim 覆盖掉。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS 实现有限不确定背景</title>
   <link href="http://blog.hotoo.me/post/css-limit-bg.html"/>
   <updated>2010-02-20T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/css-limit-bg</id>
   <content type="html">&lt;h1&gt;CSS 实现有限不确定背景&lt;/h1&gt;

&lt;p&gt;2 个嵌套的 html 元素，分别用个两个背景图交替叠加，
形成固定高度，有限、不确定宽度的元件，
或固定宽度，有限、不确定高度的元件（比如实现简单的圆角效果），
要求将有限延伸的背景图放置在内层元素上（如图中 b 区），
避免 b 区的背景图多出的备延伸部分（b' 区）影响到固定的背景图（a 区）的透明部分会被影响。
可以使用外层的 &lt;code&gt;padding-left&lt;/code&gt; 或内层的 &lt;code&gt;margin-left&lt;/code&gt; 来处理。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>禁用CNNIC的所谓安全证书</title>
   <link href="http://blog.hotoo.me/post/forbid-cnnic.html"/>
   <updated>2010-02-02T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/forbid-cnnic</id>
   <content type="html">&lt;h1&gt;禁用CNNIC的所谓安全证书&lt;/h1&gt;

&lt;p&gt;我个人是不信任 CNNIC 的，这里只是记录一下自己的学习过程，对 CNNIC 仍抱有幻想的同学可以无视。&lt;/p&gt;

&lt;p&gt;我都是在他人的教学指导下学习实践的，有兴趣的可以参考下面的链接：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://autoproxy.org/zh-CN/node/66&quot;&gt;CNNIC CA：最最最严重安全警告！&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://felixcat.net/2010/01/throw-out-cnnic/&quot;&gt;CNNIC，我不信任你！——从“受信任的根证书”里赶走CNNIC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.lzzxt.com/394&quot;&gt;如何阻止不信任的 CNNIC 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gracecode.com/archives/3011/&quot;&gt;Mac 下禁用 CNNIC CA 证书&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/chromium/wiki/LinuxCertManagement&quot;&gt;linux下的chromium删除CNNIC的CA&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://spreadsheets.google.com/viewform?formkey=dGctTVY0Y3VxX3lrXzZoeG90WDFBVXc6MA&quot;&gt;投票&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spreadsheets.google.com/pub?key=tg-MV4cuq_yk_6hxotX1AUw&amp;amp;output=html&quot;&gt;结果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;延伸阅读&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.booto.net/?p=1517&quot;&gt;CNNIC,流氓!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://uicom.net/blog/?p=862&quot;&gt;360的可怕&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>“正则表达式”分享资料</title>
   <link href="http://blog.hotoo.me/post/regex-share.html"/>
   <updated>2010-01-31T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/regex-share</id>
   <content type="html">&lt;h1&gt;“正则表达式”分享资料&lt;/h1&gt;

&lt;p&gt;这周三做了一次内部“正则表达式”分享活动，本来是针对小组成员的分享，结果部门很多高手也来捧场，非常荣幸。&lt;/p&gt;

&lt;p&gt;有兴趣的朋友可以下载 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/share/RegExp.zip&quot;&gt;RegExp.zip&lt;/a&gt; 这个资料。
我使用 XMind 做的一个分享大纲，从简介，基础、高级语法，一些经典的案例和有趣的用法。
另外还附有一些有用或有趣的资料。&lt;/p&gt;

&lt;p&gt;这是我生平第一次较正式的分享（上次是项目启动，没有什么实质的分享内容），
由于没有什么经验，所以准备的相对比较充分，不过分享过程中的演说和演示的比提纲中的更丰满，
同事参与的探讨也非常热情。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Editplus And Everything</title>
   <link href="http://blog.hotoo.me/post/editplus-and-everything.html"/>
   <updated>2010-01-27T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/editplus-and-everything</id>
   <content type="html">&lt;h1&gt;让 Editplus 和 Everything 结合，快速搜索&lt;/h1&gt;

&lt;p&gt;今天朋友向我分享了他新学的一个小技巧：将 Everything 搜索集成到 Editplus。&lt;/p&gt;

&lt;p&gt;毫无疑问，&lt;a href=&quot;http://www.voidtools.com/&quot;&gt;Everything&lt;/a&gt; 是 NTFS磁盘下，
本地文件快速搜索的极品，而 &lt;a href=&quot;http://www.editplus.com/&quot;&gt;Editplus&lt;/a&gt; 也是Windows下非常优秀的文本编辑器。&lt;/p&gt;

&lt;p&gt;虽然 Editplus 本身也有文件搜索功能，而且支持内容搜索，不过这个集成也非常有意思。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; 首先需要安装（绿色的也可以）有Everything本身。&lt;/li&gt;
&lt;li&gt; 下载面向命令行界面的 &lt;a href=&quot;http://www.voidtools.com/download.php&quot;&gt;es.exe&lt;/a&gt;
    ^&lt;a href=&quot;http://xbeta.info/everything/download.htm&quot;&gt;2&lt;/a&gt;^ 程序，放至 Everything 安装目录。&lt;/li&gt;
&lt;li&gt; 打开 Editplus ， “工具” -&gt; “配置用户工具” -&gt; “添加工具”&lt;/li&gt;
&lt;li&gt; “菜单文本”可以随便命名，&lt;/li&gt;
&lt;li&gt; “命令”填入 es.exe 所在的完整路径，如 E:\Everything\es.exe&lt;/li&gt;
&lt;li&gt; “参数”填 &lt;code&gt;$(FileDir) $(CurSel)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; 选中捕获输出&lt;/li&gt;
&lt;li&gt; 确定，现在选中一串文本，就可以使用 &lt;Ctrl-N&gt; 快捷键或菜单执行搜索了，搜索结果集会输出在输出窗口中。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;谢谢晓东的分享。有时间的话可以为 Vim 也写一个插件，搜索结果在 QuickFix 窗口中输出。&lt;/p&gt;

&lt;p&gt;注意：一定要记得先选定文本一串，否则会搜索出所有的文件，如果参数没有加入当前文件所在的目录，还会更惨 ^_^! 。不过作为 Vim 插件就可以更灵活了，不需要选定文本，直接执行类似命令就可以了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:ES ${keyword}[ ${path}]
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>正则表达式重复子模式前、后倾的性能比较</title>
   <link href="http://blog.hotoo.me/post/performance-for-regex-repeat-sub-pattern.html"/>
   <updated>2010-01-26T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/performance-for-regex-repeat-sub-pattern</id>
   <content type="html">&lt;h1&gt;正则表达式重复子模式前、后倾的性能比较&lt;/h1&gt;

&lt;p&gt;在准备内部的正则表达式 (Regular Expression)分享的过程中，
注意到一个细节问题：重复的子模式，是应该前倾还是后倾，这两者在性能上有什么差异？&lt;/p&gt;

&lt;p&gt;前倾和后倾是我胡诌的两个词，我的定义如下：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;前倾&lt;/em&gt; 就是前面的子表达式使用贪婪匹配或较大的量词，尽可能多的匹配内容，
导致前面匹配的内容较多而使“天平”前倾。例如：&lt;code&gt;/(?:\d{1,3}\.){3}\d{1,3}/&lt;/code&gt;。&lt;br /&gt;
&lt;em&gt;后倾&lt;/em&gt; 则相反，后面的子表达式使用贪婪匹配或较大的量词。如：&lt;code&gt;/\d{1,3}(?:\.\d{1,3}){3}/&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;前倾和后倾在实际应用中很常见，如时间，主机名等，中间以某特殊字符（串?）分隔，
被分隔部分的规则又相同的情况下，一般都是使用这两种实现方式之一。&lt;/p&gt;

&lt;p&gt;上面定义中的两个例子只是简例，可以用来大致匹配 IPv4 地址，完整的 IPv4 地址正则式如下，
它要求每段都在 0-255 之间：
前倾：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/^(?:(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后倾：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/^(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(?:\.(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我写了一个测试&lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/test/RegExp.front.end.html&quot;&gt;比较这两个正则性能&lt;/a&gt;
的页面，在 IE7, FF3.6, Safari 4, Opera 10 下测试均为前倾的性能较高，Chrome 4 下则不相伯仲。&lt;/p&gt;

&lt;p&gt;p.s. 这种重复子模式，要有语法上的简写就好了，像 Perl 正则的递归引用（或类似运行时反向引用），
维护起来就方便多了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>arguments to Array 之效率</title>
   <link href="http://blog.hotoo.me/post/performance-of-arguments-to-array.html"/>
   <updated>2010-01-07T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/performance-of-arguments-to-array</id>
   <content type="html">&lt;h1&gt;arguments to Array 之效率&lt;/h1&gt;

&lt;p&gt;怿飞昨天发有一篇《&lt;a href=&quot;http://www.planabc.net/2010/01/06/arguments_to_array/&quot;&gt;如何将函数的实际参数转换成数组&lt;/a&gt;》
的日志，其实核心不是讲“如何如何”，而是比较了几种算法/语法的效率。
说到算法本身的性能，我和 &lt;a href=&quot;http://www.planabc.net/2010/01/06/arguments_to_array/#comment-5869&quot;&gt;army 的看法&lt;/a&gt;
一样，对这篇日志的观点提出质疑。&lt;/p&gt;

&lt;p&gt;从语法原理上，Array.prototype.slice.call(arguments)是对数组的slice方法的原型直接引用，而[].slice.call(arguments)则需要创建数组对象。没有理由后者比前者的性能还要高的。&lt;/p&gt;

&lt;p&gt;不过我还是写了 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/test/toArray.html&quot;&gt;测试&lt;/a&gt;
来证实自己的观点，为了尽量少的避免其他干扰（包括函数调用带来的消耗），
算法/语法都直接内联写在计时器一起。&lt;/p&gt;

&lt;p&gt;这几个例子分别比较了：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;Array.apply(this,arguments)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; &lt;code&gt;Array.prototype.slice.call(arguments)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; &lt;code&gt;[].slice.call(arguments)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; Prototype 的 &lt;code&gt;$A(arguments)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; jQuery 的 &lt;code&gt;makeArray(arguments)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt; 和最土的循环算法。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;并在各个浏览器（Multi IE 6, IETester 5.5, IETester 6, IE 7, FF 3.5, Chrome 4,
Safari 4, Opera 10）下一一测试。也欢迎各位参与测试并将结果提交给我，
如果你觉得测试有不公平合理的地方也可以提出。&lt;/p&gt;

&lt;p&gt;至于结论，也不是那么好确定，不过大致如下：
&lt;code&gt;Array.apply(this,arguments)&lt;/code&gt; 在大部分情况下都能取得优胜；
而Prototype和jQuery其次，不过这两者不仅仅是针对arguments编写而且是直接调用其函数
（稍有消耗），这里只拿来比较一下，这两个还是非常出色的；
&lt;code&gt;Array.prototype.slice.call(arguments)&lt;/code&gt; 和 &lt;code&gt;[].slice&lt;/code&gt;.call(arguments)则旗鼓相当，
并没有说谁比谁一定更强，更浏览器实现有关，在部分浏览器中前者有稳定的微量优势；
至于老土的循环法，&lt;code&gt;arguments.length&lt;/code&gt; 较小时表现不俗，较大时也更浏览器有关系。
而怿飞说的那点（不确定的）非关键或巨大性能优势，其实意义不大。&lt;/p&gt;

&lt;h2&gt;延伸阅读：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;javascript-regexp-concat-and-0-length-object.html&quot;&gt;正则表达式拼接和构建零长度对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;javascript-string.html&quot;&gt;Javascript String 方法效率大比拼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;efficiency-of-javascript-equals.html&quot;&gt;Javascript 相等符(==)与完全相等符(===)之效率&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>电梯楼层选项板的位置</title>
   <link href="http://blog.hotoo.me/post/place-of-lift-floor-control-panel.html"/>
   <updated>2010-01-06T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/place-of-lift-floor-control-panel</id>
   <content type="html">&lt;h1&gt;电梯楼层选项板的位置&lt;/h1&gt;

&lt;p&gt;每天电梯使用的高峰期，相信许多人都体验，甚至主演过，许多人进门就堵在门口找自己要去的楼层。
由于中国人勤劳自主的缘故，选楼层一般都倾向于自己来做，不过这不如尽快的让大家进电梯，
然后请站在选项板旁边的人帮按一下，再谢谢对方。&lt;/p&gt;

&lt;p&gt;作为选项板本身，也应该引导用户这样来乘电梯，所以将自己挪到电梯最内侧，也可以在两侧，但最忌在电梯门旁边。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2770/4250013678_8dcdeb117c_o.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4250013678/&quot;&gt;@flickr&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>让索引和内容靠的更近</title>
   <link href="http://blog.hotoo.me/post/index-near-the-content.html"/>
   <updated>2010-01-06T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/index-near-the-content</id>
   <content type="html">&lt;h1&gt;让索引和内容靠的更近&lt;/h1&gt;

&lt;p&gt;我在看淘宝新首页的类目时，眼睛总是不自觉的先看靠右的细类目，
因为它占有更大的面积，更容易被扫视。但实际上先看左侧定位大类目，
再找更为精确的细类目可以更快的发现目标。&lt;/p&gt;

&lt;p&gt;我粗略画了一张样图，展示如何让大类目更容易被扫视。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2731/4250359264_7f682e5294_o.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4250359264/&quot;&gt;@flickr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;人眼的深浅远近调节比上下左右转动似乎要舒服的多。&lt;/p&gt;

&lt;p&gt;图片本身还可以做的更好更有层次感，或者你也有其他的方案欢迎交流。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Safari 4 Select Bug</title>
   <link href="http://blog.hotoo.me/post/safari-4-select-bug.html"/>
   <updated>2010-01-05T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/safari-4-select-bug</id>
   <content type="html">&lt;h1&gt;发现 Safari4 的 select 控件 bug&lt;/h1&gt;

&lt;p&gt;昨天看了新的&lt;a href=&quot;http://www.taobao.com/&quot;&gt;淘宝首页&lt;/a&gt;，非常赞，有不少模仿/参考Yahoo 的成分。&lt;/p&gt;

&lt;p&gt;当时用的Safari 4 Public Beta (528.16)（后来用同事的Safari 4.0.2 (530.19.1)也一样），偶然点到预订机票的页签，随便点了几下选择框(&lt;select&gt;)，2月，28天，正常；3月，28天？；4 月，28天！…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2659/4246970340_ee2cabeefc_o.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4246970340/&quot;&gt;Safari 4 select bug(Windows)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外在IE 7, FF3.5, Chrome 4, Opera 10上测试却都是正常的。&lt;/p&gt;

&lt;p&gt;源码很易读，逻辑上没有什么问题，几点建议：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 清空选项框建议使用遍历并 `selDay.remove(0);`；
    （一时忘记在什么情况下 `selDay.options.length = 0;` 会有问题了）
* 在创建好 Option 对象之后再 `selMonth.options[month].selected = true;` 和
    `selDay.options[day-startDay].selected = true;` 就可以了，无需在循环时一一判断；
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt; 另外关于转换不存在的日期（如2月31日）时，在这里其实没有什么用处的，
    转出来的日期基本也不会是用户期望的日期（用户期望是2月某日，却跑到了3月），
    遇到这种情况，变成2月1日或2月28日就可以了，而无需给出任何（讨厌的alert）提示。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;这都不是造成这个bug的原因，打印各个关键的运行时变量值都是正常的，但在界面是就是没有显示出来。&lt;/p&gt;

&lt;p&gt;今天 5 号，把昨天没有确定（是当时机器，或者当时浏览器）的问题拿出来再看，
发现2,3,4…月都只有27天了，这个值与第一次产生的 &lt;code&gt;options.length&lt;/code&gt;相等。
注释掉 519: &lt;code&gt;//startDay = now.getDate();&lt;/code&gt; ，让 &lt;select&gt; 最初长度为31，
再转到2月，发现最后多了好几个不能点击的可见选项，此时浏览器也经常性崩溃。&lt;/p&gt;

&lt;p&gt;这应该是渲染引擎的问题，而针对 IE 激活重新渲染的代码也无效：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function reflow(){
    var b = document.body;
    //b.style.zoom = b.style.zoom==&quot;1&quot;?&quot;100%&quot;:&quot;1&quot;;
    //b.style.zoom = 1.1;
    //b.style.zoom = '';
    b.style.display = &quot;none&quot;;
    b.style.display = &quot;&quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是淘宝紧邻预订机票左侧页签的“游戏快冲”却没有这个问题，于是怀疑是跟 Option 的个数有关。&lt;/p&gt;

&lt;p&gt;经过更多的实验分析， &lt;em&gt;结论&lt;/em&gt; 是超出24个 Option 之后的选项，渲染就会出问题，
而恰巧? Safari 4 默认最大下拉长度也是24个。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>反向搜索的设计</title>
   <link href="http://blog.hotoo.me/post/reverse-search.html"/>
   <updated>2009-12-31T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/reverse-search</id>
   <content type="html">&lt;p&gt;文本搜索是一项非常常用的功能，在文本编辑器中更是一个不可或缺的功能。&lt;/p&gt;

&lt;p&gt;而反向搜索（搜索光标之前的文本）的设计，最初也非常原始：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm5.static.flickr.com/4030/4231137828_a3e4fd8031_o.jpg&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4231137828/&quot;&gt;Windows Notepad&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm5.static.flickr.com/4023/4230370125_a8f522ca80_o.png&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4230370125/&quot;&gt;Editplus 2.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2574/4230370157_461d09e194_o.jpg&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4230370157/&quot;&gt;UltraEdit 11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm5.static.flickr.com/4050/4231137878_b2046bd82c_o.png&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4231137878/&quot;&gt;Eclipse 3.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这基本算是可用了，不过还是有一些非常用心的改进的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2741/4231137916_5c5f7ca33a_o.jpg&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4231137916/&quot;&gt;Editplus 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm5.static.flickr.com/4055/4231137964_93518fe61d_o.jpg&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4231137964/&quot;&gt;Windows Internet Explorer 7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2768/4230370195_7b954cda56_o.png&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4230370195/&quot;&gt;Google Chrome 4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2790/4230370185_092763befc_o.png&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4230370185/&quot;&gt;Apple Safari 4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm5.static.flickr.com/4024/4230370225_b39a29718a_o.png&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4230370225/&quot;&gt;Mozilla Firefox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这些细小的改进都有一个共性，就是可以快捷的反向搜索，快速定位到上次匹配到的地方。
作为 Vim 爱好者，她的反向搜索功能（包括搜索功能）更是华丽的惊人，normal 模式下
正向搜索(/keyword)， n 键下一个匹配， N 键前一个匹配；如果是反向搜索(?keyword)，
则相反。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>C++如何判断声明为基类的对象，是否某子类型的实例?</title>
   <link href="http://blog.hotoo.me/post/cpp-check-type.html"/>
   <updated>2009-12-31T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/cpp-check-type</id>
   <content type="html">&lt;p&gt;我有如下类结构&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BaseToken
|-- KeywordToken
     |-- ThisToken
     |-- IfToken
     |-- ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并定义有：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BaseToken lastToken;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有一个地方需要判断 lastToken 是否是 KeywordToken&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(dynamic_cast&amp;amp;lt;KeywordToken *&amp;amp;gt;(lastToken)){}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是编译时报错如下：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;LexicalAnalyzer.cpp|444| error: cannot dynamic_cast
&lt;code&gt;((LexicalAnalyzer*)this)-&amp;amp;gt;LexicalAnalyzer::lastToken’ (of type
&lt;/code&gt;class BaseToken’) to type `class KeywordToken*’ (source is not a pointer)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;貌似不能将父类型转为子类型，那么请问如何判断 &lt;code&gt;lastToken&lt;/code&gt; 是 &lt;code&gt;KeywordToken&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;经过“&lt;a href=&quot;http://www.douban.com/people/2590444/&quot;&gt;帅的不敢出门&lt;/a&gt; ”
&lt;a href=&quot;http://www.douban.com/group/topic/9279355/?start=0&amp;amp;amp;post=ok#last&quot;&gt;提点&lt;/a&gt; ：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;dynamic_cast &amp;lt; type-id &amp;gt; ( expression )&lt;br&gt;
&lt;br /&gt;
The type-id must be a pointer or a reference to a previously defined
class type or a “pointer to void”. The type of expression must be
a pointer if type-id is a pointer, or an l-value if type-id is a reference.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;dynamic_cast&lt;/code&gt; 需要的是一个指针，将代码改为如下即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(dynamic_cast&amp;amp;lt;KeywordToken *&amp;amp;gt;(&amp;amp;amp;lastToken)){}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vckbase.com/document/viewdoc/?id=653&quot;&gt;如何在运行时确定对象类型（RTTI）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cppreference.com/wiki/keywords/dynamic_cast&quot;&gt;dynamic_cast&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>增强 Vim 的语法折叠</title>
   <link href="http://blog.hotoo.me/post/impoved-fold-for-vim.html"/>
   <updated>2009-12-04T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/impoved-fold-for-vim</id>
   <content type="html">&lt;h1&gt;增强 Vim 的语法折叠&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;折叠多行注释&lt;/p&gt;

&lt;p&gt; /*&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is file description.&lt;/li&gt;
&lt;li&gt;@author 闲耘™ (@hotoo xianyun[AT]xianyun.org)
*/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;折叠为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* This is file description. ... */
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;折叠单行注释&lt;/p&gt;

&lt;p&gt; // Line Comment 1.
 // Line Comment 2.
 // Line Comment 3.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;折叠为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Line Comments 1. ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;折叠导入外部定义&lt;/p&gt;

&lt;p&gt; @import java.lang.&lt;em&gt;;
 @import java.io.&lt;/em&gt;;
 @import java.net.&lt;em&gt;;
 @import java.util.&lt;/em&gt;;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;折叠为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import java.lang.*; ...


#include &amp;lt;iostream&amp;gt;
#include &quot;xxx.h&quot;
#include &quot;yyy.h&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;折叠为”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt; ...
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;折叠作用域&lt;/p&gt;

&lt;p&gt; window.setTimeout(function(){
     alert(0);
 }, 1000);&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;折叠为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window.setTimeout(function(){...}, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这属于语法折叠部分。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;折叠标记语言&lt;/p&gt;

&lt;p&gt; &lt;div id=&quot;demo&quot; onclick=&quot;alert(0)&quot;&gt;
     some thing.
 &lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;折叠为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;demo&quot;&amp;gt;...&amp;lt;/div&amp;gt;


&amp;lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;xx.css&quot; /&amp;gt;
&amp;lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;yy.css&quot; /&amp;gt;
&amp;lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;zz.css&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;折叠为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;xx.css&quot; /&amp;gt; ...


&amp;lt;script type=&quot;text/javascript&quot; src=&quot;xx.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;yy.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;zz.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;折叠为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;xx.js&quot;&amp;gt;&amp;lt;/script&amp;gt; ...


&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;/*&amp;lt;![CDATA[*/
alert(0);
/*]]&amp;gt;*/&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;折叠为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;...&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上是我目前想到的折叠方式，欢迎补充。&lt;/p&gt;

&lt;p&gt;这里推荐一个 &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1491&quot;&gt;增强的 Javascript 语法文件&lt;/a&gt; ，
有非常多值得借鉴的地方。&lt;/p&gt;

&lt;p&gt;遗憾：折叠文本(foldtext)没有状态栏(statusline)的居左、居右概念(以等号[=]分隔)，
比如想将在左侧放置折叠上下文文本，右侧放置被折叠的行数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if(true){...) ----------------------------------[3 lines]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前只能通过计算 Vim 窗口宽度和折叠文本的长度来模拟。&lt;/p&gt;

&lt;p&gt;这个折叠方法我已经在C,C++,Java,Javascript,CSS上实现，主要跟语法(syntax)
文件和折叠文本(foldtext) 有关。&lt;/p&gt;

&lt;p&gt;另外我觉得被折叠的行应该和注释一样低调一点（desert主题使用金色的文本前景色）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2490/4157973680_be7167ac77_o.png&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4157973680/&quot;&gt;@source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2556/4157213437_144329fe89_o.png&quot; alt=&quot;&quot; /&gt;
&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4157213437/&quot;&gt;@source&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>让 Vim 支持 cue</title>
   <link href="http://blog.hotoo.me/post/vim-cue.html"/>
   <updated>2009-11-06T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim-cue</id>
   <content type="html">&lt;h2&gt;自动识别文件类型&lt;/h2&gt;

&lt;p&gt;在 $VIM/vim72/filetype.vim 中加入以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;au BufRead,BufNewFile *.cue setfiletype cue
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;语法高亮&lt;/h2&gt;

&lt;p&gt;下载 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vimfiles/syntax/cue.vim&quot;&gt;cue.vim&lt;/a&gt;
放至 &lt;code&gt;$VIM/vimfiles/syntax/&lt;/code&gt; 目录下。&lt;/p&gt;

&lt;h2&gt;自动补全&lt;/h2&gt;

&lt;p&gt;如果已安装 &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2540&quot;&gt;snipMate&lt;/a&gt;。
下载 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vimfiles/snippets/cue.snippets&quot;&gt;cue.snippets&lt;/a&gt;
放至 &lt;code&gt;$VIM/vimfiles/snippets/&lt;/code&gt; 目录下即可。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>让 Vim 支持 CSS3</title>
   <link href="http://blog.hotoo.me/post/vim-css3.html"/>
   <updated>2009-11-06T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim-css3</id>
   <content type="html">&lt;p&gt;和 &lt;a href=&quot;http://www.w3.org/TR/html5/&quot;&gt;HTML5&lt;/a&gt; 一样，&lt;a href=&quot;http://www.w3.org/TR/css3-roadmap/&quot;&gt;CSS3&lt;/a&gt;
也是目前热门的技术，为了在 Vim 中更舒适的编辑 css ，我整理补充了 css3 的语法高亮和自动补全部分。&lt;/p&gt;

&lt;h2&gt;语法高亮&lt;/h2&gt;

&lt;p&gt;下载这个 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vimfiles/syntax/css.vim&quot;&gt;css.vim&lt;/a&gt;
，放至 &lt;code&gt;$VIM/vimfiles/syntax/&lt;/code&gt; (Windows) 或 &lt;code&gt;~/.vim/syntax/&lt;/code&gt; (*nix) 目录下即可。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;更新&lt;/em&gt; ：&lt;/p&gt;

&lt;p&gt;将 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vim72/syntax/css.vim&quot;&gt;css.vim&lt;/a&gt;
下载放置 &lt;code&gt;$VIM/vim72/syntax/&lt;/code&gt; 下，覆盖源文件，这个版本补充和修正了CSS3的伪类支持。&lt;/p&gt;

&lt;h2&gt;自动补全&lt;/h2&gt;

&lt;p&gt;下载这个 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vim72/autoload/csscomplete.vim&quot;&gt;csscomplete.vim&lt;/a&gt;
放至 &lt;code&gt;$VIM/vim72/autoload/&lt;/code&gt; 目录下，覆盖原文件即可。&lt;/p&gt;

&lt;p&gt;其中 vim72 中的 72 是 Vim 版本号。&lt;/p&gt;

&lt;p&gt;如果安装有 snipMate，可以参考这个
&lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vimfiles/snippets/css.snippets&quot;&gt;css.snippets&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;语法验证&lt;/h2&gt;

&lt;p&gt;可以参考这篇 &lt;a href=&quot;validator-for-vim.html&quot;&gt;在 Vim 中验证 X/HTML, Javascript 和 CSS&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;参考：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://webteam.tencent.com/css3/&quot;&gt;CSS 3.0 参考手册 (中文版)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>让Vim支持html5</title>
   <link href="http://blog.hotoo.me/post/vim-html5.html"/>
   <updated>2009-11-01T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim-html5</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/html5/&quot;&gt;html5&lt;/a&gt; 呼之已出，众多的现代浏览器也已支持其大半新特性。&lt;/p&gt;

&lt;h2&gt;HTML5 语法高亮&lt;/h2&gt;

&lt;p&gt;网上已有让 Vim 支持新的标签和属性的语法文件，安装好语法文件即可正确的高亮显示html5标记和属性。&lt;/p&gt;

&lt;p&gt;详细方法参考 &lt;a href=&quot;http://rm.blog.br/2009/09/vim-syntax-highlight-para-html-5/&quot;&gt;VIM syntax highlight para HTML 5&lt;/a&gt;，
下载其 &lt;a href=&quot;http://rm.blog.br/wp-content/uploads/2009/09/html.vim&quot;&gt;html.vim&lt;/a&gt; 语法文件，
放至 &lt;code&gt;$VIM/vimfiles/syntax/&lt;/code&gt; 目录下即可。&lt;/p&gt;

&lt;p&gt;注：因为 html5 本身在不断更新，所以上面的脚本并不完整，我将持续关注并更新这个
&lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vimfiles/syntax/html.vim&quot;&gt;html.vim&lt;/a&gt; 脚本。&lt;/p&gt;

&lt;h2&gt;html5 自动补全&lt;/h2&gt;

&lt;p&gt;不过貌似目前还未有让 Vim 完整支持 html5 自动完成（又称自动补全）之脚本。&lt;/p&gt;

&lt;p&gt;我初步研究并修改了 &lt;code&gt;$VIM/vim72/autoload/htmlcomplete.vim&lt;/code&gt; ，使其支持 html5
的自动完成。目前这个脚本逻辑基本可用，不过针对 html5 自动完成的数据
（ &lt;code&gt;$VIM/vim72/autoload/xml/html5.vim&lt;/code&gt; ）还在收集调整中，
我也趁此机会深入学习一些 html5 知识。&lt;/p&gt;

&lt;h2&gt;安装详情&lt;/h2&gt;

&lt;p&gt;将 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vim72/autoload/htmlcomplete.vim&quot;&gt;htmlcomplete.vim&lt;/a&gt;
下载放至 &lt;code&gt;$VIM/vim72/autoload/&lt;/code&gt; 目录下，覆盖原文件即可，
再将 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vim72/autoload/xml/html5.vim&quot;&gt;html5.vim&lt;/a&gt;
下载放至 &lt;code&gt;$VIM/vim72/autoload/xml/&lt;/code&gt; 目录下即可。&lt;/p&gt;

&lt;p&gt;注：这个 html5.vim近期会做一些更新补充，以支持更完整正确的 html5 语法。&lt;/p&gt;

&lt;h2&gt;html5 合法性验证&lt;/h2&gt;

&lt;p&gt;参考我的前一篇 &lt;a href=&quot;validator-for-vim.html&quot;&gt;在 Vim 中验证 X/HTML, Javascript 和 CSS&lt;/a&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在 Vim 中验证 X/HTML, Javascript 和 CSS</title>
   <link href="http://blog.hotoo.me/post/validator-for-vim.html"/>
   <updated>2009-10-25T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/validator-for-vim</id>
   <content type="html">&lt;p&gt;%toc&lt;/p&gt;

&lt;p&gt;Unix/Linux（以下统称Unix）下可参考&lt;a href=&quot;http://blog.whatwg.org/vim-checker&quot;&gt;这里&lt;/a&gt;
和 &lt;a href=&quot;http://natalian.org/archives/2008/05/17/vim-web-ide/&quot;&gt;这里&lt;/a&gt;，
因为介绍和代码都是现成的，而且我没有实验过，所以不多作介绍。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;原理&lt;/em&gt; ：
改变makeprg，make时使用curl向指定的检测服务地址发送数据，通过管道，
使用sed编辑整理返回的数据后在Quickfix窗口中显示。&lt;/p&gt;

&lt;p&gt;我在Windows 7 下做了部分改动，由于对Unix命令不了解，目前还有一下输出格式的问题待修正。&lt;/p&gt;

&lt;p&gt;大部分代码参考&lt;a href=&quot;http://svn.natalian.org/projects/html5/&quot;&gt;这个Project&lt;/a&gt;，
里面的.sh文件都是 Unix中的脚本，Windows下可以改为.bat，有部分格式不同出需要修改，
如Unix下的 $1，Windows下是%1，注释符合也不同，另外Sed for Windows是不支持使用
单引号(?)的，需要改成双引号，里面的双引号需要转义，cURL和Sed这部分我目前没搞清楚，
所以少讲少错些的好。&lt;/p&gt;

&lt;p&gt;下面讲详细步骤：&lt;/p&gt;

&lt;h2&gt;校验X/HTML&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;安装cURL for Windows：

&lt;ol&gt;
&lt;li&gt;到 &lt;a href=&quot;http://curl.haxx.se/download.html&quot;&gt;这个页面&lt;/a&gt; 找“Win32 – Generic”，
 下载下面带或不带ssl的都可以；&lt;/li&gt;
&lt;li&gt;把解压的 curl.exe 放到 Path 环境变量所在的目录（如 C:\Windows）&lt;/li&gt;
&lt;li&gt;另外还需要几个动态链接库，如 libeay32.dll, libssl32.dll 直接在网上搜索
 下载并放到 Path 环境变量所在目录下即可。&lt;/li&gt;
&lt;li&gt;命令行下运行 curl 测试是否安装成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;安装Sed for Windows：

&lt;ol&gt;
&lt;li&gt;到 &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/sed.htm&quot;&gt;这里&lt;/a&gt;
 下载Binaries 版本，将解压的 sed.exe 放至系统 Path 环境变量所在目录。&lt;/li&gt;
&lt;li&gt;另外需要的 libintl-2, libiconv-2, regex 这几个动态链接库，sed下载页的
 底部都有链接，放至系统 Path 环境变量所在目录。&lt;/li&gt;
&lt;li&gt;命令行下运行 sed 测试是否安装成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载这个 &lt;a href=&quot;http://svn.natalian.org/projects/html5/validate-html.sh&quot;&gt;validate-html.sh&lt;/a&gt;，
 重命名为 validate-html.bat，放至系统 Path所在路径，并编辑修改为以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; :: sudo ln -s `pwd`/validate-html.sh /usr/bin/validate-html.sh
 :: Many thanks to Anselm Garbe for helping me with the blasted sed regexp

 @echo off
 ::curl -s -F laxtype=yes -F parser=html5 -F level=error -F out=gnu -F doc=@%1 &quot;http://validator.nu&quot; | sed 's,^.*&quot;:,'&quot;%1:&quot;','
 curl -s -F laxtype=yes -F parser=html5 -F level=error -F out=gnu -F doc=@%1 &quot;http://validator.nu&quot; | sed &quot;s,^.*&quot;&quot;:,&quot;&quot;%1:&quot;&quot;,&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 上面指定以 html5 标准来校验，如果你使用其他标准，可以自行修改。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载这个 &lt;a href=&quot;http://svn.natalian.org/projects/html5/html.vim&quot;&gt;html.vim&lt;/a&gt; ，将里面的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; set makeprg=validate-html.sh\ %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 改成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; set makeprg=validate-html.bat\ %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; 放至 &lt;code&gt;$VIM/vimfiles/ftplugin/&lt;/code&gt; 目录下。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改 _vimrc，加入如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; autocmd FileType html,xhtml nmap &amp;lt;F9&amp;gt; :make&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;:copen&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在，打开.html类型的文件，按&lt;F9&gt;键既可校验当前的html文档合法性了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2753/4043041358_09704d3424_o.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4043041358/&quot;&gt;ref&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;校验CSS&lt;/h2&gt;

&lt;p&gt;方法和上面的类似，从第3大步开始：
1. 下载这个 validate-css.sh ，重命名为 validate-css.bat 放至 Path 环境变量所在目录，并修改为如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    :: WORK-IN-PROGRESS
    curl -s -F &quot;file=@%1;type=text/css&quot; -F output=text &quot;http://jigsaw.w3.org/css-validator/validator/&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;复制一份 $VIM/vimfile/ftplugin/ 下的 html.vim，重命名为 css.vim，并修改以下内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; set makeprg=validate-css.bat\ %
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改 _vimrc 加入如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; autocmd FileType css nmap &amp;lt;F9&amp;gt; :make&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;:copen&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;至此，打开CSS文件，按下&lt;F9&gt;就可以校验CSS代码了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;img src=&quot;http://farm3.static.flickr.com/2465/4042318385_7da39f37e7_o.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/hotoo/4042318385/&quot;&gt;ref&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外还有一个插件支持验证CSS：&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1577&quot;&gt;css.vim : CSS compiler file&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;校验Javascript&lt;/h2&gt;

&lt;p&gt;这个已有单机应用程序版本，更多资料可以参考 &lt;a href=&quot;http://www.gracecode.com/archives/2902/&quot;&gt;jsLint for Vim&lt;/a&gt;
和 &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2578&quot;&gt;javaScriptLint.vim (script#2578)&lt;/a&gt; ，
另外，还是很期待 X/HTML 和 CSS 也有类似的版本的。&lt;/p&gt;

&lt;p&gt;再次说明：因为我对 cURL 和 Sed 不了解，所以目前这里的代码仍不是完好，如果你了解，请不吝赐教。&lt;/p&gt;

&lt;h2&gt;参考：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.whatwg.org/vim-checker&quot;&gt;HTML5 conformance checking in Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://natalian.org/archives/2008/05/17/vim-web-ide/&quot;&gt;VIM IDE for Web applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://svn.natalian.org/projects/html5/&quot;&gt;Project html5 (download)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://validator.nu/&quot;&gt;Validator.nu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://curl.haxx.se/&quot;&gt;cURL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/sed.htm&quot;&gt;Sed for Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gracecode.com/archives/2902/&quot;&gt;jsLint for Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2578&quot;&gt;javaScriptLint.vim : Displays JavaScript Lint warnings in the quickfix error
window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.maxsworld.org/index.php/how-tos/w3c-validator-installation&quot;&gt;W3C Validator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint, The JavaScript Code Quality Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>带套翻墙</title>
   <link href="http://blog.hotoo.me/post/fuck-gfw-with-tor.html"/>
   <updated>2009-10-24T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/fuck-gfw-with-tor</id>
   <content type="html">&lt;p&gt;因为众所周知的原因(?)，最近GFW变本加厉，穷凶极恶，处处昭示着它即将灭亡的预兆。
不过在它消亡的前夕，我们还是需要翻墙来争取自己的自由，戴套就是一种不错的方法。
不过最近的套套出了点问题，下面讲修复的办法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;到这里下载 &lt;a href=&quot;http://www.filedropper.com/tor&quot;&gt;Tor Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后将里面的文件释放到（%USER% 替换成你的计算机用户）：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Windows XP(?): &lt;code&gt;C:\Documents and Settings\%USER%\Application Data\Tor&lt;/code&gt;&lt;br /&gt;
Vista: &lt;code&gt;C:\Users\%USER%\AppData\Roaming\Application Data\Tor\torrc&lt;/code&gt;&lt;br /&gt;
Windows 7: &lt;code&gt;C:\Users\%USER%\AppData\Roaming\Vidalia&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动 Vidalia ，在设置里面，设置”高级”，配置目录为（不同操作系统参考上面及实际地址，下面以XP为例）：&lt;/p&gt;

&lt;p&gt; Tor Configuration File:&lt;br&gt;
 &lt;code&gt;C:\Documents and Settings\%USER%\Application Data\Tor\torrc&lt;/code&gt;&lt;br /&gt;
 Data Directory:&lt;br&gt;
 &lt;code&gt;C:\Documents and Settings\%USER%\Application Data\Tor&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;参考：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bugx.org/128&quot;&gt;连不上 tor 的解决方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tieba.baidu.com/f?kz=647422480&quot;&gt;关于近期 Tor 无法连接的问题，请统一在此帖中问、答，谢谢。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tieba.baidu.com/f?kz=647146360&quot;&gt; Tor Cache 和使用方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tieba.baidu.com/f?kz=647221300&quot;&gt;近期用不了 tor 的同学请进（zt）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tieba.baidu.com/f?kz=646922417&quot;&gt;连不上TOR了&lt;/a&gt; (参考第30条回复)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.filedropper.com/tor&quot;&gt;Tor.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_5e9836180100fti1.html&quot;&gt;连不上 tor 的解决方法（综合）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Vim映射Home键到首个非空字符</title>
   <link href="http://blog.hotoo.me/post/map-home-key-for-vim.html"/>
   <updated>2009-10-22T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/map-home-key-for-vim</id>
   <content type="html">&lt;p&gt;许多编辑器有相关选项，可以直接设置让 &lt;code&gt;&amp;lt;Home&amp;gt;&lt;/code&gt; 键在首个非空字符和行首之间跳转。&lt;/p&gt;

&lt;p&gt;Vim 也有快捷键，normal 模式下：&lt;br /&gt;
&lt;code&gt;0&lt;/code&gt; 跳转到行首；&lt;br /&gt;
&lt;code&gt;^&lt;/code&gt; 跳转到首个非空字符；&lt;br /&gt;
&lt;code&gt;$&lt;/code&gt; 跳转到行尾。&lt;/p&gt;

&lt;p&gt;目前未知跳转到最后一个非空字符的快捷键，有个网友提供了一个很好玩的技巧：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap &amp;lt;End&amp;gt; /\S\s*$&amp;lt;CR&amp;gt;:nohl&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了将 &lt;code&gt;&amp;lt;Home&amp;gt;&lt;/code&gt;和 &lt;code&gt;End&amp;gt;&lt;/code&gt; 键映射到其他编辑器常用的设置，我写了个可以用的代码，请高手不吝赐教。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot; Dynamic bind &amp;lt;HOME&amp;gt; key
&quot; if caret/cursor not at the frist non-white-space character
&quot;   move caret/cursor to there
&quot; else
&quot;   move to beginning
function HomeBind(offset)
    let cursor=getpos('.')
    let s0=getline(line('.'))
    let s1=substitute(s0, &quot;^\\s\\+&quot;, &quot;&quot;, &quot;&quot;)
    let x=len(s0)-len(s1)+1
    if col('.') == x-a:offset
        let x=1
    endif
    call setpos('.', [cursor[0], cursor[1], x, cursor[3]])
endfunction
imap &amp;lt;silent&amp;gt; &amp;lt;Home&amp;gt; &amp;lt;Esc&amp;gt;:call HomeBind(1)&amp;lt;cr&amp;gt;i
nmap &amp;lt;silent&amp;gt; &amp;lt;Home&amp;gt; :call HomeBind(0)&amp;lt;cr&amp;gt;
vmap &amp;lt;silent&amp;gt; &amp;lt;Home&amp;gt; &amp;lt;Esc&amp;gt;:call HomeBind(1)&amp;lt;cr&amp;gt;

&quot; Dynamic bind &amp;lt;END&amp;gt; key
&quot; if caret/cursor not at the end
&quot;   move caret/cursor to there
&quot; else
&quot;   move to last non-white-space character.
function EndBind(offset)
    let cursor=getpos('.')
    let s0=getline(line('.'))
    let s1=substitute(s0, &quot;\\s*$&quot;, &quot;&quot;, &quot;&quot;)
    let x=len(s0)+a:offset
    if col('.') == x
        let x=len(s1)+a:offset
    endif
    call setpos('.', [cursor[0], cursor[1], x, cursor[3]])
endfunction
imap &amp;lt;silent&amp;gt; &amp;lt;End&amp;gt; &amp;lt;Esc&amp;gt;:call EndBind(0)&amp;lt;cr&amp;gt;a
nmap &amp;lt;silent&amp;gt; &amp;lt;End&amp;gt; :call EndBind(0)&amp;lt;cr&amp;gt;
vmap &amp;lt;silent&amp;gt; &amp;lt;End&amp;gt; :call EndBind(0)&amp;lt;cr&amp;gt;
&quot;nmap &amp;lt;End&amp;gt; /\S\s*$&amp;lt;CR&amp;gt;:nohl&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里还有几个实现很优雅，但稍有问题的脚本：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/SmartHome_and_SmartEnd_over_wrapped_lines&quot;&gt;SmartHome and SmartEnd over wrapped lines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2772&quot;&gt;Crazy Home Key&lt;/a&gt;
  &lt;a href=&quot;http://chenkaie.blogspot.com/2009/09/vim-crazy-home-key-crazyhomekeyvim.html&quot;&gt;blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gist.github.com/214532&quot;&gt;c9s: smart_home_end.vim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Firefox Profile 及多实例运行</title>
   <link href="http://blog.hotoo.me/post/firefox-profile-and-multi-instance.html"/>
   <updated>2009-10-22T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/firefox-profile-and-multi-instance</id>
   <content type="html">&lt;p&gt;之前就知道Firefox 支持多账户，并允许各账户安装不同的插件，会话信息也完全独立。&lt;/p&gt;

&lt;p&gt;方法是制作快捷方式，目标指向Firefox的安装路径，并加上 &lt;code&gt;-P&lt;/code&gt; 参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;C:\Program Files\Mozilla Firefox\firefox.exe&quot; -P
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加引号是为了防止空格问题。这样会启动选择账户的对话框，如果想直接指定账户启动，
而不出现对话框，可以在 &lt;code&gt;-P&lt;/code&gt; 参数后直接带账户的名称，如默认的 default：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;C:\Program Files\Mozilla Firefox\firefox.exe&quot; -P default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想同时启动多个Firefox独立的账户实例，可以加上 &lt;code&gt;-no-remote&lt;/code&gt; 参数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;C:\Program Files\Mozilla Firefox\firefox.exe&quot; -no-remote -P debug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;受 Editplus 的影响，其&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt; 快捷键可以使用内置的IE核心浏览器预览和 html
源码间快速切换（也可以使用外部浏览器）。&lt;/p&gt;

&lt;p&gt;最近在定义 vimrc 时映射了 Cpp 的快速编译和运行快捷键，顺手一并映射了批处理和 x/html 文件类型的运行/预览快捷键，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd FileType xhtml,html nmap &amp;lt;F5&amp;gt; :exe '!start &quot;C:\Program Files\Mozilla Firefox\firefox.exe&quot; &quot;'.expand(&quot;%&quot;).'&quot;'&amp;lt;cr&amp;gt;
autocmd FileType dosbatch nmap &amp;lt;F5&amp;gt; :exe '!&quot;'.expand(&quot;%&quot;).'&quot;'&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于 default 和 debug 账户都加上了 &lt;code&gt;-no-remote&lt;/code&gt; 参数，Firefox 被设置为默认浏览器，并使用外部程序打开链接是，会弹出如下警告：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;“Firefox 已经在运行，但是没有响应。如要打开新窗口，您必须先关闭该 Firefox
进程，或者重新启动您的系统。”&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;确定后会被直接退出，打开链接失败。&lt;/p&gt;

&lt;p&gt;解决办法是的主账户启动时不带 &lt;code&gt;-no-remote&lt;/code&gt; 参数，其他账户带此参数启动，此时从
外部程序打开的链接，会在此不带 &lt;code&gt;-no-remote&lt;/code&gt; 参数的主账户中启动，另外还可以
带上 &lt;code&gt;-new-window&lt;/code&gt; 或 &lt;code&gt;-new-tag&lt;/code&gt; 参数。&lt;/p&gt;

&lt;p&gt;另外还有一个问题是，每次按 &lt;code&gt;&amp;lt;F5&amp;gt;&lt;/code&gt; 都会从新的页签或窗口中打开，而不是刷新已有的同路径页。&lt;/p&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.cathayan.org/item/1543&quot;&gt;同时运行两个 Firefox实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lifehacker.com/software/firefox/geek-to-live--manage-multiple-firefox-profiles-231646.php#c896803&quot;&gt;Geek to Live: Manage multiple Firefox profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kb.mozillazine.org/Command_line_arguments&quot;&gt;Command line arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://support.mozilla.com/zh-CN/kb/Profiles&quot;&gt;Profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dreamsouls.net/ds/archives/220&quot;&gt;firefox 啟動參數&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;另：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.inness.cn/archives/598.html&quot;&gt;“Firefox 已经在运行，但是没有响应。”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.anopos.com/ant/firefox-is-already-running-but-is-not-responding/&quot;&gt;Firefox 已经在运行，但是没有响应&lt;/a&gt;
  &lt;a href=&quot;http://hi.baidu.com/wlwlcy/blog/item/eab5e9ce05153f0493457e5d.html&quot;&gt;2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>asx snippets for vim</title>
   <link href="http://blog.hotoo.me/post/asx-snippets-for-vim.html"/>
   <updated>2009-10-20T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/asx-snippets-for-vim</id>
   <content type="html">&lt;p&gt;前段时间写了个 asx (Windows Media Player 的播放列表格式) 的
&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2540&quot;&gt;snipMate&lt;/a&gt; 的模板语法文件。&lt;/p&gt;

&lt;p&gt;本身很简单，&lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/vimfiles/snippets/asx.snippets&quot;&gt;分享在此&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;安装snipMate之后，将上面的 asx.snippets 文件丢进 &lt;code&gt;$VIM/vimfiles/snippets/&lt;/code&gt; 文件夹即可。&lt;/p&gt;

&lt;h2&gt;什么是asx?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/507258.htm&quot;&gt;asx – 百度百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://hi.baidu.com/yisee/blog/item/2aa5499bc8094eb6c9eaf4a3.html&quot;&gt;ASX 文件格式全功略&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>配置 Vim 作为 C++ 开发环境初步</title>
   <link href="http://blog.hotoo.me/post/vim-for-cpp-dev.html"/>
   <updated>2009-10-19T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim-for-cpp-dev</id>
   <content type="html">&lt;p&gt;一般来说，如果你使用 Vim 开发完整的项目，使用 Makefile 并直接 &lt;code&gt;:make&lt;/code&gt; 就可以了。&lt;/p&gt;

&lt;p&gt;将下面的代码写入到 vimrc 中， Vim 会捕获编译过程中出现的消息并显示在 Quickfix 窗口。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd FileType cpp,c nmap &amp;lt;F9&amp;gt; :make&amp;lt;CR&amp;gt; :copen&amp;lt;CR&amp;gt; &amp;lt;C-W&amp;gt;10_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是如果你是 C/C++ 新手，目前较多书写单个的 C/C++ 代码文件，或者只是想快速测试
某段代码的话，使用 gcc/g++ 直接编译或许是更简单的方式。你可以直接在 Vim 中执行
外部 gcc/g++ 命令，也可以想这样映射快捷键：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd FileType cpp nmap &amp;lt;F10&amp;gt; :w&amp;lt;cr&amp;gt;:exe &quot;!gcc -o &quot;.expand(&quot;%:r&quot;).&quot;.exe &quot;.expand(&quot;%&quot;)&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过这样使用外部命令， Vim 并不能捕获编译过程的输出消息，就无法在 Vim 中根据
错误消息有效的定位到错误行了。&lt;/p&gt;

&lt;p&gt;有更好的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd FileType cpp nmap &amp;lt;F10&amp;gt; :w&amp;lt;cr&amp;gt;:exe &quot;:set makeprg=g++\\\ -Wall\\\ -o\\\ &quot;.expand(&quot;%:r&quot;).&quot;.exe\\\ &quot;.expand(&quot;%&quot;)&amp;lt;cr&amp;gt;:make&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;:cw&amp;lt;cr&amp;gt;
autocmd FileType c nmap &amp;lt;F10&amp;gt; :w&amp;lt;cr&amp;gt;:exe &quot;:set makeprg=gcc\\\ -Wall\\\ -o\\\ &quot;.expand(&quot;%:r&quot;).&quot;.exe\\\ &quot;.expand(&quot;%&quot;)&amp;lt;cr&amp;gt;:make&amp;lt;cr&amp;gt;&amp;lt;cr&amp;gt;:cw&amp;lt;cr&amp;gt;
autocmd FileType cpp,c nmap &amp;lt;F5&amp;gt; :exe &quot;!&quot;.expand(&quot;%:r&quot;).&quot;.exe&quot;&amp;lt;Left&amp;gt;
autocmd FileType javascript nmap &amp;lt;F9&amp;gt; :call JsonLint()&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再补充映射一些 Quickfix 模式中快速跳转的快捷键：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;map &amp;lt;F4&amp;gt; :cclose&amp;lt;CR&amp;gt;
map &amp;lt;F8&amp;gt; :cn&amp;lt;CR&amp;gt;
map &amp;lt;F7&amp;gt; :cp&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完整的设置可以参考 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/vim/_vimrc&quot;&gt;我的 vimrc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更多讨论 &lt;a href=&quot;https://groups.google.com/group/vim-cn/browse_thread/thread/79652cb66297881f&quot;&gt;看这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://easwy.com/blog/archives/advanced-vim-skills-quickfix-mode/&quot;&gt;vim 使用进阶: 剑不离手 – quickfix&lt;/a&gt;
  &lt;a href=&quot;http://blog.zdnet.com.cn/html/30/422230-2881199.html&quot;&gt;2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>vim字体设置</title>
   <link href="http://blog.hotoo.me/post/vim-fonts.html"/>
   <updated>2009-09-14T00:00:00+08:00</updated>
   <id>http://blog.hotoo.me/post/vim-fonts</id>
   <content type="html">&lt;p&gt;明城有 “&lt;a href=&quot;http://www.gracecode.com/archives/1545/&quot;&gt;苹果的 Courier 字体不错&lt;/a&gt;”
和“&lt;a href=&quot;http://www.gracecode.com/archives/2402/&quot;&gt;Windows 下 gVim 的雅黑字体配置&lt;/a&gt;”
两篇介绍 Vim 下设置推荐字体的文章，里面提供的设置代码及提高的下载资源都很赞。&lt;/p&gt;

&lt;p&gt;家里的 Windows 7 用了 Courier New 字体后，体验很好。&lt;/p&gt;

&lt;p&gt;但是搬到公司的 Windows XP 上却比原来 Windows 自身的 Courier New 没多大提高。&lt;/p&gt;

&lt;p&gt;今天看了蟠盛写的“&lt;a href=&quot;http://blog.htmlor.com/2007/10/14/good_programming_fonts/&quot;&gt;几种不错的编程字体&lt;/a&gt;”，
顺便看了下 &lt;a href=&quot;http://support.microsoft.com/kb/306527/zh-cn&quot;&gt;使用 ClearType 增强屏幕字体&lt;/a&gt;，按步骤 果然好了很多。&lt;/p&gt;

&lt;p&gt;这里记录完整的设置：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;下载 &lt;a href=&quot;http://hotoo.googlecode.com/svn/trunk/fonts/Apple_Courier_Gracecode.zip&quot;&gt;Apple Courier字体&lt;/a&gt;
 &lt;a href=&quot;http://www.box.net/shared/zf08nmhc8g&quot;&gt;2&lt;/a&gt;
 &lt;a href=&quot;http://lifesinger.googlecode.com/files/apple_courier_font.zip&quot;&gt;3&lt;/a&gt; ，并安装。安装方法：

&lt;ul&gt;
&lt;li&gt;for Windows 7: 右键字体文件，安装即可。&lt;/li&gt;
&lt;li&gt;for Windows XP:

&lt;ol&gt;
&lt;li&gt; 资源管理器中打开系统盘下的fonts目录（如C:\WINDOWS\Fonts，或运行fonts）&lt;/li&gt;
&lt;li&gt; 文件 -&gt; 安装新字体；&lt;/li&gt;
&lt;li&gt; 驱动器和文件夹定位到字体所在位置，字体列表将自动列出找到的字体；&lt;/li&gt;
&lt;li&gt; 选中要安装的字体，点击确定即可。&lt;/li&gt;
&lt;li&gt; 或直接将字体文件拷贝到Fonts文件夹亦可，系统将自动启动安装过程。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ClearType

&lt;ol&gt;
&lt;li&gt;控制面板 -&gt; 显示（或右键桌面 -&gt; 属性） -&gt; 外观 -&gt; 效果；&lt;/li&gt;
&lt;li&gt;选中“☑ 使用下列方式使屏幕字体的边缘平滑”；&lt;/li&gt;
&lt;li&gt;并切换下面的下拉框，选中“清晰(ClearType)”；&lt;/li&gt;
&lt;li&gt;确定即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Vim设置

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 _vimrc 中加入如下代码：&lt;/p&gt;

&lt;p&gt; set guifont=Courier_New:h11:cANSI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中文的宋体已经非常好了，不过仍然可以单独设置中文字体：&lt;/p&gt;

&lt;p&gt; set guifontwide=YouYuan:h11:cGB2312&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;此时，新启动vim即可使用新设置的字体了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;img src=&quot;http://farm4.static.flickr.com/3462/3919344550_f5cd6656c8_o.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/hotoo/3919344550/&quot;&gt;ref&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;白露非提供的字体&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://8.nf/dxa&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;设置：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;guifont=Microsoft_YaHei_Mono:h11:cANSI
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;See Also&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/#!/belleveinvis/status/19308677508894720&quot;&gt;@twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 

</feed>
